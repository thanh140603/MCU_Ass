
FinalProjectVxl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049f0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08004afc  08004afc  00014afc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004bf0  08004bf0  000200e0  2**0
                  CONTENTS
  4 .ARM          00000000  08004bf0  08004bf0  000200e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004bf0  08004bf0  000200e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004bf0  08004bf0  00014bf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004bf4  08004bf4  00014bf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e0  20000000  08004bf8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000039c  200000e0  08004cd8  000200e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000047c  08004cd8  0002047c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020109  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d28f  00000000  00000000  0002014c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000023f8  00000000  00000000  0002d3db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d60  00000000  00000000  0002f7d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a53  00000000  00000000  00030538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019276  00000000  00000000  00030f8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001006b  00000000  00000000  0004a201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008c3d1  00000000  00000000  0005a26c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003dcc  00000000  00000000  000e6640  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000ea40c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000e0 	.word	0x200000e0
 8000128:	00000000 	.word	0x00000000
 800012c:	08004ae4 	.word	0x08004ae4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000e4 	.word	0x200000e4
 8000148:	08004ae4 	.word	0x08004ae4

0800014c <isButtonPressed>:
int TimerForKeyPress = 200;

int button_ports[4] = {A0_GPIO_Port, A1_GPIO_Port, A2_GPIO_Port, A3_GPIO_Port};
int button_pins[4] = {A0_Pin, A1_Pin, A2_Pin, A3_Pin};

int isButtonPressed(int key){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if(button_flag[key] == 1){
 8000154:	4a09      	ldr	r2, [pc, #36]	; (800017c <isButtonPressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <isButtonPressed+0x22>
		button_flag[key] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	; (800017c <isButtonPressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonPressed+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	200000fc 	.word	0x200000fc

08000180 <subKeyProcess>:
void subKeyProcess(int key){
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	button_flag[key] = 1;
 8000188:	4a04      	ldr	r2, [pc, #16]	; (800019c <subKeyProcess+0x1c>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	2101      	movs	r1, #1
 800018e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000192:	bf00      	nop
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr
 800019c:	200000fc 	.word	0x200000fc

080001a0 <getKeyInput>:
void getKeyInput(int key){
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0
 80001a6:	6078      	str	r0, [r7, #4]
	KeyReg[key][0] = KeyReg[key][1];
 80001a8:	4a41      	ldr	r2, [pc, #260]	; (80002b0 <getKeyInput+0x110>)
 80001aa:	687b      	ldr	r3, [r7, #4]
 80001ac:	011b      	lsls	r3, r3, #4
 80001ae:	4413      	add	r3, r2
 80001b0:	3304      	adds	r3, #4
 80001b2:	681a      	ldr	r2, [r3, #0]
 80001b4:	493e      	ldr	r1, [pc, #248]	; (80002b0 <getKeyInput+0x110>)
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	011b      	lsls	r3, r3, #4
 80001ba:	440b      	add	r3, r1
 80001bc:	601a      	str	r2, [r3, #0]
	KeyReg[key][1] = KeyReg[key][2];
 80001be:	4a3c      	ldr	r2, [pc, #240]	; (80002b0 <getKeyInput+0x110>)
 80001c0:	687b      	ldr	r3, [r7, #4]
 80001c2:	011b      	lsls	r3, r3, #4
 80001c4:	4413      	add	r3, r2
 80001c6:	3308      	adds	r3, #8
 80001c8:	681a      	ldr	r2, [r3, #0]
 80001ca:	4939      	ldr	r1, [pc, #228]	; (80002b0 <getKeyInput+0x110>)
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	011b      	lsls	r3, r3, #4
 80001d0:	440b      	add	r3, r1
 80001d2:	3304      	adds	r3, #4
 80001d4:	601a      	str	r2, [r3, #0]
	KeyReg[key][2] = HAL_GPIO_ReadPin(button_ports[key],button_pins[key]);
 80001d6:	4a37      	ldr	r2, [pc, #220]	; (80002b4 <getKeyInput+0x114>)
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001de:	4618      	mov	r0, r3
 80001e0:	4a35      	ldr	r2, [pc, #212]	; (80002b8 <getKeyInput+0x118>)
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001e8:	b29b      	uxth	r3, r3
 80001ea:	4619      	mov	r1, r3
 80001ec:	f001 ffd0 	bl	8002190 <HAL_GPIO_ReadPin>
 80001f0:	4603      	mov	r3, r0
 80001f2:	4619      	mov	r1, r3
 80001f4:	4a2e      	ldr	r2, [pc, #184]	; (80002b0 <getKeyInput+0x110>)
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	011b      	lsls	r3, r3, #4
 80001fa:	4413      	add	r3, r2
 80001fc:	3308      	adds	r3, #8
 80001fe:	6019      	str	r1, [r3, #0]
	if((KeyReg[key][0] == KeyReg[key][1]) && (KeyReg[key][1] == KeyReg[key][2])){
 8000200:	4a2b      	ldr	r2, [pc, #172]	; (80002b0 <getKeyInput+0x110>)
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	011b      	lsls	r3, r3, #4
 8000206:	4413      	add	r3, r2
 8000208:	681a      	ldr	r2, [r3, #0]
 800020a:	4929      	ldr	r1, [pc, #164]	; (80002b0 <getKeyInput+0x110>)
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	011b      	lsls	r3, r3, #4
 8000210:	440b      	add	r3, r1
 8000212:	3304      	adds	r3, #4
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	429a      	cmp	r2, r3
 8000218:	d146      	bne.n	80002a8 <getKeyInput+0x108>
 800021a:	4a25      	ldr	r2, [pc, #148]	; (80002b0 <getKeyInput+0x110>)
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	011b      	lsls	r3, r3, #4
 8000220:	4413      	add	r3, r2
 8000222:	3304      	adds	r3, #4
 8000224:	681a      	ldr	r2, [r3, #0]
 8000226:	4922      	ldr	r1, [pc, #136]	; (80002b0 <getKeyInput+0x110>)
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	011b      	lsls	r3, r3, #4
 800022c:	440b      	add	r3, r1
 800022e:	3308      	adds	r3, #8
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	429a      	cmp	r2, r3
 8000234:	d138      	bne.n	80002a8 <getKeyInput+0x108>
		if(KeyReg[key][3] != KeyReg[key][2]){
 8000236:	4a1e      	ldr	r2, [pc, #120]	; (80002b0 <getKeyInput+0x110>)
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	011b      	lsls	r3, r3, #4
 800023c:	4413      	add	r3, r2
 800023e:	330c      	adds	r3, #12
 8000240:	681a      	ldr	r2, [r3, #0]
 8000242:	491b      	ldr	r1, [pc, #108]	; (80002b0 <getKeyInput+0x110>)
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	011b      	lsls	r3, r3, #4
 8000248:	440b      	add	r3, r1
 800024a:	3308      	adds	r3, #8
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	429a      	cmp	r2, r3
 8000250:	d01a      	beq.n	8000288 <getKeyInput+0xe8>
			KeyReg[key][3] = KeyReg[key][2];
 8000252:	4a17      	ldr	r2, [pc, #92]	; (80002b0 <getKeyInput+0x110>)
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	011b      	lsls	r3, r3, #4
 8000258:	4413      	add	r3, r2
 800025a:	3308      	adds	r3, #8
 800025c:	681a      	ldr	r2, [r3, #0]
 800025e:	4914      	ldr	r1, [pc, #80]	; (80002b0 <getKeyInput+0x110>)
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	011b      	lsls	r3, r3, #4
 8000264:	440b      	add	r3, r1
 8000266:	330c      	adds	r3, #12
 8000268:	601a      	str	r2, [r3, #0]
			if(KeyReg[key][2] == PRESSED_STATE){
 800026a:	4a11      	ldr	r2, [pc, #68]	; (80002b0 <getKeyInput+0x110>)
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	011b      	lsls	r3, r3, #4
 8000270:	4413      	add	r3, r2
 8000272:	3308      	adds	r3, #8
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	2b00      	cmp	r3, #0
 8000278:	d116      	bne.n	80002a8 <getKeyInput+0x108>
				subKeyProcess(key);
 800027a:	6878      	ldr	r0, [r7, #4]
 800027c:	f7ff ff80 	bl	8000180 <subKeyProcess>
				TimerForKeyPress = 200;
 8000280:	4b0e      	ldr	r3, [pc, #56]	; (80002bc <getKeyInput+0x11c>)
 8000282:	22c8      	movs	r2, #200	; 0xc8
 8000284:	601a      	str	r2, [r3, #0]
			if(TimerForKeyPress == 0){
				KeyReg[key][3] = NORMAL_STATE;
			}
		}
	}
}
 8000286:	e00f      	b.n	80002a8 <getKeyInput+0x108>
			TimerForKeyPress--;
 8000288:	4b0c      	ldr	r3, [pc, #48]	; (80002bc <getKeyInput+0x11c>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	3b01      	subs	r3, #1
 800028e:	4a0b      	ldr	r2, [pc, #44]	; (80002bc <getKeyInput+0x11c>)
 8000290:	6013      	str	r3, [r2, #0]
			if(TimerForKeyPress == 0){
 8000292:	4b0a      	ldr	r3, [pc, #40]	; (80002bc <getKeyInput+0x11c>)
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	2b00      	cmp	r3, #0
 8000298:	d106      	bne.n	80002a8 <getKeyInput+0x108>
				KeyReg[key][3] = NORMAL_STATE;
 800029a:	4a05      	ldr	r2, [pc, #20]	; (80002b0 <getKeyInput+0x110>)
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	011b      	lsls	r3, r3, #4
 80002a0:	4413      	add	r3, r2
 80002a2:	330c      	adds	r3, #12
 80002a4:	2201      	movs	r2, #1
 80002a6:	601a      	str	r2, [r3, #0]
}
 80002a8:	bf00      	nop
 80002aa:	3708      	adds	r7, #8
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bd80      	pop	{r7, pc}
 80002b0:	20000000 	.word	0x20000000
 80002b4:	20000044 	.word	0x20000044
 80002b8:	20000054 	.word	0x20000054
 80002bc:	20000040 	.word	0x20000040

080002c0 <fsm_automatic_run>:

int buzzer_on = 0;
int buzzer_toggle = 0;
int buzzer_value = 40;

void fsm_automatic_run(){
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b086      	sub	sp, #24
 80002c4:	af00      	add	r7, sp, #0
	switch(status) {
 80002c6:	4ba0      	ldr	r3, [pc, #640]	; (8000548 <fsm_automatic_run+0x288>)
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	3b01      	subs	r3, #1
 80002cc:	2b04      	cmp	r3, #4
 80002ce:	f200 82a8 	bhi.w	8000822 <fsm_automatic_run+0x562>
 80002d2:	a201      	add	r2, pc, #4	; (adr r2, 80002d8 <fsm_automatic_run+0x18>)
 80002d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002d8:	080002ed 	.word	0x080002ed
 80002dc:	0800035d 	.word	0x0800035d
 80002e0:	080004d7 	.word	0x080004d7
 80002e4:	08000643 	.word	0x08000643
 80002e8:	08000729 	.word	0x08000729
		case INIT:
			status = RED_GREEN;
 80002ec:	4b96      	ldr	r3, [pc, #600]	; (8000548 <fsm_automatic_run+0x288>)
 80002ee:	2202      	movs	r2, #2
 80002f0:	601a      	str	r2, [r3, #0]
			int pedesduration = (red_duration + green_duration + yellow_duration)*100;
 80002f2:	4b96      	ldr	r3, [pc, #600]	; (800054c <fsm_automatic_run+0x28c>)
 80002f4:	681a      	ldr	r2, [r3, #0]
 80002f6:	4b96      	ldr	r3, [pc, #600]	; (8000550 <fsm_automatic_run+0x290>)
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	441a      	add	r2, r3
 80002fc:	4b95      	ldr	r3, [pc, #596]	; (8000554 <fsm_automatic_run+0x294>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	4413      	add	r3, r2
 8000302:	2264      	movs	r2, #100	; 0x64
 8000304:	fb02 f303 	mul.w	r3, r2, r3
 8000308:	607b      	str	r3, [r7, #4]
			setTimer(pedesduration,9);
 800030a:	2109      	movs	r1, #9
 800030c:	6878      	ldr	r0, [r7, #4]
 800030e:	f001 fa27 	bl	8001760 <setTimer>
			setInitialValue(red_duration, green_duration);
 8000312:	4b8e      	ldr	r3, [pc, #568]	; (800054c <fsm_automatic_run+0x28c>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	4a8e      	ldr	r2, [pc, #568]	; (8000550 <fsm_automatic_run+0x290>)
 8000318:	6812      	ldr	r2, [r2, #0]
 800031a:	4611      	mov	r1, r2
 800031c:	4618      	mov	r0, r3
 800031e:	f000 fc71 	bl	8000c04 <setInitialValue>
			setTimer(green_duration*100, 0);
 8000322:	4b8b      	ldr	r3, [pc, #556]	; (8000550 <fsm_automatic_run+0x290>)
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	2264      	movs	r2, #100	; 0x64
 8000328:	fb02 f303 	mul.w	r3, r2, r3
 800032c:	2100      	movs	r1, #0
 800032e:	4618      	mov	r0, r3
 8000330:	f001 fa16 	bl	8001760 <setTimer>
			setTimer(100, 1);
 8000334:	2101      	movs	r1, #1
 8000336:	2064      	movs	r0, #100	; 0x64
 8000338:	f001 fa12 	bl	8001760 <setTimer>
			setTimer(10, 8);
 800033c:	2108      	movs	r1, #8
 800033e:	200a      	movs	r0, #10
 8000340:	f001 fa0e 	bl	8001760 <setTimer>
			buzzer_value = 100;
 8000344:	4b84      	ldr	r3, [pc, #528]	; (8000558 <fsm_automatic_run+0x298>)
 8000346:	2264      	movs	r2, #100	; 0x64
 8000348:	601a      	str	r2, [r3, #0]
			HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800034a:	2100      	movs	r1, #0
 800034c:	4883      	ldr	r0, [pc, #524]	; (800055c <fsm_automatic_run+0x29c>)
 800034e:	f002 fc07 	bl	8002b60 <HAL_TIM_PWM_Start>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8000352:	4b82      	ldr	r3, [pc, #520]	; (800055c <fsm_automatic_run+0x29c>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	2200      	movs	r2, #0
 8000358:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 800035a:	e280      	b.n	800085e <fsm_automatic_run+0x59e>
		case RED_GREEN:
			setHorizontalLeds(SET,RESET,RESET);	//D4-5 horizontal
 800035c:	2200      	movs	r2, #0
 800035e:	2100      	movs	r1, #0
 8000360:	2001      	movs	r0, #1
 8000362:	f000 fc73 	bl	8000c4c <setHorizontalLeds>
			setVerticalLeds(RESET,SET, RESET);
 8000366:	2200      	movs	r2, #0
 8000368:	2101      	movs	r1, #1
 800036a:	2000      	movs	r0, #0
 800036c:	f000 fcb4 	bl	8000cd8 <setVerticalLeds>
			if(timer_flag[9]==1){
 8000370:	4b7b      	ldr	r3, [pc, #492]	; (8000560 <fsm_automatic_run+0x2a0>)
 8000372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000374:	2b01      	cmp	r3, #1
 8000376:	d10d      	bne.n	8000394 <fsm_automatic_run+0xd4>
				pedeson=0;
 8000378:	4b7a      	ldr	r3, [pc, #488]	; (8000564 <fsm_automatic_run+0x2a4>)
 800037a:	2200      	movs	r2, #0
 800037c:	601a      	str	r2, [r3, #0]
				buzzer_on = 0;
 800037e:	4b7a      	ldr	r3, [pc, #488]	; (8000568 <fsm_automatic_run+0x2a8>)
 8000380:	2200      	movs	r2, #0
 8000382:	601a      	str	r2, [r3, #0]
				buzzer_value = 100;
 8000384:	4b74      	ldr	r3, [pc, #464]	; (8000558 <fsm_automatic_run+0x298>)
 8000386:	2264      	movs	r2, #100	; 0x64
 8000388:	601a      	str	r2, [r3, #0]
				//HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
				setPedesLeds(RESET, RESET, RESET);
 800038a:	2200      	movs	r2, #0
 800038c:	2100      	movs	r1, #0
 800038e:	2000      	movs	r0, #0
 8000390:	f000 fcee 	bl	8000d70 <setPedesLeds>
			}
			if(pedeson==1){
 8000394:	4b73      	ldr	r3, [pc, #460]	; (8000564 <fsm_automatic_run+0x2a4>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	2b01      	cmp	r3, #1
 800039a:	d104      	bne.n	80003a6 <fsm_automatic_run+0xe6>
				setPedesLeds(RESET, SET, RESET);
 800039c:	2200      	movs	r2, #0
 800039e:	2101      	movs	r1, #1
 80003a0:	2000      	movs	r0, #0
 80003a2:	f000 fce5 	bl	8000d70 <setPedesLeds>
			}
			if(buzzer_toggle) {
 80003a6:	4b71      	ldr	r3, [pc, #452]	; (800056c <fsm_automatic_run+0x2ac>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d00f      	beq.n	80003ce <fsm_automatic_run+0x10e>
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, buzzer_value);
 80003ae:	4b6a      	ldr	r3, [pc, #424]	; (8000558 <fsm_automatic_run+0x298>)
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	4b6a      	ldr	r3, [pc, #424]	; (800055c <fsm_automatic_run+0x29c>)
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	635a      	str	r2, [r3, #52]	; 0x34
				buzzer_value += 79/red_duration;
 80003b8:	4b64      	ldr	r3, [pc, #400]	; (800054c <fsm_automatic_run+0x28c>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	224f      	movs	r2, #79	; 0x4f
 80003be:	fb92 f2f3 	sdiv	r2, r2, r3
 80003c2:	4b65      	ldr	r3, [pc, #404]	; (8000558 <fsm_automatic_run+0x298>)
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	4413      	add	r3, r2
 80003c8:	4a63      	ldr	r2, [pc, #396]	; (8000558 <fsm_automatic_run+0x298>)
 80003ca:	6013      	str	r3, [r2, #0]
 80003cc:	e003      	b.n	80003d6 <fsm_automatic_run+0x116>
			}
			else {
			    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 80003ce:	4b63      	ldr	r3, [pc, #396]	; (800055c <fsm_automatic_run+0x29c>)
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	2200      	movs	r2, #0
 80003d4:	635a      	str	r2, [r3, #52]	; 0x34
			}
			if(timer_flag[0] == 1){
 80003d6:	4b62      	ldr	r3, [pc, #392]	; (8000560 <fsm_automatic_run+0x2a0>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	2b01      	cmp	r3, #1
 80003dc:	d113      	bne.n	8000406 <fsm_automatic_run+0x146>
				//setPedesLeds(RESET,RESET,RESET);
				setTimer(yellow_duration*100, 0);
 80003de:	4b5d      	ldr	r3, [pc, #372]	; (8000554 <fsm_automatic_run+0x294>)
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	2264      	movs	r2, #100	; 0x64
 80003e4:	fb02 f303 	mul.w	r3, r2, r3
 80003e8:	2100      	movs	r1, #0
 80003ea:	4618      	mov	r0, r3
 80003ec:	f001 f9b8 	bl	8001760 <setTimer>
				status = RED_YELLOW;
 80003f0:	4b55      	ldr	r3, [pc, #340]	; (8000548 <fsm_automatic_run+0x288>)
 80003f2:	2203      	movs	r2, #3
 80003f4:	601a      	str	r2, [r3, #0]
				setInitialValue(yellow_duration, yellow_duration);
 80003f6:	4b57      	ldr	r3, [pc, #348]	; (8000554 <fsm_automatic_run+0x294>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	4a56      	ldr	r2, [pc, #344]	; (8000554 <fsm_automatic_run+0x294>)
 80003fc:	6812      	ldr	r2, [r2, #0]
 80003fe:	4611      	mov	r1, r2
 8000400:	4618      	mov	r0, r3
 8000402:	f000 fbff 	bl	8000c04 <setInitialValue>
			}
			if(timer_flag[1] == 1){
 8000406:	4b56      	ldr	r3, [pc, #344]	; (8000560 <fsm_automatic_run+0x2a0>)
 8000408:	685b      	ldr	r3, [r3, #4]
 800040a:	2b01      	cmp	r3, #1
 800040c:	d105      	bne.n	800041a <fsm_automatic_run+0x15a>
				countDown();
 800040e:	f000 fbd7 	bl	8000bc0 <countDown>
				setTimer(100, 1);
 8000412:	2101      	movs	r1, #1
 8000414:	2064      	movs	r0, #100	; 0x64
 8000416:	f001 f9a3 	bl	8001760 <setTimer>

			}
			if(timer_flag[8]) {
 800041a:	4b51      	ldr	r3, [pc, #324]	; (8000560 <fsm_automatic_run+0x2a0>)
 800041c:	6a1b      	ldr	r3, [r3, #32]
 800041e:	2b00      	cmp	r3, #0
 8000420:	d00d      	beq.n	800043e <fsm_automatic_run+0x17e>
			    if(buzzer_on) {
 8000422:	4b51      	ldr	r3, [pc, #324]	; (8000568 <fsm_automatic_run+0x2a8>)
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	2b00      	cmp	r3, #0
 8000428:	d005      	beq.n	8000436 <fsm_automatic_run+0x176>
			        buzzer_toggle ^= 1;
 800042a:	4b50      	ldr	r3, [pc, #320]	; (800056c <fsm_automatic_run+0x2ac>)
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	f083 0301 	eor.w	r3, r3, #1
 8000432:	4a4e      	ldr	r2, [pc, #312]	; (800056c <fsm_automatic_run+0x2ac>)
 8000434:	6013      	str	r3, [r2, #0]
			    }
			    setTimer(10, 8);
 8000436:	2108      	movs	r1, #8
 8000438:	200a      	movs	r0, #10
 800043a:	f001 f991 	bl	8001760 <setTimer>
			}
			if(isButtonPressed(1) == 1){
 800043e:	2001      	movs	r0, #1
 8000440:	f7ff fe84 	bl	800014c <isButtonPressed>
 8000444:	4603      	mov	r3, r0
 8000446:	2b01      	cmp	r3, #1
 8000448:	d11e      	bne.n	8000488 <fsm_automatic_run+0x1c8>
				setHorizontalLeds(RESET,RESET,RESET);
 800044a:	2200      	movs	r2, #0
 800044c:	2100      	movs	r1, #0
 800044e:	2000      	movs	r0, #0
 8000450:	f000 fbfc 	bl	8000c4c <setHorizontalLeds>
				setVerticalLeds(RESET,RESET, RESET);
 8000454:	2200      	movs	r2, #0
 8000456:	2100      	movs	r1, #0
 8000458:	2000      	movs	r0, #0
 800045a:	f000 fc3d 	bl	8000cd8 <setVerticalLeds>
				setPedesLeds(RESET,RESET,RESET);
 800045e:	2200      	movs	r2, #0
 8000460:	2100      	movs	r1, #0
 8000462:	2000      	movs	r0, #0
 8000464:	f000 fc84 	bl	8000d70 <setPedesLeds>
				setTimer(100, 3);
 8000468:	2103      	movs	r1, #3
 800046a:	2064      	movs	r0, #100	; 0x64
 800046c:	f001 f978 	bl	8001760 <setTimer>
				status = MAN_RED;
 8000470:	4b35      	ldr	r3, [pc, #212]	; (8000548 <fsm_automatic_run+0x288>)
 8000472:	220d      	movs	r2, #13
 8000474:	601a      	str	r2, [r3, #0]
				printf("=============MANUAL MODE=============\r\n");
 8000476:	483e      	ldr	r0, [pc, #248]	; (8000570 <fsm_automatic_run+0x2b0>)
 8000478:	f003 fcc4 	bl	8003e04 <puts>
				printf("Current time: %d\r\n", red_duration);
 800047c:	4b33      	ldr	r3, [pc, #204]	; (800054c <fsm_automatic_run+0x28c>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	4619      	mov	r1, r3
 8000482:	483c      	ldr	r0, [pc, #240]	; (8000574 <fsm_automatic_run+0x2b4>)
 8000484:	f003 fc58 	bl	8003d38 <iprintf>
			}
			if(isButtonPressed(0) == 1){
 8000488:	2000      	movs	r0, #0
 800048a:	f7ff fe5f 	bl	800014c <isButtonPressed>
 800048e:	4603      	mov	r3, r0
 8000490:	2b01      	cmp	r3, #1
 8000492:	f040 81c8 	bne.w	8000826 <fsm_automatic_run+0x566>
				setPedesLeds(RESET,SET,RESET);
 8000496:	2200      	movs	r2, #0
 8000498:	2101      	movs	r1, #1
 800049a:	2000      	movs	r0, #0
 800049c:	f000 fc68 	bl	8000d70 <setPedesLeds>
				pedeson=1;
 80004a0:	4b30      	ldr	r3, [pc, #192]	; (8000564 <fsm_automatic_run+0x2a4>)
 80004a2:	2201      	movs	r2, #1
 80004a4:	601a      	str	r2, [r3, #0]
				buzzer_on = 1;
 80004a6:	4b30      	ldr	r3, [pc, #192]	; (8000568 <fsm_automatic_run+0x2a8>)
 80004a8:	2201      	movs	r2, #1
 80004aa:	601a      	str	r2, [r3, #0]
				int pedesduration = (red_duration+green_duration+yellow_duration)*200;
 80004ac:	4b27      	ldr	r3, [pc, #156]	; (800054c <fsm_automatic_run+0x28c>)
 80004ae:	681a      	ldr	r2, [r3, #0]
 80004b0:	4b27      	ldr	r3, [pc, #156]	; (8000550 <fsm_automatic_run+0x290>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	441a      	add	r2, r3
 80004b6:	4b27      	ldr	r3, [pc, #156]	; (8000554 <fsm_automatic_run+0x294>)
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	4413      	add	r3, r2
 80004bc:	22c8      	movs	r2, #200	; 0xc8
 80004be:	fb02 f303 	mul.w	r3, r2, r3
 80004c2:	60bb      	str	r3, [r7, #8]
				setTimer(pedesduration,9);
 80004c4:	2109      	movs	r1, #9
 80004c6:	68b8      	ldr	r0, [r7, #8]
 80004c8:	f001 f94a 	bl	8001760 <setTimer>
				setTimer(10, 8);
 80004cc:	2108      	movs	r1, #8
 80004ce:	200a      	movs	r0, #10
 80004d0:	f001 f946 	bl	8001760 <setTimer>
			}
			break;
 80004d4:	e1a7      	b.n	8000826 <fsm_automatic_run+0x566>
		case RED_YELLOW:
			setHorizontalLeds(SET,RESET,RESET);
 80004d6:	2200      	movs	r2, #0
 80004d8:	2100      	movs	r1, #0
 80004da:	2001      	movs	r0, #1
 80004dc:	f000 fbb6 	bl	8000c4c <setHorizontalLeds>
			setVerticalLeds(RESET,RESET, SET);
 80004e0:	2201      	movs	r2, #1
 80004e2:	2100      	movs	r1, #0
 80004e4:	2000      	movs	r0, #0
 80004e6:	f000 fbf7 	bl	8000cd8 <setVerticalLeds>
			if(timer_flag[9]==1){
 80004ea:	4b1d      	ldr	r3, [pc, #116]	; (8000560 <fsm_automatic_run+0x2a0>)
 80004ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004ee:	2b01      	cmp	r3, #1
 80004f0:	d10d      	bne.n	800050e <fsm_automatic_run+0x24e>
				pedeson=0;
 80004f2:	4b1c      	ldr	r3, [pc, #112]	; (8000564 <fsm_automatic_run+0x2a4>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	601a      	str	r2, [r3, #0]
				buzzer_on = 0;
 80004f8:	4b1b      	ldr	r3, [pc, #108]	; (8000568 <fsm_automatic_run+0x2a8>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	601a      	str	r2, [r3, #0]
				buzzer_value = 100;
 80004fe:	4b16      	ldr	r3, [pc, #88]	; (8000558 <fsm_automatic_run+0x298>)
 8000500:	2264      	movs	r2, #100	; 0x64
 8000502:	601a      	str	r2, [r3, #0]
				setPedesLeds(RESET, RESET, RESET);
 8000504:	2200      	movs	r2, #0
 8000506:	2100      	movs	r1, #0
 8000508:	2000      	movs	r0, #0
 800050a:	f000 fc31 	bl	8000d70 <setPedesLeds>
				//HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
			}
			if(pedeson==1){
 800050e:	4b15      	ldr	r3, [pc, #84]	; (8000564 <fsm_automatic_run+0x2a4>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	2b01      	cmp	r3, #1
 8000514:	d104      	bne.n	8000520 <fsm_automatic_run+0x260>
				setPedesLeds(RESET, SET, RESET);
 8000516:	2200      	movs	r2, #0
 8000518:	2101      	movs	r1, #1
 800051a:	2000      	movs	r0, #0
 800051c:	f000 fc28 	bl	8000d70 <setPedesLeds>
			}
			if(buzzer_toggle) {
 8000520:	4b12      	ldr	r3, [pc, #72]	; (800056c <fsm_automatic_run+0x2ac>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	2b00      	cmp	r3, #0
 8000526:	d027      	beq.n	8000578 <fsm_automatic_run+0x2b8>
                __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, buzzer_value);
 8000528:	4b0b      	ldr	r3, [pc, #44]	; (8000558 <fsm_automatic_run+0x298>)
 800052a:	681a      	ldr	r2, [r3, #0]
 800052c:	4b0b      	ldr	r3, [pc, #44]	; (800055c <fsm_automatic_run+0x29c>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	635a      	str	r2, [r3, #52]	; 0x34
                buzzer_value += 79/red_duration;
 8000532:	4b06      	ldr	r3, [pc, #24]	; (800054c <fsm_automatic_run+0x28c>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	224f      	movs	r2, #79	; 0x4f
 8000538:	fb92 f2f3 	sdiv	r2, r2, r3
 800053c:	4b06      	ldr	r3, [pc, #24]	; (8000558 <fsm_automatic_run+0x298>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	4413      	add	r3, r2
 8000542:	4a05      	ldr	r2, [pc, #20]	; (8000558 <fsm_automatic_run+0x298>)
 8000544:	6013      	str	r3, [r2, #0]
 8000546:	e01b      	b.n	8000580 <fsm_automatic_run+0x2c0>
 8000548:	20000120 	.word	0x20000120
 800054c:	2000006c 	.word	0x2000006c
 8000550:	20000070 	.word	0x20000070
 8000554:	20000074 	.word	0x20000074
 8000558:	20000064 	.word	0x20000064
 800055c:	20000178 	.word	0x20000178
 8000560:	20000300 	.word	0x20000300
 8000564:	2000012c 	.word	0x2000012c
 8000568:	2000010c 	.word	0x2000010c
 800056c:	20000110 	.word	0x20000110
 8000570:	08004afc 	.word	0x08004afc
 8000574:	08004b24 	.word	0x08004b24
            }
            else {
                __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8000578:	4bae      	ldr	r3, [pc, #696]	; (8000834 <fsm_automatic_run+0x574>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	2200      	movs	r2, #0
 800057e:	635a      	str	r2, [r3, #52]	; 0x34
            }
			if(timer_flag[0] == 1){
 8000580:	4bad      	ldr	r3, [pc, #692]	; (8000838 <fsm_automatic_run+0x578>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	2b01      	cmp	r3, #1
 8000586:	d119      	bne.n	80005bc <fsm_automatic_run+0x2fc>
				//setPedesLeds(RESET,RESET,RESET);
				setTimer(green_duration*100, 0);
 8000588:	4bac      	ldr	r3, [pc, #688]	; (800083c <fsm_automatic_run+0x57c>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	2264      	movs	r2, #100	; 0x64
 800058e:	fb02 f303 	mul.w	r3, r2, r3
 8000592:	2100      	movs	r1, #0
 8000594:	4618      	mov	r0, r3
 8000596:	f001 f8e3 	bl	8001760 <setTimer>
				status = GREEN_RED;
 800059a:	4ba9      	ldr	r3, [pc, #676]	; (8000840 <fsm_automatic_run+0x580>)
 800059c:	2204      	movs	r2, #4
 800059e:	601a      	str	r2, [r3, #0]
				buzzer_on = 0;
 80005a0:	4ba8      	ldr	r3, [pc, #672]	; (8000844 <fsm_automatic_run+0x584>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	601a      	str	r2, [r3, #0]
				buzzer_value = 100;
 80005a6:	4ba8      	ldr	r3, [pc, #672]	; (8000848 <fsm_automatic_run+0x588>)
 80005a8:	2264      	movs	r2, #100	; 0x64
 80005aa:	601a      	str	r2, [r3, #0]
				setInitialValue(green_duration, red_duration);
 80005ac:	4ba3      	ldr	r3, [pc, #652]	; (800083c <fsm_automatic_run+0x57c>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4aa6      	ldr	r2, [pc, #664]	; (800084c <fsm_automatic_run+0x58c>)
 80005b2:	6812      	ldr	r2, [r2, #0]
 80005b4:	4611      	mov	r1, r2
 80005b6:	4618      	mov	r0, r3
 80005b8:	f000 fb24 	bl	8000c04 <setInitialValue>
			}
			if(timer_flag[1] == 1){
 80005bc:	4b9e      	ldr	r3, [pc, #632]	; (8000838 <fsm_automatic_run+0x578>)
 80005be:	685b      	ldr	r3, [r3, #4]
 80005c0:	2b01      	cmp	r3, #1
 80005c2:	d105      	bne.n	80005d0 <fsm_automatic_run+0x310>
				countDown();
 80005c4:	f000 fafc 	bl	8000bc0 <countDown>
				setTimer(100, 1);
 80005c8:	2101      	movs	r1, #1
 80005ca:	2064      	movs	r0, #100	; 0x64
 80005cc:	f001 f8c8 	bl	8001760 <setTimer>
			}
			if(timer_flag[8]) {
 80005d0:	4b99      	ldr	r3, [pc, #612]	; (8000838 <fsm_automatic_run+0x578>)
 80005d2:	6a1b      	ldr	r3, [r3, #32]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d00d      	beq.n	80005f4 <fsm_automatic_run+0x334>
				if(buzzer_on) {
 80005d8:	4b9a      	ldr	r3, [pc, #616]	; (8000844 <fsm_automatic_run+0x584>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d005      	beq.n	80005ec <fsm_automatic_run+0x32c>
				    buzzer_toggle ^= 1;
 80005e0:	4b9b      	ldr	r3, [pc, #620]	; (8000850 <fsm_automatic_run+0x590>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	f083 0301 	eor.w	r3, r3, #1
 80005e8:	4a99      	ldr	r2, [pc, #612]	; (8000850 <fsm_automatic_run+0x590>)
 80005ea:	6013      	str	r3, [r2, #0]
				}
				setTimer(10, 8);
 80005ec:	2108      	movs	r1, #8
 80005ee:	200a      	movs	r0, #10
 80005f0:	f001 f8b6 	bl	8001760 <setTimer>
			}
			if(isButtonPressed(0) == 1){
 80005f4:	2000      	movs	r0, #0
 80005f6:	f7ff fda9 	bl	800014c <isButtonPressed>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b01      	cmp	r3, #1
 80005fe:	f040 8114 	bne.w	800082a <fsm_automatic_run+0x56a>
				setPedesLeds(RESET,SET,RESET);
 8000602:	2200      	movs	r2, #0
 8000604:	2101      	movs	r1, #1
 8000606:	2000      	movs	r0, #0
 8000608:	f000 fbb2 	bl	8000d70 <setPedesLeds>
				pedeson=1;
 800060c:	4b91      	ldr	r3, [pc, #580]	; (8000854 <fsm_automatic_run+0x594>)
 800060e:	2201      	movs	r2, #1
 8000610:	601a      	str	r2, [r3, #0]
				buzzer_on = 1;
 8000612:	4b8c      	ldr	r3, [pc, #560]	; (8000844 <fsm_automatic_run+0x584>)
 8000614:	2201      	movs	r2, #1
 8000616:	601a      	str	r2, [r3, #0]
				int pedesduration = (red_duration+green_duration+yellow_duration)*200;
 8000618:	4b8c      	ldr	r3, [pc, #560]	; (800084c <fsm_automatic_run+0x58c>)
 800061a:	681a      	ldr	r2, [r3, #0]
 800061c:	4b87      	ldr	r3, [pc, #540]	; (800083c <fsm_automatic_run+0x57c>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	441a      	add	r2, r3
 8000622:	4b8d      	ldr	r3, [pc, #564]	; (8000858 <fsm_automatic_run+0x598>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	4413      	add	r3, r2
 8000628:	22c8      	movs	r2, #200	; 0xc8
 800062a:	fb02 f303 	mul.w	r3, r2, r3
 800062e:	60fb      	str	r3, [r7, #12]
				setTimer(pedesduration,9);
 8000630:	2109      	movs	r1, #9
 8000632:	68f8      	ldr	r0, [r7, #12]
 8000634:	f001 f894 	bl	8001760 <setTimer>
				setTimer(10, 8);
 8000638:	2108      	movs	r1, #8
 800063a:	200a      	movs	r0, #10
 800063c:	f001 f890 	bl	8001760 <setTimer>
			}
			break;
 8000640:	e0f3      	b.n	800082a <fsm_automatic_run+0x56a>
		case GREEN_RED:
			setHorizontalLeds(RESET,SET,RESET);
 8000642:	2200      	movs	r2, #0
 8000644:	2101      	movs	r1, #1
 8000646:	2000      	movs	r0, #0
 8000648:	f000 fb00 	bl	8000c4c <setHorizontalLeds>
			setVerticalLeds(SET,RESET,RESET);
 800064c:	2200      	movs	r2, #0
 800064e:	2100      	movs	r1, #0
 8000650:	2001      	movs	r0, #1
 8000652:	f000 fb41 	bl	8000cd8 <setVerticalLeds>
			if(timer_flag[9]==1){
 8000656:	4b78      	ldr	r3, [pc, #480]	; (8000838 <fsm_automatic_run+0x578>)
 8000658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800065a:	2b01      	cmp	r3, #1
 800065c:	d10e      	bne.n	800067c <fsm_automatic_run+0x3bc>
				pedeson=0;
 800065e:	4b7d      	ldr	r3, [pc, #500]	; (8000854 <fsm_automatic_run+0x594>)
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
				buzzer_on = 0;
 8000664:	4b77      	ldr	r3, [pc, #476]	; (8000844 <fsm_automatic_run+0x584>)
 8000666:	2200      	movs	r2, #0
 8000668:	601a      	str	r2, [r3, #0]
				setPedesLeds(RESET, RESET, RESET);
 800066a:	2200      	movs	r2, #0
 800066c:	2100      	movs	r1, #0
 800066e:	2000      	movs	r0, #0
 8000670:	f000 fb7e 	bl	8000d70 <setPedesLeds>
				//HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8000674:	4b6f      	ldr	r3, [pc, #444]	; (8000834 <fsm_automatic_run+0x574>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	2200      	movs	r2, #0
 800067a:	635a      	str	r2, [r3, #52]	; 0x34
			}
			if(pedeson==1){
 800067c:	4b75      	ldr	r3, [pc, #468]	; (8000854 <fsm_automatic_run+0x594>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	2b01      	cmp	r3, #1
 8000682:	d108      	bne.n	8000696 <fsm_automatic_run+0x3d6>
				setPedesLeds(SET, RESET, RESET);
 8000684:	2200      	movs	r2, #0
 8000686:	2100      	movs	r1, #0
 8000688:	2001      	movs	r0, #1
 800068a:	f000 fb71 	bl	8000d70 <setPedesLeds>
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 800068e:	4b69      	ldr	r3, [pc, #420]	; (8000834 <fsm_automatic_run+0x574>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	2200      	movs	r2, #0
 8000694:	635a      	str	r2, [r3, #52]	; 0x34
			}
			if(timer_flag[0] == 1){
 8000696:	4b68      	ldr	r3, [pc, #416]	; (8000838 <fsm_automatic_run+0x578>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	2b01      	cmp	r3, #1
 800069c:	d113      	bne.n	80006c6 <fsm_automatic_run+0x406>
				//setPedesLeds(RESET,RESET,RESET);
				setTimer(yellow_duration*100, 0);
 800069e:	4b6e      	ldr	r3, [pc, #440]	; (8000858 <fsm_automatic_run+0x598>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	2264      	movs	r2, #100	; 0x64
 80006a4:	fb02 f303 	mul.w	r3, r2, r3
 80006a8:	2100      	movs	r1, #0
 80006aa:	4618      	mov	r0, r3
 80006ac:	f001 f858 	bl	8001760 <setTimer>
				status = YELLOW_RED;
 80006b0:	4b63      	ldr	r3, [pc, #396]	; (8000840 <fsm_automatic_run+0x580>)
 80006b2:	2205      	movs	r2, #5
 80006b4:	601a      	str	r2, [r3, #0]
				setInitialValue(yellow_duration, yellow_duration);
 80006b6:	4b68      	ldr	r3, [pc, #416]	; (8000858 <fsm_automatic_run+0x598>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	4a67      	ldr	r2, [pc, #412]	; (8000858 <fsm_automatic_run+0x598>)
 80006bc:	6812      	ldr	r2, [r2, #0]
 80006be:	4611      	mov	r1, r2
 80006c0:	4618      	mov	r0, r3
 80006c2:	f000 fa9f 	bl	8000c04 <setInitialValue>
			}
			if(timer_flag[1] == 1){
 80006c6:	4b5c      	ldr	r3, [pc, #368]	; (8000838 <fsm_automatic_run+0x578>)
 80006c8:	685b      	ldr	r3, [r3, #4]
 80006ca:	2b01      	cmp	r3, #1
 80006cc:	d105      	bne.n	80006da <fsm_automatic_run+0x41a>
				countDown();
 80006ce:	f000 fa77 	bl	8000bc0 <countDown>
				setTimer(100, 1);
 80006d2:	2101      	movs	r1, #1
 80006d4:	2064      	movs	r0, #100	; 0x64
 80006d6:	f001 f843 	bl	8001760 <setTimer>
			}
			if(isButtonPressed(0) == 1){
 80006da:	2000      	movs	r0, #0
 80006dc:	f7ff fd36 	bl	800014c <isButtonPressed>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b01      	cmp	r3, #1
 80006e4:	f040 80a3 	bne.w	800082e <fsm_automatic_run+0x56e>
				setPedesLeds(SET,RESET,RESET);
 80006e8:	2200      	movs	r2, #0
 80006ea:	2100      	movs	r1, #0
 80006ec:	2001      	movs	r0, #1
 80006ee:	f000 fb3f 	bl	8000d70 <setPedesLeds>
				pedeson=1;
 80006f2:	4b58      	ldr	r3, [pc, #352]	; (8000854 <fsm_automatic_run+0x594>)
 80006f4:	2201      	movs	r2, #1
 80006f6:	601a      	str	r2, [r3, #0]
				buzzer_on = 1;
 80006f8:	4b52      	ldr	r3, [pc, #328]	; (8000844 <fsm_automatic_run+0x584>)
 80006fa:	2201      	movs	r2, #1
 80006fc:	601a      	str	r2, [r3, #0]
				int pedesduration = (red_duration+green_duration+yellow_duration)*200;
 80006fe:	4b53      	ldr	r3, [pc, #332]	; (800084c <fsm_automatic_run+0x58c>)
 8000700:	681a      	ldr	r2, [r3, #0]
 8000702:	4b4e      	ldr	r3, [pc, #312]	; (800083c <fsm_automatic_run+0x57c>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	441a      	add	r2, r3
 8000708:	4b53      	ldr	r3, [pc, #332]	; (8000858 <fsm_automatic_run+0x598>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4413      	add	r3, r2
 800070e:	22c8      	movs	r2, #200	; 0xc8
 8000710:	fb02 f303 	mul.w	r3, r2, r3
 8000714:	613b      	str	r3, [r7, #16]
				setTimer(pedesduration,9);
 8000716:	2109      	movs	r1, #9
 8000718:	6938      	ldr	r0, [r7, #16]
 800071a:	f001 f821 	bl	8001760 <setTimer>
				setTimer(10, 8);
 800071e:	2108      	movs	r1, #8
 8000720:	200a      	movs	r0, #10
 8000722:	f001 f81d 	bl	8001760 <setTimer>
			}
			break;
 8000726:	e082      	b.n	800082e <fsm_automatic_run+0x56e>
		case YELLOW_RED:
			setHorizontalLeds(RESET,RESET,SET);
 8000728:	2201      	movs	r2, #1
 800072a:	2100      	movs	r1, #0
 800072c:	2000      	movs	r0, #0
 800072e:	f000 fa8d 	bl	8000c4c <setHorizontalLeds>
			setVerticalLeds(SET,RESET,RESET);
 8000732:	2200      	movs	r2, #0
 8000734:	2100      	movs	r1, #0
 8000736:	2001      	movs	r0, #1
 8000738:	f000 face 	bl	8000cd8 <setVerticalLeds>
			if(timer_flag[9]==1){
 800073c:	4b3e      	ldr	r3, [pc, #248]	; (8000838 <fsm_automatic_run+0x578>)
 800073e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000740:	2b01      	cmp	r3, #1
 8000742:	d10e      	bne.n	8000762 <fsm_automatic_run+0x4a2>
				pedeson=0;
 8000744:	4b43      	ldr	r3, [pc, #268]	; (8000854 <fsm_automatic_run+0x594>)
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
				buzzer_on = 0;
 800074a:	4b3e      	ldr	r3, [pc, #248]	; (8000844 <fsm_automatic_run+0x584>)
 800074c:	2200      	movs	r2, #0
 800074e:	601a      	str	r2, [r3, #0]
				setPedesLeds(RESET, RESET, RESET);
 8000750:	2200      	movs	r2, #0
 8000752:	2100      	movs	r1, #0
 8000754:	2000      	movs	r0, #0
 8000756:	f000 fb0b 	bl	8000d70 <setPedesLeds>
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 800075a:	4b36      	ldr	r3, [pc, #216]	; (8000834 <fsm_automatic_run+0x574>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	2200      	movs	r2, #0
 8000760:	635a      	str	r2, [r3, #52]	; 0x34
			}
			if(pedeson==1){
 8000762:	4b3c      	ldr	r3, [pc, #240]	; (8000854 <fsm_automatic_run+0x594>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	2b01      	cmp	r3, #1
 8000768:	d10c      	bne.n	8000784 <fsm_automatic_run+0x4c4>
				setPedesLeds(SET, RESET, RESET);
 800076a:	2200      	movs	r2, #0
 800076c:	2100      	movs	r1, #0
 800076e:	2001      	movs	r0, #1
 8000770:	f000 fafe 	bl	8000d70 <setPedesLeds>
				setTimer(10, 8);
 8000774:	2108      	movs	r1, #8
 8000776:	200a      	movs	r0, #10
 8000778:	f000 fff2 	bl	8001760 <setTimer>
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 800077c:	4b2d      	ldr	r3, [pc, #180]	; (8000834 <fsm_automatic_run+0x574>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	2200      	movs	r2, #0
 8000782:	635a      	str	r2, [r3, #52]	; 0x34
			}
			if(timer_flag[0] == 1){
 8000784:	4b2c      	ldr	r3, [pc, #176]	; (8000838 <fsm_automatic_run+0x578>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	2b01      	cmp	r3, #1
 800078a:	d11a      	bne.n	80007c2 <fsm_automatic_run+0x502>
				//setPedesLeds(RESET,RESET,RESET);
				setTimer(green_duration*100, 0);
 800078c:	4b2b      	ldr	r3, [pc, #172]	; (800083c <fsm_automatic_run+0x57c>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	2264      	movs	r2, #100	; 0x64
 8000792:	fb02 f303 	mul.w	r3, r2, r3
 8000796:	2100      	movs	r1, #0
 8000798:	4618      	mov	r0, r3
 800079a:	f000 ffe1 	bl	8001760 <setTimer>
				status = RED_GREEN;
 800079e:	4b28      	ldr	r3, [pc, #160]	; (8000840 <fsm_automatic_run+0x580>)
 80007a0:	2202      	movs	r2, #2
 80007a2:	601a      	str	r2, [r3, #0]
				setInitialValue(red_duration, green_duration);
 80007a4:	4b29      	ldr	r3, [pc, #164]	; (800084c <fsm_automatic_run+0x58c>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a24      	ldr	r2, [pc, #144]	; (800083c <fsm_automatic_run+0x57c>)
 80007aa:	6812      	ldr	r2, [r2, #0]
 80007ac:	4611      	mov	r1, r2
 80007ae:	4618      	mov	r0, r3
 80007b0:	f000 fa28 	bl	8000c04 <setInitialValue>
				if(pedeson) buzzer_on = 1;
 80007b4:	4b27      	ldr	r3, [pc, #156]	; (8000854 <fsm_automatic_run+0x594>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d002      	beq.n	80007c2 <fsm_automatic_run+0x502>
 80007bc:	4b21      	ldr	r3, [pc, #132]	; (8000844 <fsm_automatic_run+0x584>)
 80007be:	2201      	movs	r2, #1
 80007c0:	601a      	str	r2, [r3, #0]
			}
			if(timer_flag[1] == 1){
 80007c2:	4b1d      	ldr	r3, [pc, #116]	; (8000838 <fsm_automatic_run+0x578>)
 80007c4:	685b      	ldr	r3, [r3, #4]
 80007c6:	2b01      	cmp	r3, #1
 80007c8:	d105      	bne.n	80007d6 <fsm_automatic_run+0x516>
				countDown();
 80007ca:	f000 f9f9 	bl	8000bc0 <countDown>
				setTimer(100, 1);
 80007ce:	2101      	movs	r1, #1
 80007d0:	2064      	movs	r0, #100	; 0x64
 80007d2:	f000 ffc5 	bl	8001760 <setTimer>
			}
			if(isButtonPressed(0) == 1){
 80007d6:	2000      	movs	r0, #0
 80007d8:	f7ff fcb8 	bl	800014c <isButtonPressed>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b01      	cmp	r3, #1
 80007e0:	d13c      	bne.n	800085c <fsm_automatic_run+0x59c>
				setPedesLeds(SET,RESET,RESET);
 80007e2:	2200      	movs	r2, #0
 80007e4:	2100      	movs	r1, #0
 80007e6:	2001      	movs	r0, #1
 80007e8:	f000 fac2 	bl	8000d70 <setPedesLeds>
				pedeson=1;
 80007ec:	4b19      	ldr	r3, [pc, #100]	; (8000854 <fsm_automatic_run+0x594>)
 80007ee:	2201      	movs	r2, #1
 80007f0:	601a      	str	r2, [r3, #0]
				buzzer_on = 1;
 80007f2:	4b14      	ldr	r3, [pc, #80]	; (8000844 <fsm_automatic_run+0x584>)
 80007f4:	2201      	movs	r2, #1
 80007f6:	601a      	str	r2, [r3, #0]
				int pedesduration = (red_duration+green_duration+yellow_duration)*200;
 80007f8:	4b14      	ldr	r3, [pc, #80]	; (800084c <fsm_automatic_run+0x58c>)
 80007fa:	681a      	ldr	r2, [r3, #0]
 80007fc:	4b0f      	ldr	r3, [pc, #60]	; (800083c <fsm_automatic_run+0x57c>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	441a      	add	r2, r3
 8000802:	4b15      	ldr	r3, [pc, #84]	; (8000858 <fsm_automatic_run+0x598>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	4413      	add	r3, r2
 8000808:	22c8      	movs	r2, #200	; 0xc8
 800080a:	fb02 f303 	mul.w	r3, r2, r3
 800080e:	617b      	str	r3, [r7, #20]
				setTimer(pedesduration,9);
 8000810:	2109      	movs	r1, #9
 8000812:	6978      	ldr	r0, [r7, #20]
 8000814:	f000 ffa4 	bl	8001760 <setTimer>
				setTimer(10, 8);
 8000818:	2108      	movs	r1, #8
 800081a:	200a      	movs	r0, #10
 800081c:	f000 ffa0 	bl	8001760 <setTimer>
			}
			break;
 8000820:	e01c      	b.n	800085c <fsm_automatic_run+0x59c>
		default:
			break;
 8000822:	bf00      	nop
 8000824:	e01b      	b.n	800085e <fsm_automatic_run+0x59e>
			break;
 8000826:	bf00      	nop
 8000828:	e019      	b.n	800085e <fsm_automatic_run+0x59e>
			break;
 800082a:	bf00      	nop
 800082c:	e017      	b.n	800085e <fsm_automatic_run+0x59e>
			break;
 800082e:	bf00      	nop
 8000830:	e015      	b.n	800085e <fsm_automatic_run+0x59e>
 8000832:	bf00      	nop
 8000834:	20000178 	.word	0x20000178
 8000838:	20000300 	.word	0x20000300
 800083c:	20000070 	.word	0x20000070
 8000840:	20000120 	.word	0x20000120
 8000844:	2000010c 	.word	0x2000010c
 8000848:	20000064 	.word	0x20000064
 800084c:	2000006c 	.word	0x2000006c
 8000850:	20000110 	.word	0x20000110
 8000854:	2000012c 	.word	0x2000012c
 8000858:	20000074 	.word	0x20000074
			break;
 800085c:	bf00      	nop
	}
}
 800085e:	bf00      	nop
 8000860:	3718      	adds	r7, #24
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop

08000868 <initializeDurationClones>:

int red_duration_clone;
int yellow_duration_clone;
int green_duration_clone;
int toggle = 1;
void initializeDurationClones(){
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
    red_duration_clone = red_duration;
 800086c:	4b07      	ldr	r3, [pc, #28]	; (800088c <initializeDurationClones+0x24>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a07      	ldr	r2, [pc, #28]	; (8000890 <initializeDurationClones+0x28>)
 8000872:	6013      	str	r3, [r2, #0]
    yellow_duration_clone = yellow_duration;
 8000874:	4b07      	ldr	r3, [pc, #28]	; (8000894 <initializeDurationClones+0x2c>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a07      	ldr	r2, [pc, #28]	; (8000898 <initializeDurationClones+0x30>)
 800087a:	6013      	str	r3, [r2, #0]
    green_duration_clone = green_duration;
 800087c:	4b07      	ldr	r3, [pc, #28]	; (800089c <initializeDurationClones+0x34>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a07      	ldr	r2, [pc, #28]	; (80008a0 <initializeDurationClones+0x38>)
 8000882:	6013      	str	r3, [r2, #0]
}
 8000884:	bf00      	nop
 8000886:	46bd      	mov	sp, r7
 8000888:	bc80      	pop	{r7}
 800088a:	4770      	bx	lr
 800088c:	2000006c 	.word	0x2000006c
 8000890:	20000114 	.word	0x20000114
 8000894:	20000074 	.word	0x20000074
 8000898:	20000118 	.word	0x20000118
 800089c:	20000070 	.word	0x20000070
 80008a0:	2000011c 	.word	0x2000011c

080008a4 <fsm_manual_run>:
void fsm_manual_run(){
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0

	switch (status) {
 80008a8:	4bad      	ldr	r3, [pc, #692]	; (8000b60 <fsm_manual_run+0x2bc>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	2b0f      	cmp	r3, #15
 80008ae:	f000 80ee 	beq.w	8000a8e <fsm_manual_run+0x1ea>
 80008b2:	2b0f      	cmp	r3, #15
 80008b4:	f300 8168 	bgt.w	8000b88 <fsm_manual_run+0x2e4>
 80008b8:	2b0d      	cmp	r3, #13
 80008ba:	d002      	beq.n	80008c2 <fsm_manual_run+0x1e>
 80008bc:	2b0e      	cmp	r3, #14
 80008be:	d073      	beq.n	80009a8 <fsm_manual_run+0x104>
 80008c0:	e162      	b.n	8000b88 <fsm_manual_run+0x2e4>
		case MAN_RED:
			if(timer_flag[3] == 1){
 80008c2:	4ba8      	ldr	r3, [pc, #672]	; (8000b64 <fsm_manual_run+0x2c0>)
 80008c4:	68db      	ldr	r3, [r3, #12]
 80008c6:	2b01      	cmp	r3, #1
 80008c8:	d122      	bne.n	8000910 <fsm_manual_run+0x6c>
				if(toggle){
 80008ca:	4ba7      	ldr	r3, [pc, #668]	; (8000b68 <fsm_manual_run+0x2c4>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d00a      	beq.n	80008e8 <fsm_manual_run+0x44>
					setHorizontalLeds(SET,RESET,RESET);
 80008d2:	2200      	movs	r2, #0
 80008d4:	2100      	movs	r1, #0
 80008d6:	2001      	movs	r0, #1
 80008d8:	f000 f9b8 	bl	8000c4c <setHorizontalLeds>
					setVerticalLeds(SET,RESET,RESET);
 80008dc:	2200      	movs	r2, #0
 80008de:	2100      	movs	r1, #0
 80008e0:	2001      	movs	r0, #1
 80008e2:	f000 f9f9 	bl	8000cd8 <setVerticalLeds>
 80008e6:	e009      	b.n	80008fc <fsm_manual_run+0x58>
				}else {
					setHorizontalLeds(RESET,RESET,RESET);
 80008e8:	2200      	movs	r2, #0
 80008ea:	2100      	movs	r1, #0
 80008ec:	2000      	movs	r0, #0
 80008ee:	f000 f9ad 	bl	8000c4c <setHorizontalLeds>
					setVerticalLeds(RESET,RESET,RESET);
 80008f2:	2200      	movs	r2, #0
 80008f4:	2100      	movs	r1, #0
 80008f6:	2000      	movs	r0, #0
 80008f8:	f000 f9ee 	bl	8000cd8 <setVerticalLeds>
				}
				toggle = 1 - toggle;
 80008fc:	4b9a      	ldr	r3, [pc, #616]	; (8000b68 <fsm_manual_run+0x2c4>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	f1c3 0301 	rsb	r3, r3, #1
 8000904:	4a98      	ldr	r2, [pc, #608]	; (8000b68 <fsm_manual_run+0x2c4>)
 8000906:	6013      	str	r3, [r2, #0]
				setTimer(100, 3);
 8000908:	2103      	movs	r1, #3
 800090a:	2064      	movs	r0, #100	; 0x64
 800090c:	f000 ff28 	bl	8001760 <setTimer>
			}
			if(isButtonPressed(1) == 1){
 8000910:	2001      	movs	r0, #1
 8000912:	f7ff fc1b 	bl	800014c <isButtonPressed>
 8000916:	4603      	mov	r3, r0
 8000918:	2b01      	cmp	r3, #1
 800091a:	d116      	bne.n	800094a <fsm_manual_run+0xa6>
				setHorizontalLeds(RESET,RESET,RESET);
 800091c:	2200      	movs	r2, #0
 800091e:	2100      	movs	r1, #0
 8000920:	2000      	movs	r0, #0
 8000922:	f000 f993 	bl	8000c4c <setHorizontalLeds>
				setVerticalLeds(RESET,RESET,RESET);
 8000926:	2200      	movs	r2, #0
 8000928:	2100      	movs	r1, #0
 800092a:	2000      	movs	r0, #0
 800092c:	f000 f9d4 	bl	8000cd8 <setVerticalLeds>
				setTimer(100, 3);
 8000930:	2103      	movs	r1, #3
 8000932:	2064      	movs	r0, #100	; 0x64
 8000934:	f000 ff14 	bl	8001760 <setTimer>
				status = MAN_YELLOW;
 8000938:	4b89      	ldr	r3, [pc, #548]	; (8000b60 <fsm_manual_run+0x2bc>)
 800093a:	220e      	movs	r2, #14
 800093c:	601a      	str	r2, [r3, #0]
				printf("Current time: %d\r\n", yellow_duration_clone);
 800093e:	4b8b      	ldr	r3, [pc, #556]	; (8000b6c <fsm_manual_run+0x2c8>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	4619      	mov	r1, r3
 8000944:	488a      	ldr	r0, [pc, #552]	; (8000b70 <fsm_manual_run+0x2cc>)
 8000946:	f003 f9f7 	bl	8003d38 <iprintf>
			}
			if(isButtonPressed(2) == 1){
 800094a:	2002      	movs	r0, #2
 800094c:	f7ff fbfe 	bl	800014c <isButtonPressed>
 8000950:	4603      	mov	r3, r0
 8000952:	2b01      	cmp	r3, #1
 8000954:	d112      	bne.n	800097c <fsm_manual_run+0xd8>
				red_duration_clone++;
 8000956:	4b87      	ldr	r3, [pc, #540]	; (8000b74 <fsm_manual_run+0x2d0>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	3301      	adds	r3, #1
 800095c:	4a85      	ldr	r2, [pc, #532]	; (8000b74 <fsm_manual_run+0x2d0>)
 800095e:	6013      	str	r3, [r2, #0]
				if(red_duration_clone >= 99) red_duration_clone = red_duration;
 8000960:	4b84      	ldr	r3, [pc, #528]	; (8000b74 <fsm_manual_run+0x2d0>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	2b62      	cmp	r3, #98	; 0x62
 8000966:	dd03      	ble.n	8000970 <fsm_manual_run+0xcc>
 8000968:	4b83      	ldr	r3, [pc, #524]	; (8000b78 <fsm_manual_run+0x2d4>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a81      	ldr	r2, [pc, #516]	; (8000b74 <fsm_manual_run+0x2d0>)
 800096e:	6013      	str	r3, [r2, #0]
				printf("Current time: %d\r\n", red_duration_clone);
 8000970:	4b80      	ldr	r3, [pc, #512]	; (8000b74 <fsm_manual_run+0x2d0>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4619      	mov	r1, r3
 8000976:	487e      	ldr	r0, [pc, #504]	; (8000b70 <fsm_manual_run+0x2cc>)
 8000978:	f003 f9de 	bl	8003d38 <iprintf>
			}
			if(isButtonPressed(3) == 1){
 800097c:	2003      	movs	r0, #3
 800097e:	f7ff fbe5 	bl	800014c <isButtonPressed>
 8000982:	4603      	mov	r3, r0
 8000984:	2b01      	cmp	r3, #1
 8000986:	f040 8102 	bne.w	8000b8e <fsm_manual_run+0x2ea>
				red_duration =  red_duration_clone;
 800098a:	4b7a      	ldr	r3, [pc, #488]	; (8000b74 <fsm_manual_run+0x2d0>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	4a7a      	ldr	r2, [pc, #488]	; (8000b78 <fsm_manual_run+0x2d4>)
 8000990:	6013      	str	r3, [r2, #0]
				green_duration = red_duration - yellow_duration;
 8000992:	4b79      	ldr	r3, [pc, #484]	; (8000b78 <fsm_manual_run+0x2d4>)
 8000994:	681a      	ldr	r2, [r3, #0]
 8000996:	4b79      	ldr	r3, [pc, #484]	; (8000b7c <fsm_manual_run+0x2d8>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	1ad3      	subs	r3, r2, r3
 800099c:	4a78      	ldr	r2, [pc, #480]	; (8000b80 <fsm_manual_run+0x2dc>)
 800099e:	6013      	str	r3, [r2, #0]
				status = INIT;
 80009a0:	4b6f      	ldr	r3, [pc, #444]	; (8000b60 <fsm_manual_run+0x2bc>)
 80009a2:	2201      	movs	r2, #1
 80009a4:	601a      	str	r2, [r3, #0]
			}
			break;
 80009a6:	e0f2      	b.n	8000b8e <fsm_manual_run+0x2ea>
		case MAN_YELLOW:
			if(timer_flag[3] == 1){
 80009a8:	4b6e      	ldr	r3, [pc, #440]	; (8000b64 <fsm_manual_run+0x2c0>)
 80009aa:	68db      	ldr	r3, [r3, #12]
 80009ac:	2b01      	cmp	r3, #1
 80009ae:	d122      	bne.n	80009f6 <fsm_manual_run+0x152>
				if(toggle){
 80009b0:	4b6d      	ldr	r3, [pc, #436]	; (8000b68 <fsm_manual_run+0x2c4>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d00a      	beq.n	80009ce <fsm_manual_run+0x12a>
					setHorizontalLeds(RESET,RESET,SET);
 80009b8:	2201      	movs	r2, #1
 80009ba:	2100      	movs	r1, #0
 80009bc:	2000      	movs	r0, #0
 80009be:	f000 f945 	bl	8000c4c <setHorizontalLeds>
					setVerticalLeds(RESET,RESET,SET);
 80009c2:	2201      	movs	r2, #1
 80009c4:	2100      	movs	r1, #0
 80009c6:	2000      	movs	r0, #0
 80009c8:	f000 f986 	bl	8000cd8 <setVerticalLeds>
 80009cc:	e009      	b.n	80009e2 <fsm_manual_run+0x13e>
				}else {
					setHorizontalLeds(RESET,RESET,RESET);
 80009ce:	2200      	movs	r2, #0
 80009d0:	2100      	movs	r1, #0
 80009d2:	2000      	movs	r0, #0
 80009d4:	f000 f93a 	bl	8000c4c <setHorizontalLeds>
					setVerticalLeds(RESET,RESET,RESET);
 80009d8:	2200      	movs	r2, #0
 80009da:	2100      	movs	r1, #0
 80009dc:	2000      	movs	r0, #0
 80009de:	f000 f97b 	bl	8000cd8 <setVerticalLeds>
				}
				toggle = 1 - toggle;
 80009e2:	4b61      	ldr	r3, [pc, #388]	; (8000b68 <fsm_manual_run+0x2c4>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	f1c3 0301 	rsb	r3, r3, #1
 80009ea:	4a5f      	ldr	r2, [pc, #380]	; (8000b68 <fsm_manual_run+0x2c4>)
 80009ec:	6013      	str	r3, [r2, #0]
				setTimer(100, 3);
 80009ee:	2103      	movs	r1, #3
 80009f0:	2064      	movs	r0, #100	; 0x64
 80009f2:	f000 feb5 	bl	8001760 <setTimer>
			}
			if(isButtonPressed(1) == 1){
 80009f6:	2001      	movs	r0, #1
 80009f8:	f7ff fba8 	bl	800014c <isButtonPressed>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b01      	cmp	r3, #1
 8000a00:	d116      	bne.n	8000a30 <fsm_manual_run+0x18c>
				setHorizontalLeds(RESET,RESET,RESET);
 8000a02:	2200      	movs	r2, #0
 8000a04:	2100      	movs	r1, #0
 8000a06:	2000      	movs	r0, #0
 8000a08:	f000 f920 	bl	8000c4c <setHorizontalLeds>
				setVerticalLeds(RESET,RESET,RESET);
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	2100      	movs	r1, #0
 8000a10:	2000      	movs	r0, #0
 8000a12:	f000 f961 	bl	8000cd8 <setVerticalLeds>
				setTimer(100, 3);
 8000a16:	2103      	movs	r1, #3
 8000a18:	2064      	movs	r0, #100	; 0x64
 8000a1a:	f000 fea1 	bl	8001760 <setTimer>
				status = MAN_GREEN;
 8000a1e:	4b50      	ldr	r3, [pc, #320]	; (8000b60 <fsm_manual_run+0x2bc>)
 8000a20:	220f      	movs	r2, #15
 8000a22:	601a      	str	r2, [r3, #0]
				printf("Current time: %d\r\n", green_duration_clone);
 8000a24:	4b57      	ldr	r3, [pc, #348]	; (8000b84 <fsm_manual_run+0x2e0>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4851      	ldr	r0, [pc, #324]	; (8000b70 <fsm_manual_run+0x2cc>)
 8000a2c:	f003 f984 	bl	8003d38 <iprintf>
			}
			if(isButtonPressed(2) == 1){
 8000a30:	2002      	movs	r0, #2
 8000a32:	f7ff fb8b 	bl	800014c <isButtonPressed>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b01      	cmp	r3, #1
 8000a3a:	d112      	bne.n	8000a62 <fsm_manual_run+0x1be>
				yellow_duration_clone++;
 8000a3c:	4b4b      	ldr	r3, [pc, #300]	; (8000b6c <fsm_manual_run+0x2c8>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	3301      	adds	r3, #1
 8000a42:	4a4a      	ldr	r2, [pc, #296]	; (8000b6c <fsm_manual_run+0x2c8>)
 8000a44:	6013      	str	r3, [r2, #0]
				if(yellow_duration_clone >= 99) yellow_duration_clone = yellow_duration;
 8000a46:	4b49      	ldr	r3, [pc, #292]	; (8000b6c <fsm_manual_run+0x2c8>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	2b62      	cmp	r3, #98	; 0x62
 8000a4c:	dd03      	ble.n	8000a56 <fsm_manual_run+0x1b2>
 8000a4e:	4b4b      	ldr	r3, [pc, #300]	; (8000b7c <fsm_manual_run+0x2d8>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	4a46      	ldr	r2, [pc, #280]	; (8000b6c <fsm_manual_run+0x2c8>)
 8000a54:	6013      	str	r3, [r2, #0]
				printf("Current time: %d\r\n", yellow_duration_clone);
 8000a56:	4b45      	ldr	r3, [pc, #276]	; (8000b6c <fsm_manual_run+0x2c8>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4844      	ldr	r0, [pc, #272]	; (8000b70 <fsm_manual_run+0x2cc>)
 8000a5e:	f003 f96b 	bl	8003d38 <iprintf>
			}
			if(isButtonPressed(3) == 1){
 8000a62:	2003      	movs	r0, #3
 8000a64:	f7ff fb72 	bl	800014c <isButtonPressed>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b01      	cmp	r3, #1
 8000a6c:	f040 8091 	bne.w	8000b92 <fsm_manual_run+0x2ee>
				yellow_duration =  yellow_duration_clone;
 8000a70:	4b3e      	ldr	r3, [pc, #248]	; (8000b6c <fsm_manual_run+0x2c8>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a41      	ldr	r2, [pc, #260]	; (8000b7c <fsm_manual_run+0x2d8>)
 8000a76:	6013      	str	r3, [r2, #0]
				red_duration = green_duration + yellow_duration;
 8000a78:	4b41      	ldr	r3, [pc, #260]	; (8000b80 <fsm_manual_run+0x2dc>)
 8000a7a:	681a      	ldr	r2, [r3, #0]
 8000a7c:	4b3f      	ldr	r3, [pc, #252]	; (8000b7c <fsm_manual_run+0x2d8>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4413      	add	r3, r2
 8000a82:	4a3d      	ldr	r2, [pc, #244]	; (8000b78 <fsm_manual_run+0x2d4>)
 8000a84:	6013      	str	r3, [r2, #0]
				status = INIT;
 8000a86:	4b36      	ldr	r3, [pc, #216]	; (8000b60 <fsm_manual_run+0x2bc>)
 8000a88:	2201      	movs	r2, #1
 8000a8a:	601a      	str	r2, [r3, #0]
			}
			break;
 8000a8c:	e081      	b.n	8000b92 <fsm_manual_run+0x2ee>
		case MAN_GREEN:
			if(timer_flag[3] == 1){
 8000a8e:	4b35      	ldr	r3, [pc, #212]	; (8000b64 <fsm_manual_run+0x2c0>)
 8000a90:	68db      	ldr	r3, [r3, #12]
 8000a92:	2b01      	cmp	r3, #1
 8000a94:	d122      	bne.n	8000adc <fsm_manual_run+0x238>
				if(toggle){
 8000a96:	4b34      	ldr	r3, [pc, #208]	; (8000b68 <fsm_manual_run+0x2c4>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d00a      	beq.n	8000ab4 <fsm_manual_run+0x210>
					setHorizontalLeds(RESET,SET,RESET);
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	2101      	movs	r1, #1
 8000aa2:	2000      	movs	r0, #0
 8000aa4:	f000 f8d2 	bl	8000c4c <setHorizontalLeds>
					setVerticalLeds(RESET,SET,RESET);
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	2101      	movs	r1, #1
 8000aac:	2000      	movs	r0, #0
 8000aae:	f000 f913 	bl	8000cd8 <setVerticalLeds>
 8000ab2:	e009      	b.n	8000ac8 <fsm_manual_run+0x224>
				}else {
					setHorizontalLeds(RESET,RESET,RESET);
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	2000      	movs	r0, #0
 8000aba:	f000 f8c7 	bl	8000c4c <setHorizontalLeds>
					setVerticalLeds(RESET,RESET,RESET);
 8000abe:	2200      	movs	r2, #0
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	2000      	movs	r0, #0
 8000ac4:	f000 f908 	bl	8000cd8 <setVerticalLeds>
				}
				toggle = 1 - toggle;
 8000ac8:	4b27      	ldr	r3, [pc, #156]	; (8000b68 <fsm_manual_run+0x2c4>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	f1c3 0301 	rsb	r3, r3, #1
 8000ad0:	4a25      	ldr	r2, [pc, #148]	; (8000b68 <fsm_manual_run+0x2c4>)
 8000ad2:	6013      	str	r3, [r2, #0]
				setTimer(100, 3);
 8000ad4:	2103      	movs	r1, #3
 8000ad6:	2064      	movs	r0, #100	; 0x64
 8000ad8:	f000 fe42 	bl	8001760 <setTimer>
			}
			if(isButtonPressed(1) == 1){
 8000adc:	2001      	movs	r0, #1
 8000ade:	f7ff fb35 	bl	800014c <isButtonPressed>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b01      	cmp	r3, #1
 8000ae6:	d10c      	bne.n	8000b02 <fsm_manual_run+0x25e>
				setHorizontalLeds(RESET,RESET,RESET);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	2100      	movs	r1, #0
 8000aec:	2000      	movs	r0, #0
 8000aee:	f000 f8ad 	bl	8000c4c <setHorizontalLeds>
				setVerticalLeds(RESET,RESET,RESET);
 8000af2:	2200      	movs	r2, #0
 8000af4:	2100      	movs	r1, #0
 8000af6:	2000      	movs	r0, #0
 8000af8:	f000 f8ee 	bl	8000cd8 <setVerticalLeds>
				status = INIT;
 8000afc:	4b18      	ldr	r3, [pc, #96]	; (8000b60 <fsm_manual_run+0x2bc>)
 8000afe:	2201      	movs	r2, #1
 8000b00:	601a      	str	r2, [r3, #0]
			}
			if(isButtonPressed(2) == 1){
 8000b02:	2002      	movs	r0, #2
 8000b04:	f7ff fb22 	bl	800014c <isButtonPressed>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b01      	cmp	r3, #1
 8000b0c:	d112      	bne.n	8000b34 <fsm_manual_run+0x290>
				green_duration_clone++;
 8000b0e:	4b1d      	ldr	r3, [pc, #116]	; (8000b84 <fsm_manual_run+0x2e0>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	3301      	adds	r3, #1
 8000b14:	4a1b      	ldr	r2, [pc, #108]	; (8000b84 <fsm_manual_run+0x2e0>)
 8000b16:	6013      	str	r3, [r2, #0]
				if(green_duration_clone >= 99) green_duration_clone = green_duration;
 8000b18:	4b1a      	ldr	r3, [pc, #104]	; (8000b84 <fsm_manual_run+0x2e0>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	2b62      	cmp	r3, #98	; 0x62
 8000b1e:	dd03      	ble.n	8000b28 <fsm_manual_run+0x284>
 8000b20:	4b17      	ldr	r3, [pc, #92]	; (8000b80 <fsm_manual_run+0x2dc>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a17      	ldr	r2, [pc, #92]	; (8000b84 <fsm_manual_run+0x2e0>)
 8000b26:	6013      	str	r3, [r2, #0]
				printf("Current time: %d\r\n", green_duration_clone);
 8000b28:	4b16      	ldr	r3, [pc, #88]	; (8000b84 <fsm_manual_run+0x2e0>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4810      	ldr	r0, [pc, #64]	; (8000b70 <fsm_manual_run+0x2cc>)
 8000b30:	f003 f902 	bl	8003d38 <iprintf>
			}
			if(isButtonPressed(3) == 1){
 8000b34:	2003      	movs	r0, #3
 8000b36:	f7ff fb09 	bl	800014c <isButtonPressed>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b01      	cmp	r3, #1
 8000b3e:	d12a      	bne.n	8000b96 <fsm_manual_run+0x2f2>
				green_duration =  green_duration_clone;
 8000b40:	4b10      	ldr	r3, [pc, #64]	; (8000b84 <fsm_manual_run+0x2e0>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a0e      	ldr	r2, [pc, #56]	; (8000b80 <fsm_manual_run+0x2dc>)
 8000b46:	6013      	str	r3, [r2, #0]
				red_duration = green_duration + yellow_duration;
 8000b48:	4b0d      	ldr	r3, [pc, #52]	; (8000b80 <fsm_manual_run+0x2dc>)
 8000b4a:	681a      	ldr	r2, [r3, #0]
 8000b4c:	4b0b      	ldr	r3, [pc, #44]	; (8000b7c <fsm_manual_run+0x2d8>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4413      	add	r3, r2
 8000b52:	4a09      	ldr	r2, [pc, #36]	; (8000b78 <fsm_manual_run+0x2d4>)
 8000b54:	6013      	str	r3, [r2, #0]
				status = INIT;
 8000b56:	4b02      	ldr	r3, [pc, #8]	; (8000b60 <fsm_manual_run+0x2bc>)
 8000b58:	2201      	movs	r2, #1
 8000b5a:	601a      	str	r2, [r3, #0]
			}
			break;
 8000b5c:	e01b      	b.n	8000b96 <fsm_manual_run+0x2f2>
 8000b5e:	bf00      	nop
 8000b60:	20000120 	.word	0x20000120
 8000b64:	20000300 	.word	0x20000300
 8000b68:	20000068 	.word	0x20000068
 8000b6c:	20000118 	.word	0x20000118
 8000b70:	08004b38 	.word	0x08004b38
 8000b74:	20000114 	.word	0x20000114
 8000b78:	2000006c 	.word	0x2000006c
 8000b7c:	20000074 	.word	0x20000074
 8000b80:	20000070 	.word	0x20000070
 8000b84:	2000011c 	.word	0x2000011c
		default:
			initializeDurationClones();
 8000b88:	f7ff fe6e 	bl	8000868 <initializeDurationClones>
			break;
 8000b8c:	e004      	b.n	8000b98 <fsm_manual_run+0x2f4>
			break;
 8000b8e:	bf00      	nop
 8000b90:	e002      	b.n	8000b98 <fsm_manual_run+0x2f4>
			break;
 8000b92:	bf00      	nop
 8000b94:	e000      	b.n	8000b98 <fsm_manual_run+0x2f4>
			break;
 8000b96:	bf00      	nop
	}
}
 8000b98:	bf00      	nop
 8000b9a:	bd80      	pop	{r7, pc}

08000b9c <__io_putchar>:
int green_duration=3;
int yellow_duration=2;
int index_led=0;
int pedeson=0;	//used to check whether ped button is pressed or not

int __io_putchar(int ch) {
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000ba4:	1d39      	adds	r1, r7, #4
 8000ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8000baa:	2201      	movs	r2, #1
 8000bac:	4803      	ldr	r0, [pc, #12]	; (8000bbc <__io_putchar+0x20>)
 8000bae:	f002 fe93 	bl	80038d8 <HAL_UART_Transmit>
    return ch;
 8000bb2:	687b      	ldr	r3, [r7, #4]
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	3708      	adds	r7, #8
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	200001c0 	.word	0x200001c0

08000bc0 <countDown>:

//time counting down
void countDown(){
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
	horizontal_number--;
 8000bc4:	4b0b      	ldr	r3, [pc, #44]	; (8000bf4 <countDown+0x34>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	3b01      	subs	r3, #1
 8000bca:	4a0a      	ldr	r2, [pc, #40]	; (8000bf4 <countDown+0x34>)
 8000bcc:	6013      	str	r3, [r2, #0]
	vertical_number--;
 8000bce:	4b0a      	ldr	r3, [pc, #40]	; (8000bf8 <countDown+0x38>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	3b01      	subs	r3, #1
 8000bd4:	4a08      	ldr	r2, [pc, #32]	; (8000bf8 <countDown+0x38>)
 8000bd6:	6013      	str	r3, [r2, #0]
        printf("Remaining horizontal second: %d\r\n", horizontal_number);
 8000bd8:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <countDown+0x34>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4619      	mov	r1, r3
 8000bde:	4807      	ldr	r0, [pc, #28]	; (8000bfc <countDown+0x3c>)
 8000be0:	f003 f8aa 	bl	8003d38 <iprintf>
        printf("Remaining vertical second: %d\r\n", vertical_number);
 8000be4:	4b04      	ldr	r3, [pc, #16]	; (8000bf8 <countDown+0x38>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4619      	mov	r1, r3
 8000bea:	4805      	ldr	r0, [pc, #20]	; (8000c00 <countDown+0x40>)
 8000bec:	f003 f8a4 	bl	8003d38 <iprintf>
}
 8000bf0:	bf00      	nop
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	20000124 	.word	0x20000124
 8000bf8:	20000128 	.word	0x20000128
 8000bfc:	08004b4c 	.word	0x08004b4c
 8000c00:	08004b70 	.word	0x08004b70

08000c04 <setInitialValue>:

void setInitialValue(int horizontal, int vertical){
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
 8000c0c:	6039      	str	r1, [r7, #0]
    horizontal_number = horizontal;
 8000c0e:	4a0b      	ldr	r2, [pc, #44]	; (8000c3c <setInitialValue+0x38>)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	6013      	str	r3, [r2, #0]
    vertical_number = vertical;
 8000c14:	4a0a      	ldr	r2, [pc, #40]	; (8000c40 <setInitialValue+0x3c>)
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	6013      	str	r3, [r2, #0]
    printf("Remaining horizontal second: %d\r\n", horizontal_number);
 8000c1a:	4b08      	ldr	r3, [pc, #32]	; (8000c3c <setInitialValue+0x38>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4619      	mov	r1, r3
 8000c20:	4808      	ldr	r0, [pc, #32]	; (8000c44 <setInitialValue+0x40>)
 8000c22:	f003 f889 	bl	8003d38 <iprintf>
    printf("Remaining vertical second: %d\r\n", vertical_number);
 8000c26:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <setInitialValue+0x3c>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4806      	ldr	r0, [pc, #24]	; (8000c48 <setInitialValue+0x44>)
 8000c2e:	f003 f883 	bl	8003d38 <iprintf>
}
 8000c32:	bf00      	nop
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	20000124 	.word	0x20000124
 8000c40:	20000128 	.word	0x20000128
 8000c44:	08004b4c 	.word	0x08004b4c
 8000c48:	08004b70 	.word	0x08004b70

08000c4c <setHorizontalLeds>:

void setHorizontalLeds(int red, int green, int yellow){
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	60f8      	str	r0, [r7, #12]
 8000c54:	60b9      	str	r1, [r7, #8]
 8000c56:	607a      	str	r2, [r7, #4]
    if(red == SET){
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	2b01      	cmp	r3, #1
 8000c5c:	d109      	bne.n	8000c72 <setHorizontalLeds+0x26>
        HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 8000c5e:	2201      	movs	r2, #1
 8000c60:	2120      	movs	r1, #32
 8000c62:	481c      	ldr	r0, [pc, #112]	; (8000cd4 <setHorizontalLeds+0x88>)
 8000c64:	f001 faab 	bl	80021be <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 8000c68:	2200      	movs	r2, #0
 8000c6a:	2110      	movs	r1, #16
 8000c6c:	4819      	ldr	r0, [pc, #100]	; (8000cd4 <setHorizontalLeds+0x88>)
 8000c6e:	f001 faa6 	bl	80021be <HAL_GPIO_WritePin>
    }
    if(green == SET){
 8000c72:	68bb      	ldr	r3, [r7, #8]
 8000c74:	2b01      	cmp	r3, #1
 8000c76:	d109      	bne.n	8000c8c <setHorizontalLeds+0x40>
        HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 8000c78:	2200      	movs	r2, #0
 8000c7a:	2120      	movs	r1, #32
 8000c7c:	4815      	ldr	r0, [pc, #84]	; (8000cd4 <setHorizontalLeds+0x88>)
 8000c7e:	f001 fa9e 	bl	80021be <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 8000c82:	2201      	movs	r2, #1
 8000c84:	2110      	movs	r1, #16
 8000c86:	4813      	ldr	r0, [pc, #76]	; (8000cd4 <setHorizontalLeds+0x88>)
 8000c88:	f001 fa99 	bl	80021be <HAL_GPIO_WritePin>
    }
    if(yellow == SET){
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	2b01      	cmp	r3, #1
 8000c90:	d109      	bne.n	8000ca6 <setHorizontalLeds+0x5a>
        HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, SET);
 8000c92:	2201      	movs	r2, #1
 8000c94:	2120      	movs	r1, #32
 8000c96:	480f      	ldr	r0, [pc, #60]	; (8000cd4 <setHorizontalLeds+0x88>)
 8000c98:	f001 fa91 	bl	80021be <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, SET);
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	2110      	movs	r1, #16
 8000ca0:	480c      	ldr	r0, [pc, #48]	; (8000cd4 <setHorizontalLeds+0x88>)
 8000ca2:	f001 fa8c 	bl	80021be <HAL_GPIO_WritePin>
    }
    if(red==RESET && green==RESET && yellow==RESET){
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d10f      	bne.n	8000ccc <setHorizontalLeds+0x80>
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d10c      	bne.n	8000ccc <setHorizontalLeds+0x80>
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d109      	bne.n	8000ccc <setHorizontalLeds+0x80>
        HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, RESET);
 8000cb8:	2200      	movs	r2, #0
 8000cba:	2120      	movs	r1, #32
 8000cbc:	4805      	ldr	r0, [pc, #20]	; (8000cd4 <setHorizontalLeds+0x88>)
 8000cbe:	f001 fa7e 	bl	80021be <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, RESET);
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2110      	movs	r1, #16
 8000cc6:	4803      	ldr	r0, [pc, #12]	; (8000cd4 <setHorizontalLeds+0x88>)
 8000cc8:	f001 fa79 	bl	80021be <HAL_GPIO_WritePin>
    }
}
 8000ccc:	bf00      	nop
 8000cce:	3710      	adds	r7, #16
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	40010c00 	.word	0x40010c00

08000cd8 <setVerticalLeds>:
void setVerticalLeds(int red, int green, int yellow){
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b084      	sub	sp, #16
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	60f8      	str	r0, [r7, #12]
 8000ce0:	60b9      	str	r1, [r7, #8]
 8000ce2:	607a      	str	r2, [r7, #4]
    if(red == SET){
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	2b01      	cmp	r3, #1
 8000ce8:	d10a      	bne.n	8000d00 <setVerticalLeds+0x28>
        HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 8000cea:	2201      	movs	r2, #1
 8000cec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cf0:	481d      	ldr	r0, [pc, #116]	; (8000d68 <setVerticalLeds+0x90>)
 8000cf2:	f001 fa64 	bl	80021be <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	2108      	movs	r1, #8
 8000cfa:	481c      	ldr	r0, [pc, #112]	; (8000d6c <setVerticalLeds+0x94>)
 8000cfc:	f001 fa5f 	bl	80021be <HAL_GPIO_WritePin>
    }
    if(green == SET){
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	2b01      	cmp	r3, #1
 8000d04:	d10a      	bne.n	8000d1c <setVerticalLeds+0x44>
        HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 8000d06:	2200      	movs	r2, #0
 8000d08:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d0c:	4816      	ldr	r0, [pc, #88]	; (8000d68 <setVerticalLeds+0x90>)
 8000d0e:	f001 fa56 	bl	80021be <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 8000d12:	2201      	movs	r2, #1
 8000d14:	2108      	movs	r1, #8
 8000d16:	4815      	ldr	r0, [pc, #84]	; (8000d6c <setVerticalLeds+0x94>)
 8000d18:	f001 fa51 	bl	80021be <HAL_GPIO_WritePin>
    }
    if(yellow == SET){
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2b01      	cmp	r3, #1
 8000d20:	d10a      	bne.n	8000d38 <setVerticalLeds+0x60>
        HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, SET);
 8000d22:	2201      	movs	r2, #1
 8000d24:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d28:	480f      	ldr	r0, [pc, #60]	; (8000d68 <setVerticalLeds+0x90>)
 8000d2a:	f001 fa48 	bl	80021be <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, SET);
 8000d2e:	2201      	movs	r2, #1
 8000d30:	2108      	movs	r1, #8
 8000d32:	480e      	ldr	r0, [pc, #56]	; (8000d6c <setVerticalLeds+0x94>)
 8000d34:	f001 fa43 	bl	80021be <HAL_GPIO_WritePin>
    }
    if(red==RESET && green==RESET && yellow==RESET){
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d110      	bne.n	8000d60 <setVerticalLeds+0x88>
 8000d3e:	68bb      	ldr	r3, [r7, #8]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d10d      	bne.n	8000d60 <setVerticalLeds+0x88>
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d10a      	bne.n	8000d60 <setVerticalLeds+0x88>
        HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d50:	4805      	ldr	r0, [pc, #20]	; (8000d68 <setVerticalLeds+0x90>)
 8000d52:	f001 fa34 	bl	80021be <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);
 8000d56:	2200      	movs	r2, #0
 8000d58:	2108      	movs	r1, #8
 8000d5a:	4804      	ldr	r0, [pc, #16]	; (8000d6c <setVerticalLeds+0x94>)
 8000d5c:	f001 fa2f 	bl	80021be <HAL_GPIO_WritePin>
    }
}
 8000d60:	bf00      	nop
 8000d62:	3710      	adds	r7, #16
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	40010800 	.word	0x40010800
 8000d6c:	40010c00 	.word	0x40010c00

08000d70 <setPedesLeds>:

void setPedesLeds(int red, int green, int mixed){
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	60f8      	str	r0, [r7, #12]
 8000d78:	60b9      	str	r1, [r7, #8]
 8000d7a:	607a      	str	r2, [r7, #4]
    if(red == SET){
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	2b01      	cmp	r3, #1
 8000d80:	d10b      	bne.n	8000d9a <setPedesLeds+0x2a>
        HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, SET);
 8000d82:	2201      	movs	r2, #1
 8000d84:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d88:	481f      	ldr	r0, [pc, #124]	; (8000e08 <setPedesLeds+0x98>)
 8000d8a:	f001 fa18 	bl	80021be <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, RESET);
 8000d8e:	2200      	movs	r2, #0
 8000d90:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d94:	481d      	ldr	r0, [pc, #116]	; (8000e0c <setPedesLeds+0x9c>)
 8000d96:	f001 fa12 	bl	80021be <HAL_GPIO_WritePin>
    }
    if(green == SET){
 8000d9a:	68bb      	ldr	r3, [r7, #8]
 8000d9c:	2b01      	cmp	r3, #1
 8000d9e:	d10b      	bne.n	8000db8 <setPedesLeds+0x48>
        HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, RESET);
 8000da0:	2200      	movs	r2, #0
 8000da2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000da6:	4818      	ldr	r0, [pc, #96]	; (8000e08 <setPedesLeds+0x98>)
 8000da8:	f001 fa09 	bl	80021be <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, SET);
 8000dac:	2201      	movs	r2, #1
 8000dae:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000db2:	4816      	ldr	r0, [pc, #88]	; (8000e0c <setPedesLeds+0x9c>)
 8000db4:	f001 fa03 	bl	80021be <HAL_GPIO_WritePin>
    }
    if(mixed == SET){
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	2b01      	cmp	r3, #1
 8000dbc:	d10b      	bne.n	8000dd6 <setPedesLeds+0x66>
        HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, SET);
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dc4:	4810      	ldr	r0, [pc, #64]	; (8000e08 <setPedesLeds+0x98>)
 8000dc6:	f001 f9fa 	bl	80021be <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, SET);
 8000dca:	2201      	movs	r2, #1
 8000dcc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dd0:	480e      	ldr	r0, [pc, #56]	; (8000e0c <setPedesLeds+0x9c>)
 8000dd2:	f001 f9f4 	bl	80021be <HAL_GPIO_WritePin>
    }
    if(red==RESET && green==RESET && mixed==RESET){
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d111      	bne.n	8000e00 <setPedesLeds+0x90>
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d10e      	bne.n	8000e00 <setPedesLeds+0x90>
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d10b      	bne.n	8000e00 <setPedesLeds+0x90>
        HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, RESET);
 8000de8:	2200      	movs	r2, #0
 8000dea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dee:	4806      	ldr	r0, [pc, #24]	; (8000e08 <setPedesLeds+0x98>)
 8000df0:	f001 f9e5 	bl	80021be <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, RESET);
 8000df4:	2200      	movs	r2, #0
 8000df6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dfa:	4804      	ldr	r0, [pc, #16]	; (8000e0c <setPedesLeds+0x9c>)
 8000dfc:	f001 f9df 	bl	80021be <HAL_GPIO_WritePin>
    }
//    HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, RESET);
//    HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, RESET);	Toggle Led error
}
 8000e00:	bf00      	nop
 8000e02:	3710      	adds	r7, #16
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	40010c00 	.word	0x40010c00
 8000e0c:	40010800 	.word	0x40010800

08000e10 <wrapper>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void wrapper(void) {
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  timerRun(0); // led duration
 8000e14:	2000      	movs	r0, #0
 8000e16:	f000 fcbb 	bl	8001790 <timerRun>
  timerRun(1); //  7-segment counter 1s
 8000e1a:	2001      	movs	r0, #1
 8000e1c:	f000 fcb8 	bl	8001790 <timerRun>
  timerRun(3); // blinking led
 8000e20:	2003      	movs	r0, #3
 8000e22:	f000 fcb5 	bl	8001790 <timerRun>
  timerRun(8);
 8000e26:	2008      	movs	r0, #8
 8000e28:	f000 fcb2 	bl	8001790 <timerRun>
  timerRun(9); // blinking led
 8000e2c:	2009      	movs	r0, #9
 8000e2e:	f000 fcaf 	bl	8001790 <timerRun>
  getKeyInput(0);
 8000e32:	2000      	movs	r0, #0
 8000e34:	f7ff f9b4 	bl	80001a0 <getKeyInput>
  getKeyInput(1);
 8000e38:	2001      	movs	r0, #1
 8000e3a:	f7ff f9b1 	bl	80001a0 <getKeyInput>
  getKeyInput(2);
 8000e3e:	2002      	movs	r0, #2
 8000e40:	f7ff f9ae 	bl	80001a0 <getKeyInput>
  getKeyInput(3);
 8000e44:	2003      	movs	r0, #3
 8000e46:	f7ff f9ab 	bl	80001a0 <getKeyInput>
}
 8000e4a:	bf00      	nop
 8000e4c:	bd80      	pop	{r7, pc}

08000e4e <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	b082      	sub	sp, #8
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM2) {
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e5e:	d101      	bne.n	8000e64 <HAL_TIM_PeriodElapsedCallback+0x16>
    SCH_Update();
 8000e60:	f000 f9cc 	bl	80011fc <SCH_Update>
  }
}
 8000e64:	bf00      	nop
 8000e66:	3708      	adds	r7, #8
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}

08000e6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e70:	f000 fe9a 	bl	8001ba8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e74:	f000 f820 	bl	8000eb8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e78:	f000 f94c 	bl	8001114 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000e7c:	f000 f85e 	bl	8000f3c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000e80:	f000 f8a8 	bl	8000fd4 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000e84:	f000 f91c 	bl	80010c0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  SCH_Add_Task(wrapper, 0, 1);
 8000e88:	2201      	movs	r2, #1
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	4807      	ldr	r0, [pc, #28]	; (8000eac <main+0x40>)
 8000e8e:	f000 f9dd 	bl	800124c <SCH_Add_Task>
  SCH_Add_Task(fsm_automatic_run, 0, 1);
 8000e92:	2201      	movs	r2, #1
 8000e94:	2100      	movs	r1, #0
 8000e96:	4806      	ldr	r0, [pc, #24]	; (8000eb0 <main+0x44>)
 8000e98:	f000 f9d8 	bl	800124c <SCH_Add_Task>
  SCH_Add_Task(fsm_manual_run, 0, 1);
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	4804      	ldr	r0, [pc, #16]	; (8000eb4 <main+0x48>)
 8000ea2:	f000 f9d3 	bl	800124c <SCH_Add_Task>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    SCH_Dispatch_Tasks();
 8000ea6:	f000 fc1b 	bl	80016e0 <SCH_Dispatch_Tasks>
 8000eaa:	e7fc      	b.n	8000ea6 <main+0x3a>
 8000eac:	08000e11 	.word	0x08000e11
 8000eb0:	080002c1 	.word	0x080002c1
 8000eb4:	080008a5 	.word	0x080008a5

08000eb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b090      	sub	sp, #64	; 0x40
 8000ebc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ebe:	f107 0318 	add.w	r3, r7, #24
 8000ec2:	2228      	movs	r2, #40	; 0x28
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f003 f87c 	bl	8003fc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ecc:	1d3b      	adds	r3, r7, #4
 8000ece:	2200      	movs	r2, #0
 8000ed0:	601a      	str	r2, [r3, #0]
 8000ed2:	605a      	str	r2, [r3, #4]
 8000ed4:	609a      	str	r2, [r3, #8]
 8000ed6:	60da      	str	r2, [r3, #12]
 8000ed8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000eda:	2302      	movs	r3, #2
 8000edc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ee2:	2310      	movs	r3, #16
 8000ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000eea:	2300      	movs	r3, #0
 8000eec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000eee:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ef4:	f107 0318 	add.w	r3, r7, #24
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f001 f979 	bl	80021f0 <HAL_RCC_OscConfig>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000f04:	f000 f974 	bl	80011f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f08:	230f      	movs	r3, #15
 8000f0a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f10:	2300      	movs	r3, #0
 8000f12:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f18:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f1e:	1d3b      	adds	r3, r7, #4
 8000f20:	2102      	movs	r1, #2
 8000f22:	4618      	mov	r0, r3
 8000f24:	f001 fbe6 	bl	80026f4 <HAL_RCC_ClockConfig>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000f2e:	f000 f95f 	bl	80011f0 <Error_Handler>
  }
}
 8000f32:	bf00      	nop
 8000f34:	3740      	adds	r7, #64	; 0x40
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
	...

08000f3c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b086      	sub	sp, #24
 8000f40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f42:	f107 0308 	add.w	r3, r7, #8
 8000f46:	2200      	movs	r2, #0
 8000f48:	601a      	str	r2, [r3, #0]
 8000f4a:	605a      	str	r2, [r3, #4]
 8000f4c:	609a      	str	r2, [r3, #8]
 8000f4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f50:	463b      	mov	r3, r7
 8000f52:	2200      	movs	r2, #0
 8000f54:	601a      	str	r2, [r3, #0]
 8000f56:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f58:	4b1d      	ldr	r3, [pc, #116]	; (8000fd0 <MX_TIM2_Init+0x94>)
 8000f5a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f5e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9999;
 8000f60:	4b1b      	ldr	r3, [pc, #108]	; (8000fd0 <MX_TIM2_Init+0x94>)
 8000f62:	f242 720f 	movw	r2, #9999	; 0x270f
 8000f66:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f68:	4b19      	ldr	r3, [pc, #100]	; (8000fd0 <MX_TIM2_Init+0x94>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 63;
 8000f6e:	4b18      	ldr	r3, [pc, #96]	; (8000fd0 <MX_TIM2_Init+0x94>)
 8000f70:	223f      	movs	r2, #63	; 0x3f
 8000f72:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f74:	4b16      	ldr	r3, [pc, #88]	; (8000fd0 <MX_TIM2_Init+0x94>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f7a:	4b15      	ldr	r3, [pc, #84]	; (8000fd0 <MX_TIM2_Init+0x94>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f80:	4813      	ldr	r0, [pc, #76]	; (8000fd0 <MX_TIM2_Init+0x94>)
 8000f82:	f001 fd45 	bl	8002a10 <HAL_TIM_Base_Init>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000f8c:	f000 f930 	bl	80011f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f94:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f96:	f107 0308 	add.w	r3, r7, #8
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	480c      	ldr	r0, [pc, #48]	; (8000fd0 <MX_TIM2_Init+0x94>)
 8000f9e:	f002 f84b 	bl	8003038 <HAL_TIM_ConfigClockSource>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000fa8:	f000 f922 	bl	80011f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fac:	2300      	movs	r3, #0
 8000fae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fb4:	463b      	mov	r3, r7
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4805      	ldr	r0, [pc, #20]	; (8000fd0 <MX_TIM2_Init+0x94>)
 8000fba:	f002 fbcd 	bl	8003758 <HAL_TIMEx_MasterConfigSynchronization>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000fc4:	f000 f914 	bl	80011f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000fc8:	bf00      	nop
 8000fca:	3718      	adds	r7, #24
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	20000130 	.word	0x20000130

08000fd4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b08e      	sub	sp, #56	; 0x38
 8000fd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fda:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fde:	2200      	movs	r2, #0
 8000fe0:	601a      	str	r2, [r3, #0]
 8000fe2:	605a      	str	r2, [r3, #4]
 8000fe4:	609a      	str	r2, [r3, #8]
 8000fe6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fe8:	f107 0320 	add.w	r3, r7, #32
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ff2:	1d3b      	adds	r3, r7, #4
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	60da      	str	r2, [r3, #12]
 8000ffe:	611a      	str	r2, [r3, #16]
 8001000:	615a      	str	r2, [r3, #20]
 8001002:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001004:	4b2c      	ldr	r3, [pc, #176]	; (80010b8 <MX_TIM3_Init+0xe4>)
 8001006:	4a2d      	ldr	r2, [pc, #180]	; (80010bc <MX_TIM3_Init+0xe8>)
 8001008:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1799;
 800100a:	4b2b      	ldr	r3, [pc, #172]	; (80010b8 <MX_TIM3_Init+0xe4>)
 800100c:	f240 7207 	movw	r2, #1799	; 0x707
 8001010:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001012:	4b29      	ldr	r3, [pc, #164]	; (80010b8 <MX_TIM3_Init+0xe4>)
 8001014:	2200      	movs	r2, #0
 8001016:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8001018:	4b27      	ldr	r3, [pc, #156]	; (80010b8 <MX_TIM3_Init+0xe4>)
 800101a:	2264      	movs	r2, #100	; 0x64
 800101c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800101e:	4b26      	ldr	r3, [pc, #152]	; (80010b8 <MX_TIM3_Init+0xe4>)
 8001020:	2200      	movs	r2, #0
 8001022:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001024:	4b24      	ldr	r3, [pc, #144]	; (80010b8 <MX_TIM3_Init+0xe4>)
 8001026:	2200      	movs	r2, #0
 8001028:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800102a:	4823      	ldr	r0, [pc, #140]	; (80010b8 <MX_TIM3_Init+0xe4>)
 800102c:	f001 fcf0 	bl	8002a10 <HAL_TIM_Base_Init>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001036:	f000 f8db 	bl	80011f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800103a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800103e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001040:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001044:	4619      	mov	r1, r3
 8001046:	481c      	ldr	r0, [pc, #112]	; (80010b8 <MX_TIM3_Init+0xe4>)
 8001048:	f001 fff6 	bl	8003038 <HAL_TIM_ConfigClockSource>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001052:	f000 f8cd 	bl	80011f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001056:	4818      	ldr	r0, [pc, #96]	; (80010b8 <MX_TIM3_Init+0xe4>)
 8001058:	f001 fd29 	bl	8002aae <HAL_TIM_PWM_Init>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001062:	f000 f8c5 	bl	80011f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001066:	2300      	movs	r3, #0
 8001068:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800106a:	2300      	movs	r3, #0
 800106c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800106e:	f107 0320 	add.w	r3, r7, #32
 8001072:	4619      	mov	r1, r3
 8001074:	4810      	ldr	r0, [pc, #64]	; (80010b8 <MX_TIM3_Init+0xe4>)
 8001076:	f002 fb6f 	bl	8003758 <HAL_TIMEx_MasterConfigSynchronization>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001080:	f000 f8b6 	bl	80011f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001084:	2360      	movs	r3, #96	; 0x60
 8001086:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001088:	2300      	movs	r3, #0
 800108a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800108c:	2300      	movs	r3, #0
 800108e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001090:	2300      	movs	r3, #0
 8001092:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001094:	1d3b      	adds	r3, r7, #4
 8001096:	2200      	movs	r2, #0
 8001098:	4619      	mov	r1, r3
 800109a:	4807      	ldr	r0, [pc, #28]	; (80010b8 <MX_TIM3_Init+0xe4>)
 800109c:	f001 ff0a 	bl	8002eb4 <HAL_TIM_PWM_ConfigChannel>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80010a6:	f000 f8a3 	bl	80011f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80010aa:	4803      	ldr	r0, [pc, #12]	; (80010b8 <MX_TIM3_Init+0xe4>)
 80010ac:	f000 fc02 	bl	80018b4 <HAL_TIM_MspPostInit>

}
 80010b0:	bf00      	nop
 80010b2:	3738      	adds	r7, #56	; 0x38
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	20000178 	.word	0x20000178
 80010bc:	40000400 	.word	0x40000400

080010c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010c4:	4b11      	ldr	r3, [pc, #68]	; (800110c <MX_USART2_UART_Init+0x4c>)
 80010c6:	4a12      	ldr	r2, [pc, #72]	; (8001110 <MX_USART2_UART_Init+0x50>)
 80010c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010ca:	4b10      	ldr	r3, [pc, #64]	; (800110c <MX_USART2_UART_Init+0x4c>)
 80010cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010d2:	4b0e      	ldr	r3, [pc, #56]	; (800110c <MX_USART2_UART_Init+0x4c>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010d8:	4b0c      	ldr	r3, [pc, #48]	; (800110c <MX_USART2_UART_Init+0x4c>)
 80010da:	2200      	movs	r2, #0
 80010dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010de:	4b0b      	ldr	r3, [pc, #44]	; (800110c <MX_USART2_UART_Init+0x4c>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010e4:	4b09      	ldr	r3, [pc, #36]	; (800110c <MX_USART2_UART_Init+0x4c>)
 80010e6:	220c      	movs	r2, #12
 80010e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010ea:	4b08      	ldr	r3, [pc, #32]	; (800110c <MX_USART2_UART_Init+0x4c>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010f0:	4b06      	ldr	r3, [pc, #24]	; (800110c <MX_USART2_UART_Init+0x4c>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010f6:	4805      	ldr	r0, [pc, #20]	; (800110c <MX_USART2_UART_Init+0x4c>)
 80010f8:	f002 fb9e 	bl	8003838 <HAL_UART_Init>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001102:	f000 f875 	bl	80011f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001106:	bf00      	nop
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	200001c0 	.word	0x200001c0
 8001110:	40004400 	.word	0x40004400

08001114 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b086      	sub	sp, #24
 8001118:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800111a:	f107 0308 	add.w	r3, r7, #8
 800111e:	2200      	movs	r2, #0
 8001120:	601a      	str	r2, [r3, #0]
 8001122:	605a      	str	r2, [r3, #4]
 8001124:	609a      	str	r2, [r3, #8]
 8001126:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001128:	4b2e      	ldr	r3, [pc, #184]	; (80011e4 <MX_GPIO_Init+0xd0>)
 800112a:	699b      	ldr	r3, [r3, #24]
 800112c:	4a2d      	ldr	r2, [pc, #180]	; (80011e4 <MX_GPIO_Init+0xd0>)
 800112e:	f043 0304 	orr.w	r3, r3, #4
 8001132:	6193      	str	r3, [r2, #24]
 8001134:	4b2b      	ldr	r3, [pc, #172]	; (80011e4 <MX_GPIO_Init+0xd0>)
 8001136:	699b      	ldr	r3, [r3, #24]
 8001138:	f003 0304 	and.w	r3, r3, #4
 800113c:	607b      	str	r3, [r7, #4]
 800113e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001140:	4b28      	ldr	r3, [pc, #160]	; (80011e4 <MX_GPIO_Init+0xd0>)
 8001142:	699b      	ldr	r3, [r3, #24]
 8001144:	4a27      	ldr	r2, [pc, #156]	; (80011e4 <MX_GPIO_Init+0xd0>)
 8001146:	f043 0308 	orr.w	r3, r3, #8
 800114a:	6193      	str	r3, [r2, #24]
 800114c:	4b25      	ldr	r3, [pc, #148]	; (80011e4 <MX_GPIO_Init+0xd0>)
 800114e:	699b      	ldr	r3, [r3, #24]
 8001150:	f003 0308 	and.w	r3, r3, #8
 8001154:	603b      	str	r3, [r7, #0]
 8001156:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_Pin|D3_Pin|D5_Pin|D4_Pin, GPIO_PIN_RESET);
 8001158:	2200      	movs	r2, #0
 800115a:	f44f 6187 	mov.w	r1, #1080	; 0x438
 800115e:	4822      	ldr	r0, [pc, #136]	; (80011e8 <MX_GPIO_Init+0xd4>)
 8001160:	f001 f82d 	bl	80021be <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D7_Pin|D2_Pin, GPIO_PIN_RESET);
 8001164:	2200      	movs	r2, #0
 8001166:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 800116a:	4820      	ldr	r0, [pc, #128]	; (80011ec <MX_GPIO_Init+0xd8>)
 800116c:	f001 f827 	bl	80021be <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin;
 8001170:	2313      	movs	r3, #19
 8001172:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001174:	2300      	movs	r3, #0
 8001176:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001178:	2301      	movs	r3, #1
 800117a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800117c:	f107 0308 	add.w	r3, r7, #8
 8001180:	4619      	mov	r1, r3
 8001182:	481a      	ldr	r0, [pc, #104]	; (80011ec <MX_GPIO_Init+0xd8>)
 8001184:	f000 fe80 	bl	8001e88 <HAL_GPIO_Init>

  /*Configure GPIO pin : A3_Pin */
  GPIO_InitStruct.Pin = A3_Pin;
 8001188:	2301      	movs	r3, #1
 800118a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800118c:	2300      	movs	r3, #0
 800118e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001190:	2301      	movs	r3, #1
 8001192:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(A3_GPIO_Port, &GPIO_InitStruct);
 8001194:	f107 0308 	add.w	r3, r7, #8
 8001198:	4619      	mov	r1, r3
 800119a:	4813      	ldr	r0, [pc, #76]	; (80011e8 <MX_GPIO_Init+0xd4>)
 800119c:	f000 fe74 	bl	8001e88 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_Pin D3_Pin D5_Pin D4_Pin */
  GPIO_InitStruct.Pin = D6_Pin|D3_Pin|D5_Pin|D4_Pin;
 80011a0:	f44f 6387 	mov.w	r3, #1080	; 0x438
 80011a4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a6:	2301      	movs	r3, #1
 80011a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011aa:	2300      	movs	r3, #0
 80011ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ae:	2302      	movs	r3, #2
 80011b0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011b2:	f107 0308 	add.w	r3, r7, #8
 80011b6:	4619      	mov	r1, r3
 80011b8:	480b      	ldr	r0, [pc, #44]	; (80011e8 <MX_GPIO_Init+0xd4>)
 80011ba:	f000 fe65 	bl	8001e88 <HAL_GPIO_Init>

  /*Configure GPIO pins : D7_Pin D2_Pin */
  GPIO_InitStruct.Pin = D7_Pin|D2_Pin;
 80011be:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80011c2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c4:	2301      	movs	r3, #1
 80011c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c8:	2300      	movs	r3, #0
 80011ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011cc:	2302      	movs	r3, #2
 80011ce:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d0:	f107 0308 	add.w	r3, r7, #8
 80011d4:	4619      	mov	r1, r3
 80011d6:	4805      	ldr	r0, [pc, #20]	; (80011ec <MX_GPIO_Init+0xd8>)
 80011d8:	f000 fe56 	bl	8001e88 <HAL_GPIO_Init>

}
 80011dc:	bf00      	nop
 80011de:	3718      	adds	r7, #24
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	40021000 	.word	0x40021000
 80011e8:	40010c00 	.word	0x40010c00
 80011ec:	40010800 	.word	0x40010800

080011f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011f4:	b672      	cpsid	i
}
 80011f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011f8:	e7fe      	b.n	80011f8 <Error_Handler+0x8>
	...

080011fc <SCH_Update>:


void SCH_Init(void){
}

void SCH_Update(void){
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
	// Check if there is a task at this location
	count_SCH_Update ++;
 8001200:	4b10      	ldr	r3, [pc, #64]	; (8001244 <SCH_Update+0x48>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	3301      	adds	r3, #1
 8001206:	4a0f      	ldr	r2, [pc, #60]	; (8001244 <SCH_Update+0x48>)
 8001208:	6013      	str	r3, [r2, #0]
	if (SCH_tasks_G[0].pTask && SCH_tasks_G[0].RunMe == 0) {
 800120a:	4b0f      	ldr	r3, [pc, #60]	; (8001248 <SCH_Update+0x4c>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d013      	beq.n	800123a <SCH_Update+0x3e>
 8001212:	4b0d      	ldr	r3, [pc, #52]	; (8001248 <SCH_Update+0x4c>)
 8001214:	7b1b      	ldrb	r3, [r3, #12]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d10f      	bne.n	800123a <SCH_Update+0x3e>
		if(SCH_tasks_G[0].Delay > 0){
 800121a:	4b0b      	ldr	r3, [pc, #44]	; (8001248 <SCH_Update+0x4c>)
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d004      	beq.n	800122c <SCH_Update+0x30>
			SCH_tasks_G[0].Delay = SCH_tasks_G[0].Delay - 1;
 8001222:	4b09      	ldr	r3, [pc, #36]	; (8001248 <SCH_Update+0x4c>)
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	3b01      	subs	r3, #1
 8001228:	4a07      	ldr	r2, [pc, #28]	; (8001248 <SCH_Update+0x4c>)
 800122a:	6053      	str	r3, [r2, #4]
		}
		if (SCH_tasks_G[0].Delay == 0) {
 800122c:	4b06      	ldr	r3, [pc, #24]	; (8001248 <SCH_Update+0x4c>)
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d102      	bne.n	800123a <SCH_Update+0x3e>
			SCH_tasks_G[0].RunMe = 1;
 8001234:	4b04      	ldr	r3, [pc, #16]	; (8001248 <SCH_Update+0x4c>)
 8001236:	2201      	movs	r2, #1
 8001238:	731a      	strb	r2, [r3, #12]
		}
	}
}
 800123a:	bf00      	nop
 800123c:	46bd      	mov	sp, r7
 800123e:	bc80      	pop	{r7}
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	200002d4 	.word	0x200002d4
 8001248:	20000208 	.word	0x20000208

0800124c <SCH_Add_Task>:
uint32_t SCH_Add_Task(void (* pFunction)(), uint32_t DELAY, uint32_t PERIOD){
 800124c:	b590      	push	{r4, r7, lr}
 800124e:	b089      	sub	sp, #36	; 0x24
 8001250:	af00      	add	r7, sp, #0
 8001252:	60f8      	str	r0, [r7, #12]
 8001254:	60b9      	str	r1, [r7, #8]
 8001256:	607a      	str	r2, [r7, #4]
	uint8_t newTaskIndex = 0;
 8001258:	2300      	movs	r3, #0
 800125a:	77fb      	strb	r3, [r7, #31]
	uint32_t sumDelay = 0;
 800125c:	2300      	movs	r3, #0
 800125e:	61bb      	str	r3, [r7, #24]
	uint32_t newDelay = 0;
 8001260:	2300      	movs	r3, #0
 8001262:	613b      	str	r3, [r7, #16]

	for(newTaskIndex = 0; newTaskIndex < SCH_MAX_TASKS; newTaskIndex ++){
 8001264:	2300      	movs	r3, #0
 8001266:	77fb      	strb	r3, [r7, #31]
 8001268:	e133      	b.n	80014d2 <SCH_Add_Task+0x286>
		sumDelay = sumDelay + SCH_tasks_G[newTaskIndex].Delay;
 800126a:	7ffa      	ldrb	r2, [r7, #31]
 800126c:	49a1      	ldr	r1, [pc, #644]	; (80014f4 <SCH_Add_Task+0x2a8>)
 800126e:	4613      	mov	r3, r2
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	4413      	add	r3, r2
 8001274:	009b      	lsls	r3, r3, #2
 8001276:	440b      	add	r3, r1
 8001278:	3304      	adds	r3, #4
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	4413      	add	r3, r2
 8001280:	61bb      	str	r3, [r7, #24]
		if(sumDelay > DELAY){
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	429a      	cmp	r2, r3
 8001288:	f240 80c1 	bls.w	800140e <SCH_Add_Task+0x1c2>
			newDelay = DELAY - (sumDelay - SCH_tasks_G[newTaskIndex].Delay);
 800128c:	7ffa      	ldrb	r2, [r7, #31]
 800128e:	4999      	ldr	r1, [pc, #612]	; (80014f4 <SCH_Add_Task+0x2a8>)
 8001290:	4613      	mov	r3, r2
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	4413      	add	r3, r2
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	440b      	add	r3, r1
 800129a:	3304      	adds	r3, #4
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	69bb      	ldr	r3, [r7, #24]
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	68ba      	ldr	r2, [r7, #8]
 80012a4:	4413      	add	r3, r2
 80012a6:	613b      	str	r3, [r7, #16]
			SCH_tasks_G[newTaskIndex].Delay = sumDelay - DELAY;
 80012a8:	7ffa      	ldrb	r2, [r7, #31]
 80012aa:	69b9      	ldr	r1, [r7, #24]
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	1ac9      	subs	r1, r1, r3
 80012b0:	4890      	ldr	r0, [pc, #576]	; (80014f4 <SCH_Add_Task+0x2a8>)
 80012b2:	4613      	mov	r3, r2
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	4413      	add	r3, r2
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	4403      	add	r3, r0
 80012bc:	3304      	adds	r3, #4
 80012be:	6019      	str	r1, [r3, #0]
			for(uint8_t i = SCH_MAX_TASKS - 1; i > newTaskIndex; i --){
 80012c0:	2309      	movs	r3, #9
 80012c2:	75fb      	strb	r3, [r7, #23]
 80012c4:	e04c      	b.n	8001360 <SCH_Add_Task+0x114>
//				if(SCH_tasks_G[i - 1].pTask != 0)
				{
					SCH_tasks_G[i].pTask = SCH_tasks_G[i - 1].pTask;
 80012c6:	7dfb      	ldrb	r3, [r7, #23]
 80012c8:	1e59      	subs	r1, r3, #1
 80012ca:	7dfa      	ldrb	r2, [r7, #23]
 80012cc:	4889      	ldr	r0, [pc, #548]	; (80014f4 <SCH_Add_Task+0x2a8>)
 80012ce:	460b      	mov	r3, r1
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	440b      	add	r3, r1
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	4403      	add	r3, r0
 80012d8:	6819      	ldr	r1, [r3, #0]
 80012da:	4886      	ldr	r0, [pc, #536]	; (80014f4 <SCH_Add_Task+0x2a8>)
 80012dc:	4613      	mov	r3, r2
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	4413      	add	r3, r2
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	4403      	add	r3, r0
 80012e6:	6019      	str	r1, [r3, #0]
					SCH_tasks_G[i].Period = SCH_tasks_G[i - 1].Period;
 80012e8:	7dfb      	ldrb	r3, [r7, #23]
 80012ea:	1e59      	subs	r1, r3, #1
 80012ec:	7dfa      	ldrb	r2, [r7, #23]
 80012ee:	4881      	ldr	r0, [pc, #516]	; (80014f4 <SCH_Add_Task+0x2a8>)
 80012f0:	460b      	mov	r3, r1
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	440b      	add	r3, r1
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	4403      	add	r3, r0
 80012fa:	3308      	adds	r3, #8
 80012fc:	6819      	ldr	r1, [r3, #0]
 80012fe:	487d      	ldr	r0, [pc, #500]	; (80014f4 <SCH_Add_Task+0x2a8>)
 8001300:	4613      	mov	r3, r2
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	4413      	add	r3, r2
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	4403      	add	r3, r0
 800130a:	3308      	adds	r3, #8
 800130c:	6019      	str	r1, [r3, #0]
					SCH_tasks_G[i].Delay = SCH_tasks_G[i - 1].Delay;
 800130e:	7dfb      	ldrb	r3, [r7, #23]
 8001310:	1e59      	subs	r1, r3, #1
 8001312:	7dfa      	ldrb	r2, [r7, #23]
 8001314:	4877      	ldr	r0, [pc, #476]	; (80014f4 <SCH_Add_Task+0x2a8>)
 8001316:	460b      	mov	r3, r1
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	440b      	add	r3, r1
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	4403      	add	r3, r0
 8001320:	3304      	adds	r3, #4
 8001322:	6819      	ldr	r1, [r3, #0]
 8001324:	4873      	ldr	r0, [pc, #460]	; (80014f4 <SCH_Add_Task+0x2a8>)
 8001326:	4613      	mov	r3, r2
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	4413      	add	r3, r2
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	4403      	add	r3, r0
 8001330:	3304      	adds	r3, #4
 8001332:	6019      	str	r1, [r3, #0]
//					SCH_tasks_G[i].RunMe = SCH_tasks_G[i - 1].RunMe;
					SCH_tasks_G[i].TaskID = SCH_tasks_G[i - 1].TaskID;
 8001334:	7dfb      	ldrb	r3, [r7, #23]
 8001336:	1e59      	subs	r1, r3, #1
 8001338:	7dfa      	ldrb	r2, [r7, #23]
 800133a:	486e      	ldr	r0, [pc, #440]	; (80014f4 <SCH_Add_Task+0x2a8>)
 800133c:	460b      	mov	r3, r1
 800133e:	009b      	lsls	r3, r3, #2
 8001340:	440b      	add	r3, r1
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	4403      	add	r3, r0
 8001346:	3310      	adds	r3, #16
 8001348:	6819      	ldr	r1, [r3, #0]
 800134a:	486a      	ldr	r0, [pc, #424]	; (80014f4 <SCH_Add_Task+0x2a8>)
 800134c:	4613      	mov	r3, r2
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	4413      	add	r3, r2
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	4403      	add	r3, r0
 8001356:	3310      	adds	r3, #16
 8001358:	6019      	str	r1, [r3, #0]
			for(uint8_t i = SCH_MAX_TASKS - 1; i > newTaskIndex; i --){
 800135a:	7dfb      	ldrb	r3, [r7, #23]
 800135c:	3b01      	subs	r3, #1
 800135e:	75fb      	strb	r3, [r7, #23]
 8001360:	7dfa      	ldrb	r2, [r7, #23]
 8001362:	7ffb      	ldrb	r3, [r7, #31]
 8001364:	429a      	cmp	r2, r3
 8001366:	d8ae      	bhi.n	80012c6 <SCH_Add_Task+0x7a>
				}
			}
			SCH_tasks_G[newTaskIndex].pTask = pFunction;
 8001368:	7ffa      	ldrb	r2, [r7, #31]
 800136a:	4962      	ldr	r1, [pc, #392]	; (80014f4 <SCH_Add_Task+0x2a8>)
 800136c:	4613      	mov	r3, r2
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	4413      	add	r3, r2
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	440b      	add	r3, r1
 8001376:	68fa      	ldr	r2, [r7, #12]
 8001378:	601a      	str	r2, [r3, #0]
			SCH_tasks_G[newTaskIndex].Delay = newDelay;
 800137a:	7ffa      	ldrb	r2, [r7, #31]
 800137c:	495d      	ldr	r1, [pc, #372]	; (80014f4 <SCH_Add_Task+0x2a8>)
 800137e:	4613      	mov	r3, r2
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	4413      	add	r3, r2
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	440b      	add	r3, r1
 8001388:	3304      	adds	r3, #4
 800138a:	693a      	ldr	r2, [r7, #16]
 800138c:	601a      	str	r2, [r3, #0]
			SCH_tasks_G[newTaskIndex].Period = PERIOD;
 800138e:	7ffa      	ldrb	r2, [r7, #31]
 8001390:	4958      	ldr	r1, [pc, #352]	; (80014f4 <SCH_Add_Task+0x2a8>)
 8001392:	4613      	mov	r3, r2
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	4413      	add	r3, r2
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	440b      	add	r3, r1
 800139c:	3308      	adds	r3, #8
 800139e:	687a      	ldr	r2, [r7, #4]
 80013a0:	601a      	str	r2, [r3, #0]
			if(SCH_tasks_G[newTaskIndex].Delay == 0){
 80013a2:	7ffa      	ldrb	r2, [r7, #31]
 80013a4:	4953      	ldr	r1, [pc, #332]	; (80014f4 <SCH_Add_Task+0x2a8>)
 80013a6:	4613      	mov	r3, r2
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	4413      	add	r3, r2
 80013ac:	009b      	lsls	r3, r3, #2
 80013ae:	440b      	add	r3, r1
 80013b0:	3304      	adds	r3, #4
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d10a      	bne.n	80013ce <SCH_Add_Task+0x182>
				SCH_tasks_G[newTaskIndex].RunMe = 1;
 80013b8:	7ffa      	ldrb	r2, [r7, #31]
 80013ba:	494e      	ldr	r1, [pc, #312]	; (80014f4 <SCH_Add_Task+0x2a8>)
 80013bc:	4613      	mov	r3, r2
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	4413      	add	r3, r2
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	440b      	add	r3, r1
 80013c6:	330c      	adds	r3, #12
 80013c8:	2201      	movs	r2, #1
 80013ca:	701a      	strb	r2, [r3, #0]
 80013cc:	e009      	b.n	80013e2 <SCH_Add_Task+0x196>
			} else {
				SCH_tasks_G[newTaskIndex].RunMe = 0;
 80013ce:	7ffa      	ldrb	r2, [r7, #31]
 80013d0:	4948      	ldr	r1, [pc, #288]	; (80014f4 <SCH_Add_Task+0x2a8>)
 80013d2:	4613      	mov	r3, r2
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	4413      	add	r3, r2
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	440b      	add	r3, r1
 80013dc:	330c      	adds	r3, #12
 80013de:	2200      	movs	r2, #0
 80013e0:	701a      	strb	r2, [r3, #0]
			}
			SCH_tasks_G[newTaskIndex].TaskID = Get_New_Task_ID();
 80013e2:	7ffc      	ldrb	r4, [r7, #31]
 80013e4:	f000 f9a4 	bl	8001730 <Get_New_Task_ID>
 80013e8:	4602      	mov	r2, r0
 80013ea:	4942      	ldr	r1, [pc, #264]	; (80014f4 <SCH_Add_Task+0x2a8>)
 80013ec:	4623      	mov	r3, r4
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	4423      	add	r3, r4
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	440b      	add	r3, r1
 80013f6:	3310      	adds	r3, #16
 80013f8:	601a      	str	r2, [r3, #0]
			return SCH_tasks_G[newTaskIndex].TaskID;
 80013fa:	7ffa      	ldrb	r2, [r7, #31]
 80013fc:	493d      	ldr	r1, [pc, #244]	; (80014f4 <SCH_Add_Task+0x2a8>)
 80013fe:	4613      	mov	r3, r2
 8001400:	009b      	lsls	r3, r3, #2
 8001402:	4413      	add	r3, r2
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	440b      	add	r3, r1
 8001408:	3310      	adds	r3, #16
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	e06e      	b.n	80014ec <SCH_Add_Task+0x2a0>
		} else {
			if(SCH_tasks_G[newTaskIndex].pTask == 0x0000){
 800140e:	7ffa      	ldrb	r2, [r7, #31]
 8001410:	4938      	ldr	r1, [pc, #224]	; (80014f4 <SCH_Add_Task+0x2a8>)
 8001412:	4613      	mov	r3, r2
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	4413      	add	r3, r2
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	440b      	add	r3, r1
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d154      	bne.n	80014cc <SCH_Add_Task+0x280>
				SCH_tasks_G[newTaskIndex].pTask = pFunction;
 8001422:	7ffa      	ldrb	r2, [r7, #31]
 8001424:	4933      	ldr	r1, [pc, #204]	; (80014f4 <SCH_Add_Task+0x2a8>)
 8001426:	4613      	mov	r3, r2
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	4413      	add	r3, r2
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	440b      	add	r3, r1
 8001430:	68fa      	ldr	r2, [r7, #12]
 8001432:	601a      	str	r2, [r3, #0]
				SCH_tasks_G[newTaskIndex].Delay = DELAY - sumDelay;
 8001434:	7ffa      	ldrb	r2, [r7, #31]
 8001436:	68b9      	ldr	r1, [r7, #8]
 8001438:	69bb      	ldr	r3, [r7, #24]
 800143a:	1ac9      	subs	r1, r1, r3
 800143c:	482d      	ldr	r0, [pc, #180]	; (80014f4 <SCH_Add_Task+0x2a8>)
 800143e:	4613      	mov	r3, r2
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	4413      	add	r3, r2
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	4403      	add	r3, r0
 8001448:	3304      	adds	r3, #4
 800144a:	6019      	str	r1, [r3, #0]
				SCH_tasks_G[newTaskIndex].Period = PERIOD;
 800144c:	7ffa      	ldrb	r2, [r7, #31]
 800144e:	4929      	ldr	r1, [pc, #164]	; (80014f4 <SCH_Add_Task+0x2a8>)
 8001450:	4613      	mov	r3, r2
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	4413      	add	r3, r2
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	440b      	add	r3, r1
 800145a:	3308      	adds	r3, #8
 800145c:	687a      	ldr	r2, [r7, #4]
 800145e:	601a      	str	r2, [r3, #0]
				if(SCH_tasks_G[newTaskIndex].Delay == 0){
 8001460:	7ffa      	ldrb	r2, [r7, #31]
 8001462:	4924      	ldr	r1, [pc, #144]	; (80014f4 <SCH_Add_Task+0x2a8>)
 8001464:	4613      	mov	r3, r2
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	4413      	add	r3, r2
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	440b      	add	r3, r1
 800146e:	3304      	adds	r3, #4
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d10a      	bne.n	800148c <SCH_Add_Task+0x240>
					SCH_tasks_G[newTaskIndex].RunMe = 1;
 8001476:	7ffa      	ldrb	r2, [r7, #31]
 8001478:	491e      	ldr	r1, [pc, #120]	; (80014f4 <SCH_Add_Task+0x2a8>)
 800147a:	4613      	mov	r3, r2
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	4413      	add	r3, r2
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	440b      	add	r3, r1
 8001484:	330c      	adds	r3, #12
 8001486:	2201      	movs	r2, #1
 8001488:	701a      	strb	r2, [r3, #0]
 800148a:	e009      	b.n	80014a0 <SCH_Add_Task+0x254>
				} else {
					SCH_tasks_G[newTaskIndex].RunMe = 0;
 800148c:	7ffa      	ldrb	r2, [r7, #31]
 800148e:	4919      	ldr	r1, [pc, #100]	; (80014f4 <SCH_Add_Task+0x2a8>)
 8001490:	4613      	mov	r3, r2
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	4413      	add	r3, r2
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	440b      	add	r3, r1
 800149a:	330c      	adds	r3, #12
 800149c:	2200      	movs	r2, #0
 800149e:	701a      	strb	r2, [r3, #0]
				}
				SCH_tasks_G[newTaskIndex].TaskID = Get_New_Task_ID();
 80014a0:	7ffc      	ldrb	r4, [r7, #31]
 80014a2:	f000 f945 	bl	8001730 <Get_New_Task_ID>
 80014a6:	4602      	mov	r2, r0
 80014a8:	4912      	ldr	r1, [pc, #72]	; (80014f4 <SCH_Add_Task+0x2a8>)
 80014aa:	4623      	mov	r3, r4
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	4423      	add	r3, r4
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	440b      	add	r3, r1
 80014b4:	3310      	adds	r3, #16
 80014b6:	601a      	str	r2, [r3, #0]
				return SCH_tasks_G[newTaskIndex].TaskID;
 80014b8:	7ffa      	ldrb	r2, [r7, #31]
 80014ba:	490e      	ldr	r1, [pc, #56]	; (80014f4 <SCH_Add_Task+0x2a8>)
 80014bc:	4613      	mov	r3, r2
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	4413      	add	r3, r2
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	440b      	add	r3, r1
 80014c6:	3310      	adds	r3, #16
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	e00f      	b.n	80014ec <SCH_Add_Task+0x2a0>
	for(newTaskIndex = 0; newTaskIndex < SCH_MAX_TASKS; newTaskIndex ++){
 80014cc:	7ffb      	ldrb	r3, [r7, #31]
 80014ce:	3301      	adds	r3, #1
 80014d0:	77fb      	strb	r3, [r7, #31]
 80014d2:	7ffb      	ldrb	r3, [r7, #31]
 80014d4:	2b09      	cmp	r3, #9
 80014d6:	f67f aec8 	bls.w	800126a <SCH_Add_Task+0x1e>
			}
		}
	}
	return SCH_tasks_G[newTaskIndex].TaskID;
 80014da:	7ffa      	ldrb	r2, [r7, #31]
 80014dc:	4905      	ldr	r1, [pc, #20]	; (80014f4 <SCH_Add_Task+0x2a8>)
 80014de:	4613      	mov	r3, r2
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	4413      	add	r3, r2
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	440b      	add	r3, r1
 80014e8:	3310      	adds	r3, #16
 80014ea:	681b      	ldr	r3, [r3, #0]
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	3724      	adds	r7, #36	; 0x24
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd90      	pop	{r4, r7, pc}
 80014f4:	20000208 	.word	0x20000208

080014f8 <SCH_Delete_Task>:


uint8_t SCH_Delete_Task(uint32_t taskID){
 80014f8:	b480      	push	{r7}
 80014fa:	b085      	sub	sp, #20
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
	uint8_t Return_code  = 0;
 8001500:	2300      	movs	r3, #0
 8001502:	737b      	strb	r3, [r7, #13]
	uint8_t taskIndex;
	uint8_t j;
	if(taskID != NO_TASK_ID){
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2b00      	cmp	r3, #0
 8001508:	f000 80e2 	beq.w	80016d0 <SCH_Delete_Task+0x1d8>
		for(taskIndex = 0; taskIndex < SCH_MAX_TASKS; taskIndex ++){
 800150c:	2300      	movs	r3, #0
 800150e:	73fb      	strb	r3, [r7, #15]
 8001510:	e0da      	b.n	80016c8 <SCH_Delete_Task+0x1d0>
			if(SCH_tasks_G[taskIndex].TaskID == taskID){
 8001512:	7bfa      	ldrb	r2, [r7, #15]
 8001514:	4971      	ldr	r1, [pc, #452]	; (80016dc <SCH_Delete_Task+0x1e4>)
 8001516:	4613      	mov	r3, r2
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	4413      	add	r3, r2
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	440b      	add	r3, r1
 8001520:	3310      	adds	r3, #16
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	687a      	ldr	r2, [r7, #4]
 8001526:	429a      	cmp	r2, r3
 8001528:	f040 80cb 	bne.w	80016c2 <SCH_Delete_Task+0x1ca>
				Return_code = 1;
 800152c:	2301      	movs	r3, #1
 800152e:	737b      	strb	r3, [r7, #13]
				if(taskIndex != 0 && taskIndex < SCH_MAX_TASKS - 1){
 8001530:	7bfb      	ldrb	r3, [r7, #15]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d02b      	beq.n	800158e <SCH_Delete_Task+0x96>
 8001536:	7bfb      	ldrb	r3, [r7, #15]
 8001538:	2b08      	cmp	r3, #8
 800153a:	d828      	bhi.n	800158e <SCH_Delete_Task+0x96>
					if(SCH_tasks_G[taskIndex+1].pTask != 0x0000){
 800153c:	7bfb      	ldrb	r3, [r7, #15]
 800153e:	1c5a      	adds	r2, r3, #1
 8001540:	4966      	ldr	r1, [pc, #408]	; (80016dc <SCH_Delete_Task+0x1e4>)
 8001542:	4613      	mov	r3, r2
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	4413      	add	r3, r2
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	440b      	add	r3, r1
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d01d      	beq.n	800158e <SCH_Delete_Task+0x96>
						SCH_tasks_G[taskIndex+1].Delay += SCH_tasks_G[taskIndex].Delay;
 8001552:	7bfb      	ldrb	r3, [r7, #15]
 8001554:	1c5a      	adds	r2, r3, #1
 8001556:	4961      	ldr	r1, [pc, #388]	; (80016dc <SCH_Delete_Task+0x1e4>)
 8001558:	4613      	mov	r3, r2
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	4413      	add	r3, r2
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	440b      	add	r3, r1
 8001562:	3304      	adds	r3, #4
 8001564:	6819      	ldr	r1, [r3, #0]
 8001566:	7bfa      	ldrb	r2, [r7, #15]
 8001568:	485c      	ldr	r0, [pc, #368]	; (80016dc <SCH_Delete_Task+0x1e4>)
 800156a:	4613      	mov	r3, r2
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	4413      	add	r3, r2
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	4403      	add	r3, r0
 8001574:	3304      	adds	r3, #4
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	7bfa      	ldrb	r2, [r7, #15]
 800157a:	3201      	adds	r2, #1
 800157c:	4419      	add	r1, r3
 800157e:	4857      	ldr	r0, [pc, #348]	; (80016dc <SCH_Delete_Task+0x1e4>)
 8001580:	4613      	mov	r3, r2
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	4413      	add	r3, r2
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	4403      	add	r3, r0
 800158a:	3304      	adds	r3, #4
 800158c:	6019      	str	r1, [r3, #0]
					}
				}

				for( j = taskIndex; j < SCH_MAX_TASKS - 1; j ++){
 800158e:	7bfb      	ldrb	r3, [r7, #15]
 8001590:	73bb      	strb	r3, [r7, #14]
 8001592:	e060      	b.n	8001656 <SCH_Delete_Task+0x15e>
					SCH_tasks_G[j].pTask = SCH_tasks_G[j+1].pTask;
 8001594:	7bbb      	ldrb	r3, [r7, #14]
 8001596:	1c59      	adds	r1, r3, #1
 8001598:	7bba      	ldrb	r2, [r7, #14]
 800159a:	4850      	ldr	r0, [pc, #320]	; (80016dc <SCH_Delete_Task+0x1e4>)
 800159c:	460b      	mov	r3, r1
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	440b      	add	r3, r1
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	4403      	add	r3, r0
 80015a6:	6819      	ldr	r1, [r3, #0]
 80015a8:	484c      	ldr	r0, [pc, #304]	; (80016dc <SCH_Delete_Task+0x1e4>)
 80015aa:	4613      	mov	r3, r2
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	4413      	add	r3, r2
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	4403      	add	r3, r0
 80015b4:	6019      	str	r1, [r3, #0]
					SCH_tasks_G[j].Period = SCH_tasks_G[j+1].Period;
 80015b6:	7bbb      	ldrb	r3, [r7, #14]
 80015b8:	1c59      	adds	r1, r3, #1
 80015ba:	7bba      	ldrb	r2, [r7, #14]
 80015bc:	4847      	ldr	r0, [pc, #284]	; (80016dc <SCH_Delete_Task+0x1e4>)
 80015be:	460b      	mov	r3, r1
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	440b      	add	r3, r1
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	4403      	add	r3, r0
 80015c8:	3308      	adds	r3, #8
 80015ca:	6819      	ldr	r1, [r3, #0]
 80015cc:	4843      	ldr	r0, [pc, #268]	; (80016dc <SCH_Delete_Task+0x1e4>)
 80015ce:	4613      	mov	r3, r2
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	4413      	add	r3, r2
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	4403      	add	r3, r0
 80015d8:	3308      	adds	r3, #8
 80015da:	6019      	str	r1, [r3, #0]
					SCH_tasks_G[j].Delay = SCH_tasks_G[j+1].Delay;
 80015dc:	7bbb      	ldrb	r3, [r7, #14]
 80015de:	1c59      	adds	r1, r3, #1
 80015e0:	7bba      	ldrb	r2, [r7, #14]
 80015e2:	483e      	ldr	r0, [pc, #248]	; (80016dc <SCH_Delete_Task+0x1e4>)
 80015e4:	460b      	mov	r3, r1
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	440b      	add	r3, r1
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	4403      	add	r3, r0
 80015ee:	3304      	adds	r3, #4
 80015f0:	6819      	ldr	r1, [r3, #0]
 80015f2:	483a      	ldr	r0, [pc, #232]	; (80016dc <SCH_Delete_Task+0x1e4>)
 80015f4:	4613      	mov	r3, r2
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	4413      	add	r3, r2
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	4403      	add	r3, r0
 80015fe:	3304      	adds	r3, #4
 8001600:	6019      	str	r1, [r3, #0]
					SCH_tasks_G[j].RunMe = SCH_tasks_G[j+1].RunMe;
 8001602:	7bbb      	ldrb	r3, [r7, #14]
 8001604:	1c59      	adds	r1, r3, #1
 8001606:	7bba      	ldrb	r2, [r7, #14]
 8001608:	4834      	ldr	r0, [pc, #208]	; (80016dc <SCH_Delete_Task+0x1e4>)
 800160a:	460b      	mov	r3, r1
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	440b      	add	r3, r1
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	4403      	add	r3, r0
 8001614:	330c      	adds	r3, #12
 8001616:	7818      	ldrb	r0, [r3, #0]
 8001618:	4930      	ldr	r1, [pc, #192]	; (80016dc <SCH_Delete_Task+0x1e4>)
 800161a:	4613      	mov	r3, r2
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	4413      	add	r3, r2
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	440b      	add	r3, r1
 8001624:	330c      	adds	r3, #12
 8001626:	4602      	mov	r2, r0
 8001628:	701a      	strb	r2, [r3, #0]
					SCH_tasks_G[j].TaskID = SCH_tasks_G[j+1].TaskID;
 800162a:	7bbb      	ldrb	r3, [r7, #14]
 800162c:	1c59      	adds	r1, r3, #1
 800162e:	7bba      	ldrb	r2, [r7, #14]
 8001630:	482a      	ldr	r0, [pc, #168]	; (80016dc <SCH_Delete_Task+0x1e4>)
 8001632:	460b      	mov	r3, r1
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	440b      	add	r3, r1
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	4403      	add	r3, r0
 800163c:	3310      	adds	r3, #16
 800163e:	6819      	ldr	r1, [r3, #0]
 8001640:	4826      	ldr	r0, [pc, #152]	; (80016dc <SCH_Delete_Task+0x1e4>)
 8001642:	4613      	mov	r3, r2
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	4413      	add	r3, r2
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	4403      	add	r3, r0
 800164c:	3310      	adds	r3, #16
 800164e:	6019      	str	r1, [r3, #0]
				for( j = taskIndex; j < SCH_MAX_TASKS - 1; j ++){
 8001650:	7bbb      	ldrb	r3, [r7, #14]
 8001652:	3301      	adds	r3, #1
 8001654:	73bb      	strb	r3, [r7, #14]
 8001656:	7bbb      	ldrb	r3, [r7, #14]
 8001658:	2b08      	cmp	r3, #8
 800165a:	d99b      	bls.n	8001594 <SCH_Delete_Task+0x9c>
				}
				SCH_tasks_G[j].pTask = 0;
 800165c:	7bba      	ldrb	r2, [r7, #14]
 800165e:	491f      	ldr	r1, [pc, #124]	; (80016dc <SCH_Delete_Task+0x1e4>)
 8001660:	4613      	mov	r3, r2
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	4413      	add	r3, r2
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	440b      	add	r3, r1
 800166a:	2200      	movs	r2, #0
 800166c:	601a      	str	r2, [r3, #0]
				SCH_tasks_G[j].Period = 0;
 800166e:	7bba      	ldrb	r2, [r7, #14]
 8001670:	491a      	ldr	r1, [pc, #104]	; (80016dc <SCH_Delete_Task+0x1e4>)
 8001672:	4613      	mov	r3, r2
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	4413      	add	r3, r2
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	440b      	add	r3, r1
 800167c:	3308      	adds	r3, #8
 800167e:	2200      	movs	r2, #0
 8001680:	601a      	str	r2, [r3, #0]
				SCH_tasks_G[j].Delay = 0;
 8001682:	7bba      	ldrb	r2, [r7, #14]
 8001684:	4915      	ldr	r1, [pc, #84]	; (80016dc <SCH_Delete_Task+0x1e4>)
 8001686:	4613      	mov	r3, r2
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	4413      	add	r3, r2
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	440b      	add	r3, r1
 8001690:	3304      	adds	r3, #4
 8001692:	2200      	movs	r2, #0
 8001694:	601a      	str	r2, [r3, #0]
				SCH_tasks_G[j].RunMe = 0;
 8001696:	7bba      	ldrb	r2, [r7, #14]
 8001698:	4910      	ldr	r1, [pc, #64]	; (80016dc <SCH_Delete_Task+0x1e4>)
 800169a:	4613      	mov	r3, r2
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	4413      	add	r3, r2
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	440b      	add	r3, r1
 80016a4:	330c      	adds	r3, #12
 80016a6:	2200      	movs	r2, #0
 80016a8:	701a      	strb	r2, [r3, #0]
				SCH_tasks_G[j].TaskID = 0;
 80016aa:	7bba      	ldrb	r2, [r7, #14]
 80016ac:	490b      	ldr	r1, [pc, #44]	; (80016dc <SCH_Delete_Task+0x1e4>)
 80016ae:	4613      	mov	r3, r2
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	4413      	add	r3, r2
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	440b      	add	r3, r1
 80016b8:	3310      	adds	r3, #16
 80016ba:	2200      	movs	r2, #0
 80016bc:	601a      	str	r2, [r3, #0]
				return Return_code;
 80016be:	7b7b      	ldrb	r3, [r7, #13]
 80016c0:	e007      	b.n	80016d2 <SCH_Delete_Task+0x1da>
		for(taskIndex = 0; taskIndex < SCH_MAX_TASKS; taskIndex ++){
 80016c2:	7bfb      	ldrb	r3, [r7, #15]
 80016c4:	3301      	adds	r3, #1
 80016c6:	73fb      	strb	r3, [r7, #15]
 80016c8:	7bfb      	ldrb	r3, [r7, #15]
 80016ca:	2b09      	cmp	r3, #9
 80016cc:	f67f af21 	bls.w	8001512 <SCH_Delete_Task+0x1a>
			}
		}
	}
	return Return_code; // return status
 80016d0:	7b7b      	ldrb	r3, [r7, #13]
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3714      	adds	r7, #20
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bc80      	pop	{r7}
 80016da:	4770      	bx	lr
 80016dc:	20000208 	.word	0x20000208

080016e0 <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void){
 80016e0:	b5b0      	push	{r4, r5, r7, lr}
 80016e2:	b086      	sub	sp, #24
 80016e4:	af00      	add	r7, sp, #0
	if(SCH_tasks_G[0].RunMe > 0) {
 80016e6:	4b11      	ldr	r3, [pc, #68]	; (800172c <SCH_Dispatch_Tasks+0x4c>)
 80016e8:	7b1b      	ldrb	r3, [r3, #12]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d019      	beq.n	8001722 <SCH_Dispatch_Tasks+0x42>
		(*SCH_tasks_G[0].pTask)(); // Run the task
 80016ee:	4b0f      	ldr	r3, [pc, #60]	; (800172c <SCH_Dispatch_Tasks+0x4c>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4798      	blx	r3
		SCH_tasks_G[0].RunMe = 0; // Reset / reduce RunMe flag
 80016f4:	4b0d      	ldr	r3, [pc, #52]	; (800172c <SCH_Dispatch_Tasks+0x4c>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	731a      	strb	r2, [r3, #12]
		sTask temtask = SCH_tasks_G[0];
 80016fa:	4b0c      	ldr	r3, [pc, #48]	; (800172c <SCH_Dispatch_Tasks+0x4c>)
 80016fc:	1d3c      	adds	r4, r7, #4
 80016fe:	461d      	mov	r5, r3
 8001700:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001702:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001704:	682b      	ldr	r3, [r5, #0]
 8001706:	6023      	str	r3, [r4, #0]
		SCH_Delete_Task(temtask.TaskID);
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	4618      	mov	r0, r3
 800170c:	f7ff fef4 	bl	80014f8 <SCH_Delete_Task>
		if (temtask.Period != 0) {
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d005      	beq.n	8001722 <SCH_Dispatch_Tasks+0x42>
			SCH_Add_Task(temtask.pTask, temtask.Period, temtask.Period);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	68f9      	ldr	r1, [r7, #12]
 800171a:	68fa      	ldr	r2, [r7, #12]
 800171c:	4618      	mov	r0, r3
 800171e:	f7ff fd95 	bl	800124c <SCH_Add_Task>
		}
	}
}
 8001722:	bf00      	nop
 8001724:	3718      	adds	r7, #24
 8001726:	46bd      	mov	sp, r7
 8001728:	bdb0      	pop	{r4, r5, r7, pc}
 800172a:	bf00      	nop
 800172c:	20000208 	.word	0x20000208

08001730 <Get_New_Task_ID>:

static uint32_t Get_New_Task_ID(void){
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
	newTaskID++;
 8001734:	4b09      	ldr	r3, [pc, #36]	; (800175c <Get_New_Task_ID+0x2c>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	3301      	adds	r3, #1
 800173a:	4a08      	ldr	r2, [pc, #32]	; (800175c <Get_New_Task_ID+0x2c>)
 800173c:	6013      	str	r3, [r2, #0]
	if(newTaskID == NO_TASK_ID){
 800173e:	4b07      	ldr	r3, [pc, #28]	; (800175c <Get_New_Task_ID+0x2c>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d104      	bne.n	8001750 <Get_New_Task_ID+0x20>
		newTaskID++;
 8001746:	4b05      	ldr	r3, [pc, #20]	; (800175c <Get_New_Task_ID+0x2c>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	3301      	adds	r3, #1
 800174c:	4a03      	ldr	r2, [pc, #12]	; (800175c <Get_New_Task_ID+0x2c>)
 800174e:	6013      	str	r3, [r2, #0]
	}
	return newTaskID;
 8001750:	4b02      	ldr	r3, [pc, #8]	; (800175c <Get_New_Task_ID+0x2c>)
 8001752:	681b      	ldr	r3, [r3, #0]
}
 8001754:	4618      	mov	r0, r3
 8001756:	46bd      	mov	sp, r7
 8001758:	bc80      	pop	{r7}
 800175a:	4770      	bx	lr
 800175c:	200002d0 	.word	0x200002d0

08001760 <setTimer>:
#include "software_timer.h"

int timer_counter[10] = {0};
int timer_flag[10] = {0};

void setTimer(int duration, int timerId){
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	6039      	str	r1, [r7, #0]
	timer_counter[timerId] = duration;
 800176a:	4907      	ldr	r1, [pc, #28]	; (8001788 <setTimer+0x28>)
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	687a      	ldr	r2, [r7, #4]
 8001770:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[timerId] = 0;
 8001774:	4a05      	ldr	r2, [pc, #20]	; (800178c <setTimer+0x2c>)
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	2100      	movs	r1, #0
 800177a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800177e:	bf00      	nop
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	bc80      	pop	{r7}
 8001786:	4770      	bx	lr
 8001788:	200002d8 	.word	0x200002d8
 800178c:	20000300 	.word	0x20000300

08001790 <timerRun>:
void timerRun(int timerId){
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
	if(timer_counter[timerId] > 0){
 8001798:	4a0f      	ldr	r2, [pc, #60]	; (80017d8 <timerRun+0x48>)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	dd13      	ble.n	80017cc <timerRun+0x3c>
		timer_counter[timerId]--;
 80017a4:	4a0c      	ldr	r2, [pc, #48]	; (80017d8 <timerRun+0x48>)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017ac:	1e5a      	subs	r2, r3, #1
 80017ae:	490a      	ldr	r1, [pc, #40]	; (80017d8 <timerRun+0x48>)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if(timer_counter[timerId] <= 0){
 80017b6:	4a08      	ldr	r2, [pc, #32]	; (80017d8 <timerRun+0x48>)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	dc04      	bgt.n	80017cc <timerRun+0x3c>
			timer_flag[timerId] = 1;
 80017c2:	4a06      	ldr	r2, [pc, #24]	; (80017dc <timerRun+0x4c>)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2101      	movs	r1, #1
 80017c8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}
	}
}
 80017cc:	bf00      	nop
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bc80      	pop	{r7}
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	200002d8 	.word	0x200002d8
 80017dc:	20000300 	.word	0x20000300

080017e0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b085      	sub	sp, #20
 80017e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80017e6:	4b15      	ldr	r3, [pc, #84]	; (800183c <HAL_MspInit+0x5c>)
 80017e8:	699b      	ldr	r3, [r3, #24]
 80017ea:	4a14      	ldr	r2, [pc, #80]	; (800183c <HAL_MspInit+0x5c>)
 80017ec:	f043 0301 	orr.w	r3, r3, #1
 80017f0:	6193      	str	r3, [r2, #24]
 80017f2:	4b12      	ldr	r3, [pc, #72]	; (800183c <HAL_MspInit+0x5c>)
 80017f4:	699b      	ldr	r3, [r3, #24]
 80017f6:	f003 0301 	and.w	r3, r3, #1
 80017fa:	60bb      	str	r3, [r7, #8]
 80017fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017fe:	4b0f      	ldr	r3, [pc, #60]	; (800183c <HAL_MspInit+0x5c>)
 8001800:	69db      	ldr	r3, [r3, #28]
 8001802:	4a0e      	ldr	r2, [pc, #56]	; (800183c <HAL_MspInit+0x5c>)
 8001804:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001808:	61d3      	str	r3, [r2, #28]
 800180a:	4b0c      	ldr	r3, [pc, #48]	; (800183c <HAL_MspInit+0x5c>)
 800180c:	69db      	ldr	r3, [r3, #28]
 800180e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001812:	607b      	str	r3, [r7, #4]
 8001814:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001816:	4b0a      	ldr	r3, [pc, #40]	; (8001840 <HAL_MspInit+0x60>)
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	60fb      	str	r3, [r7, #12]
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001822:	60fb      	str	r3, [r7, #12]
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800182a:	60fb      	str	r3, [r7, #12]
 800182c:	4a04      	ldr	r2, [pc, #16]	; (8001840 <HAL_MspInit+0x60>)
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001832:	bf00      	nop
 8001834:	3714      	adds	r7, #20
 8001836:	46bd      	mov	sp, r7
 8001838:	bc80      	pop	{r7}
 800183a:	4770      	bx	lr
 800183c:	40021000 	.word	0x40021000
 8001840:	40010000 	.word	0x40010000

08001844 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001854:	d114      	bne.n	8001880 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001856:	4b15      	ldr	r3, [pc, #84]	; (80018ac <HAL_TIM_Base_MspInit+0x68>)
 8001858:	69db      	ldr	r3, [r3, #28]
 800185a:	4a14      	ldr	r2, [pc, #80]	; (80018ac <HAL_TIM_Base_MspInit+0x68>)
 800185c:	f043 0301 	orr.w	r3, r3, #1
 8001860:	61d3      	str	r3, [r2, #28]
 8001862:	4b12      	ldr	r3, [pc, #72]	; (80018ac <HAL_TIM_Base_MspInit+0x68>)
 8001864:	69db      	ldr	r3, [r3, #28]
 8001866:	f003 0301 	and.w	r3, r3, #1
 800186a:	60fb      	str	r3, [r7, #12]
 800186c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800186e:	2200      	movs	r2, #0
 8001870:	2100      	movs	r1, #0
 8001872:	201c      	movs	r0, #28
 8001874:	f000 fad1 	bl	8001e1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001878:	201c      	movs	r0, #28
 800187a:	f000 faea 	bl	8001e52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800187e:	e010      	b.n	80018a2 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a0a      	ldr	r2, [pc, #40]	; (80018b0 <HAL_TIM_Base_MspInit+0x6c>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d10b      	bne.n	80018a2 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800188a:	4b08      	ldr	r3, [pc, #32]	; (80018ac <HAL_TIM_Base_MspInit+0x68>)
 800188c:	69db      	ldr	r3, [r3, #28]
 800188e:	4a07      	ldr	r2, [pc, #28]	; (80018ac <HAL_TIM_Base_MspInit+0x68>)
 8001890:	f043 0302 	orr.w	r3, r3, #2
 8001894:	61d3      	str	r3, [r2, #28]
 8001896:	4b05      	ldr	r3, [pc, #20]	; (80018ac <HAL_TIM_Base_MspInit+0x68>)
 8001898:	69db      	ldr	r3, [r3, #28]
 800189a:	f003 0302 	and.w	r3, r3, #2
 800189e:	60bb      	str	r3, [r7, #8]
 80018a0:	68bb      	ldr	r3, [r7, #8]
}
 80018a2:	bf00      	nop
 80018a4:	3710      	adds	r7, #16
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	40021000 	.word	0x40021000
 80018b0:	40000400 	.word	0x40000400

080018b4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b088      	sub	sp, #32
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018bc:	f107 0310 	add.w	r3, r7, #16
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]
 80018c4:	605a      	str	r2, [r3, #4]
 80018c6:	609a      	str	r2, [r3, #8]
 80018c8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a0f      	ldr	r2, [pc, #60]	; (800190c <HAL_TIM_MspPostInit+0x58>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d117      	bne.n	8001904 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d4:	4b0e      	ldr	r3, [pc, #56]	; (8001910 <HAL_TIM_MspPostInit+0x5c>)
 80018d6:	699b      	ldr	r3, [r3, #24]
 80018d8:	4a0d      	ldr	r2, [pc, #52]	; (8001910 <HAL_TIM_MspPostInit+0x5c>)
 80018da:	f043 0304 	orr.w	r3, r3, #4
 80018de:	6193      	str	r3, [r2, #24]
 80018e0:	4b0b      	ldr	r3, [pc, #44]	; (8001910 <HAL_TIM_MspPostInit+0x5c>)
 80018e2:	699b      	ldr	r3, [r3, #24]
 80018e4:	f003 0304 	and.w	r3, r3, #4
 80018e8:	60fb      	str	r3, [r7, #12]
 80018ea:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80018ec:	2340      	movs	r3, #64	; 0x40
 80018ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f0:	2302      	movs	r3, #2
 80018f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f4:	2302      	movs	r3, #2
 80018f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f8:	f107 0310 	add.w	r3, r7, #16
 80018fc:	4619      	mov	r1, r3
 80018fe:	4805      	ldr	r0, [pc, #20]	; (8001914 <HAL_TIM_MspPostInit+0x60>)
 8001900:	f000 fac2 	bl	8001e88 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001904:	bf00      	nop
 8001906:	3720      	adds	r7, #32
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	40000400 	.word	0x40000400
 8001910:	40021000 	.word	0x40021000
 8001914:	40010800 	.word	0x40010800

08001918 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b088      	sub	sp, #32
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001920:	f107 0310 	add.w	r3, r7, #16
 8001924:	2200      	movs	r2, #0
 8001926:	601a      	str	r2, [r3, #0]
 8001928:	605a      	str	r2, [r3, #4]
 800192a:	609a      	str	r2, [r3, #8]
 800192c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a1b      	ldr	r2, [pc, #108]	; (80019a0 <HAL_UART_MspInit+0x88>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d12f      	bne.n	8001998 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001938:	4b1a      	ldr	r3, [pc, #104]	; (80019a4 <HAL_UART_MspInit+0x8c>)
 800193a:	69db      	ldr	r3, [r3, #28]
 800193c:	4a19      	ldr	r2, [pc, #100]	; (80019a4 <HAL_UART_MspInit+0x8c>)
 800193e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001942:	61d3      	str	r3, [r2, #28]
 8001944:	4b17      	ldr	r3, [pc, #92]	; (80019a4 <HAL_UART_MspInit+0x8c>)
 8001946:	69db      	ldr	r3, [r3, #28]
 8001948:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800194c:	60fb      	str	r3, [r7, #12]
 800194e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001950:	4b14      	ldr	r3, [pc, #80]	; (80019a4 <HAL_UART_MspInit+0x8c>)
 8001952:	699b      	ldr	r3, [r3, #24]
 8001954:	4a13      	ldr	r2, [pc, #76]	; (80019a4 <HAL_UART_MspInit+0x8c>)
 8001956:	f043 0304 	orr.w	r3, r3, #4
 800195a:	6193      	str	r3, [r2, #24]
 800195c:	4b11      	ldr	r3, [pc, #68]	; (80019a4 <HAL_UART_MspInit+0x8c>)
 800195e:	699b      	ldr	r3, [r3, #24]
 8001960:	f003 0304 	and.w	r3, r3, #4
 8001964:	60bb      	str	r3, [r7, #8]
 8001966:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001968:	2304      	movs	r3, #4
 800196a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800196c:	2302      	movs	r3, #2
 800196e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001970:	2303      	movs	r3, #3
 8001972:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001974:	f107 0310 	add.w	r3, r7, #16
 8001978:	4619      	mov	r1, r3
 800197a:	480b      	ldr	r0, [pc, #44]	; (80019a8 <HAL_UART_MspInit+0x90>)
 800197c:	f000 fa84 	bl	8001e88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001980:	2308      	movs	r3, #8
 8001982:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001984:	2300      	movs	r3, #0
 8001986:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001988:	2300      	movs	r3, #0
 800198a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800198c:	f107 0310 	add.w	r3, r7, #16
 8001990:	4619      	mov	r1, r3
 8001992:	4805      	ldr	r0, [pc, #20]	; (80019a8 <HAL_UART_MspInit+0x90>)
 8001994:	f000 fa78 	bl	8001e88 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001998:	bf00      	nop
 800199a:	3720      	adds	r7, #32
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	40004400 	.word	0x40004400
 80019a4:	40021000 	.word	0x40021000
 80019a8:	40010800 	.word	0x40010800

080019ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019b0:	e7fe      	b.n	80019b0 <NMI_Handler+0x4>

080019b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019b2:	b480      	push	{r7}
 80019b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019b6:	e7fe      	b.n	80019b6 <HardFault_Handler+0x4>

080019b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019bc:	e7fe      	b.n	80019bc <MemManage_Handler+0x4>

080019be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019be:	b480      	push	{r7}
 80019c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019c2:	e7fe      	b.n	80019c2 <BusFault_Handler+0x4>

080019c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019c8:	e7fe      	b.n	80019c8 <UsageFault_Handler+0x4>

080019ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019ca:	b480      	push	{r7}
 80019cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019ce:	bf00      	nop
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bc80      	pop	{r7}
 80019d4:	4770      	bx	lr

080019d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019d6:	b480      	push	{r7}
 80019d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019da:	bf00      	nop
 80019dc:	46bd      	mov	sp, r7
 80019de:	bc80      	pop	{r7}
 80019e0:	4770      	bx	lr

080019e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019e2:	b480      	push	{r7}
 80019e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019e6:	bf00      	nop
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bc80      	pop	{r7}
 80019ec:	4770      	bx	lr

080019ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019ee:	b580      	push	{r7, lr}
 80019f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019f2:	f000 f91f 	bl	8001c34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019f6:	bf00      	nop
 80019f8:	bd80      	pop	{r7, pc}
	...

080019fc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a00:	4802      	ldr	r0, [pc, #8]	; (8001a0c <TIM2_IRQHandler+0x10>)
 8001a02:	f001 f94f 	bl	8002ca4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a06:	bf00      	nop
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	20000130 	.word	0x20000130

08001a10 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b086      	sub	sp, #24
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	60f8      	str	r0, [r7, #12]
 8001a18:	60b9      	str	r1, [r7, #8]
 8001a1a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	617b      	str	r3, [r7, #20]
 8001a20:	e00a      	b.n	8001a38 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a22:	f3af 8000 	nop.w
 8001a26:	4601      	mov	r1, r0
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	1c5a      	adds	r2, r3, #1
 8001a2c:	60ba      	str	r2, [r7, #8]
 8001a2e:	b2ca      	uxtb	r2, r1
 8001a30:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	3301      	adds	r3, #1
 8001a36:	617b      	str	r3, [r7, #20]
 8001a38:	697a      	ldr	r2, [r7, #20]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	dbf0      	blt.n	8001a22 <_read+0x12>
	}

return len;
 8001a40:	687b      	ldr	r3, [r7, #4]
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3718      	adds	r7, #24
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b086      	sub	sp, #24
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	60f8      	str	r0, [r7, #12]
 8001a52:	60b9      	str	r1, [r7, #8]
 8001a54:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a56:	2300      	movs	r3, #0
 8001a58:	617b      	str	r3, [r7, #20]
 8001a5a:	e009      	b.n	8001a70 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	1c5a      	adds	r2, r3, #1
 8001a60:	60ba      	str	r2, [r7, #8]
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7ff f899 	bl	8000b9c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	3301      	adds	r3, #1
 8001a6e:	617b      	str	r3, [r7, #20]
 8001a70:	697a      	ldr	r2, [r7, #20]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	dbf1      	blt.n	8001a5c <_write+0x12>
	}
	return len;
 8001a78:	687b      	ldr	r3, [r7, #4]
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3718      	adds	r7, #24
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}

08001a82 <_close>:

int _close(int file)
{
 8001a82:	b480      	push	{r7}
 8001a84:	b083      	sub	sp, #12
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	6078      	str	r0, [r7, #4]
	return -1;
 8001a8a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	370c      	adds	r7, #12
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bc80      	pop	{r7}
 8001a96:	4770      	bx	lr

08001a98 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001aa8:	605a      	str	r2, [r3, #4]
	return 0;
 8001aaa:	2300      	movs	r3, #0
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	370c      	adds	r7, #12
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bc80      	pop	{r7}
 8001ab4:	4770      	bx	lr

08001ab6 <_isatty>:

int _isatty(int file)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	b083      	sub	sp, #12
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
	return 1;
 8001abe:	2301      	movs	r3, #1
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	370c      	adds	r7, #12
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bc80      	pop	{r7}
 8001ac8:	4770      	bx	lr

08001aca <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001aca:	b480      	push	{r7}
 8001acc:	b085      	sub	sp, #20
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	60f8      	str	r0, [r7, #12]
 8001ad2:	60b9      	str	r1, [r7, #8]
 8001ad4:	607a      	str	r2, [r7, #4]
	return 0;
 8001ad6:	2300      	movs	r3, #0
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3714      	adds	r7, #20
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bc80      	pop	{r7}
 8001ae0:	4770      	bx	lr
	...

08001ae4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b086      	sub	sp, #24
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001aec:	4a14      	ldr	r2, [pc, #80]	; (8001b40 <_sbrk+0x5c>)
 8001aee:	4b15      	ldr	r3, [pc, #84]	; (8001b44 <_sbrk+0x60>)
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001af8:	4b13      	ldr	r3, [pc, #76]	; (8001b48 <_sbrk+0x64>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d102      	bne.n	8001b06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b00:	4b11      	ldr	r3, [pc, #68]	; (8001b48 <_sbrk+0x64>)
 8001b02:	4a12      	ldr	r2, [pc, #72]	; (8001b4c <_sbrk+0x68>)
 8001b04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b06:	4b10      	ldr	r3, [pc, #64]	; (8001b48 <_sbrk+0x64>)
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4413      	add	r3, r2
 8001b0e:	693a      	ldr	r2, [r7, #16]
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d207      	bcs.n	8001b24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b14:	f002 faa4 	bl	8004060 <__errno>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	220c      	movs	r2, #12
 8001b1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b1e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b22:	e009      	b.n	8001b38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b24:	4b08      	ldr	r3, [pc, #32]	; (8001b48 <_sbrk+0x64>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b2a:	4b07      	ldr	r3, [pc, #28]	; (8001b48 <_sbrk+0x64>)
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4413      	add	r3, r2
 8001b32:	4a05      	ldr	r2, [pc, #20]	; (8001b48 <_sbrk+0x64>)
 8001b34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b36:	68fb      	ldr	r3, [r7, #12]
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3718      	adds	r7, #24
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	20005000 	.word	0x20005000
 8001b44:	00000400 	.word	0x00000400
 8001b48:	20000328 	.word	0x20000328
 8001b4c:	20000480 	.word	0x20000480

08001b50 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b54:	bf00      	nop
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bc80      	pop	{r7}
 8001b5a:	4770      	bx	lr

08001b5c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b5c:	f7ff fff8 	bl	8001b50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b60:	480b      	ldr	r0, [pc, #44]	; (8001b90 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001b62:	490c      	ldr	r1, [pc, #48]	; (8001b94 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001b64:	4a0c      	ldr	r2, [pc, #48]	; (8001b98 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001b66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b68:	e002      	b.n	8001b70 <LoopCopyDataInit>

08001b6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b6e:	3304      	adds	r3, #4

08001b70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b74:	d3f9      	bcc.n	8001b6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b76:	4a09      	ldr	r2, [pc, #36]	; (8001b9c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001b78:	4c09      	ldr	r4, [pc, #36]	; (8001ba0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b7c:	e001      	b.n	8001b82 <LoopFillZerobss>

08001b7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b80:	3204      	adds	r2, #4

08001b82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b84:	d3fb      	bcc.n	8001b7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b86:	f002 fa71 	bl	800406c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b8a:	f7ff f96f 	bl	8000e6c <main>
  bx lr
 8001b8e:	4770      	bx	lr
  ldr r0, =_sdata
 8001b90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b94:	200000e0 	.word	0x200000e0
  ldr r2, =_sidata
 8001b98:	08004bf8 	.word	0x08004bf8
  ldr r2, =_sbss
 8001b9c:	200000e0 	.word	0x200000e0
  ldr r4, =_ebss
 8001ba0:	2000047c 	.word	0x2000047c

08001ba4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ba4:	e7fe      	b.n	8001ba4 <ADC1_2_IRQHandler>
	...

08001ba8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bac:	4b08      	ldr	r3, [pc, #32]	; (8001bd0 <HAL_Init+0x28>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a07      	ldr	r2, [pc, #28]	; (8001bd0 <HAL_Init+0x28>)
 8001bb2:	f043 0310 	orr.w	r3, r3, #16
 8001bb6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bb8:	2003      	movs	r0, #3
 8001bba:	f000 f923 	bl	8001e04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bbe:	200f      	movs	r0, #15
 8001bc0:	f000 f808 	bl	8001bd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bc4:	f7ff fe0c 	bl	80017e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bc8:	2300      	movs	r3, #0
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	40022000 	.word	0x40022000

08001bd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bdc:	4b12      	ldr	r3, [pc, #72]	; (8001c28 <HAL_InitTick+0x54>)
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	4b12      	ldr	r3, [pc, #72]	; (8001c2c <HAL_InitTick+0x58>)
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	4619      	mov	r1, r3
 8001be6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bea:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f000 f93b 	bl	8001e6e <HAL_SYSTICK_Config>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e00e      	b.n	8001c20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2b0f      	cmp	r3, #15
 8001c06:	d80a      	bhi.n	8001c1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c08:	2200      	movs	r2, #0
 8001c0a:	6879      	ldr	r1, [r7, #4]
 8001c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c10:	f000 f903 	bl	8001e1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c14:	4a06      	ldr	r2, [pc, #24]	; (8001c30 <HAL_InitTick+0x5c>)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	e000      	b.n	8001c20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3708      	adds	r7, #8
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	20000078 	.word	0x20000078
 8001c2c:	20000080 	.word	0x20000080
 8001c30:	2000007c 	.word	0x2000007c

08001c34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c38:	4b05      	ldr	r3, [pc, #20]	; (8001c50 <HAL_IncTick+0x1c>)
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	4b05      	ldr	r3, [pc, #20]	; (8001c54 <HAL_IncTick+0x20>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4413      	add	r3, r2
 8001c44:	4a03      	ldr	r2, [pc, #12]	; (8001c54 <HAL_IncTick+0x20>)
 8001c46:	6013      	str	r3, [r2, #0]
}
 8001c48:	bf00      	nop
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bc80      	pop	{r7}
 8001c4e:	4770      	bx	lr
 8001c50:	20000080 	.word	0x20000080
 8001c54:	2000032c 	.word	0x2000032c

08001c58 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c5c:	4b02      	ldr	r3, [pc, #8]	; (8001c68 <HAL_GetTick+0x10>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bc80      	pop	{r7}
 8001c66:	4770      	bx	lr
 8001c68:	2000032c 	.word	0x2000032c

08001c6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b085      	sub	sp, #20
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	f003 0307 	and.w	r3, r3, #7
 8001c7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c7c:	4b0c      	ldr	r3, [pc, #48]	; (8001cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c82:	68ba      	ldr	r2, [r7, #8]
 8001c84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c88:	4013      	ands	r3, r2
 8001c8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c9e:	4a04      	ldr	r2, [pc, #16]	; (8001cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	60d3      	str	r3, [r2, #12]
}
 8001ca4:	bf00      	nop
 8001ca6:	3714      	adds	r7, #20
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bc80      	pop	{r7}
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	e000ed00 	.word	0xe000ed00

08001cb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cb8:	4b04      	ldr	r3, [pc, #16]	; (8001ccc <__NVIC_GetPriorityGrouping+0x18>)
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	0a1b      	lsrs	r3, r3, #8
 8001cbe:	f003 0307 	and.w	r3, r3, #7
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bc80      	pop	{r7}
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	e000ed00 	.word	0xe000ed00

08001cd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	db0b      	blt.n	8001cfa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ce2:	79fb      	ldrb	r3, [r7, #7]
 8001ce4:	f003 021f 	and.w	r2, r3, #31
 8001ce8:	4906      	ldr	r1, [pc, #24]	; (8001d04 <__NVIC_EnableIRQ+0x34>)
 8001cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cee:	095b      	lsrs	r3, r3, #5
 8001cf0:	2001      	movs	r0, #1
 8001cf2:	fa00 f202 	lsl.w	r2, r0, r2
 8001cf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cfa:	bf00      	nop
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bc80      	pop	{r7}
 8001d02:	4770      	bx	lr
 8001d04:	e000e100 	.word	0xe000e100

08001d08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	4603      	mov	r3, r0
 8001d10:	6039      	str	r1, [r7, #0]
 8001d12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	db0a      	blt.n	8001d32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	b2da      	uxtb	r2, r3
 8001d20:	490c      	ldr	r1, [pc, #48]	; (8001d54 <__NVIC_SetPriority+0x4c>)
 8001d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d26:	0112      	lsls	r2, r2, #4
 8001d28:	b2d2      	uxtb	r2, r2
 8001d2a:	440b      	add	r3, r1
 8001d2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d30:	e00a      	b.n	8001d48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	b2da      	uxtb	r2, r3
 8001d36:	4908      	ldr	r1, [pc, #32]	; (8001d58 <__NVIC_SetPriority+0x50>)
 8001d38:	79fb      	ldrb	r3, [r7, #7]
 8001d3a:	f003 030f 	and.w	r3, r3, #15
 8001d3e:	3b04      	subs	r3, #4
 8001d40:	0112      	lsls	r2, r2, #4
 8001d42:	b2d2      	uxtb	r2, r2
 8001d44:	440b      	add	r3, r1
 8001d46:	761a      	strb	r2, [r3, #24]
}
 8001d48:	bf00      	nop
 8001d4a:	370c      	adds	r7, #12
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bc80      	pop	{r7}
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	e000e100 	.word	0xe000e100
 8001d58:	e000ed00 	.word	0xe000ed00

08001d5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b089      	sub	sp, #36	; 0x24
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	60f8      	str	r0, [r7, #12]
 8001d64:	60b9      	str	r1, [r7, #8]
 8001d66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	f003 0307 	and.w	r3, r3, #7
 8001d6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	f1c3 0307 	rsb	r3, r3, #7
 8001d76:	2b04      	cmp	r3, #4
 8001d78:	bf28      	it	cs
 8001d7a:	2304      	movcs	r3, #4
 8001d7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	3304      	adds	r3, #4
 8001d82:	2b06      	cmp	r3, #6
 8001d84:	d902      	bls.n	8001d8c <NVIC_EncodePriority+0x30>
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	3b03      	subs	r3, #3
 8001d8a:	e000      	b.n	8001d8e <NVIC_EncodePriority+0x32>
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d90:	f04f 32ff 	mov.w	r2, #4294967295
 8001d94:	69bb      	ldr	r3, [r7, #24]
 8001d96:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9a:	43da      	mvns	r2, r3
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	401a      	ands	r2, r3
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001da4:	f04f 31ff 	mov.w	r1, #4294967295
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	fa01 f303 	lsl.w	r3, r1, r3
 8001dae:	43d9      	mvns	r1, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001db4:	4313      	orrs	r3, r2
         );
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3724      	adds	r7, #36	; 0x24
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bc80      	pop	{r7}
 8001dbe:	4770      	bx	lr

08001dc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	3b01      	subs	r3, #1
 8001dcc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dd0:	d301      	bcc.n	8001dd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e00f      	b.n	8001df6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dd6:	4a0a      	ldr	r2, [pc, #40]	; (8001e00 <SysTick_Config+0x40>)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	3b01      	subs	r3, #1
 8001ddc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dde:	210f      	movs	r1, #15
 8001de0:	f04f 30ff 	mov.w	r0, #4294967295
 8001de4:	f7ff ff90 	bl	8001d08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001de8:	4b05      	ldr	r3, [pc, #20]	; (8001e00 <SysTick_Config+0x40>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dee:	4b04      	ldr	r3, [pc, #16]	; (8001e00 <SysTick_Config+0x40>)
 8001df0:	2207      	movs	r2, #7
 8001df2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001df4:	2300      	movs	r3, #0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	e000e010 	.word	0xe000e010

08001e04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f7ff ff2d 	bl	8001c6c <__NVIC_SetPriorityGrouping>
}
 8001e12:	bf00      	nop
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}

08001e1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	b086      	sub	sp, #24
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	4603      	mov	r3, r0
 8001e22:	60b9      	str	r1, [r7, #8]
 8001e24:	607a      	str	r2, [r7, #4]
 8001e26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e2c:	f7ff ff42 	bl	8001cb4 <__NVIC_GetPriorityGrouping>
 8001e30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	68b9      	ldr	r1, [r7, #8]
 8001e36:	6978      	ldr	r0, [r7, #20]
 8001e38:	f7ff ff90 	bl	8001d5c <NVIC_EncodePriority>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e42:	4611      	mov	r1, r2
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7ff ff5f 	bl	8001d08 <__NVIC_SetPriority>
}
 8001e4a:	bf00      	nop
 8001e4c:	3718      	adds	r7, #24
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b082      	sub	sp, #8
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	4603      	mov	r3, r0
 8001e5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7ff ff35 	bl	8001cd0 <__NVIC_EnableIRQ>
}
 8001e66:	bf00      	nop
 8001e68:	3708      	adds	r7, #8
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}

08001e6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e6e:	b580      	push	{r7, lr}
 8001e70:	b082      	sub	sp, #8
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f7ff ffa2 	bl	8001dc0 <SysTick_Config>
 8001e7c:	4603      	mov	r3, r0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
	...

08001e88 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b08b      	sub	sp, #44	; 0x2c
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e92:	2300      	movs	r3, #0
 8001e94:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e96:	2300      	movs	r3, #0
 8001e98:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e9a:	e169      	b.n	8002170 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	69fa      	ldr	r2, [r7, #28]
 8001eac:	4013      	ands	r3, r2
 8001eae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	f040 8158 	bne.w	800216a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	4a9a      	ldr	r2, [pc, #616]	; (8002128 <HAL_GPIO_Init+0x2a0>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d05e      	beq.n	8001f82 <HAL_GPIO_Init+0xfa>
 8001ec4:	4a98      	ldr	r2, [pc, #608]	; (8002128 <HAL_GPIO_Init+0x2a0>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d875      	bhi.n	8001fb6 <HAL_GPIO_Init+0x12e>
 8001eca:	4a98      	ldr	r2, [pc, #608]	; (800212c <HAL_GPIO_Init+0x2a4>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d058      	beq.n	8001f82 <HAL_GPIO_Init+0xfa>
 8001ed0:	4a96      	ldr	r2, [pc, #600]	; (800212c <HAL_GPIO_Init+0x2a4>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d86f      	bhi.n	8001fb6 <HAL_GPIO_Init+0x12e>
 8001ed6:	4a96      	ldr	r2, [pc, #600]	; (8002130 <HAL_GPIO_Init+0x2a8>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d052      	beq.n	8001f82 <HAL_GPIO_Init+0xfa>
 8001edc:	4a94      	ldr	r2, [pc, #592]	; (8002130 <HAL_GPIO_Init+0x2a8>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d869      	bhi.n	8001fb6 <HAL_GPIO_Init+0x12e>
 8001ee2:	4a94      	ldr	r2, [pc, #592]	; (8002134 <HAL_GPIO_Init+0x2ac>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d04c      	beq.n	8001f82 <HAL_GPIO_Init+0xfa>
 8001ee8:	4a92      	ldr	r2, [pc, #584]	; (8002134 <HAL_GPIO_Init+0x2ac>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d863      	bhi.n	8001fb6 <HAL_GPIO_Init+0x12e>
 8001eee:	4a92      	ldr	r2, [pc, #584]	; (8002138 <HAL_GPIO_Init+0x2b0>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d046      	beq.n	8001f82 <HAL_GPIO_Init+0xfa>
 8001ef4:	4a90      	ldr	r2, [pc, #576]	; (8002138 <HAL_GPIO_Init+0x2b0>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d85d      	bhi.n	8001fb6 <HAL_GPIO_Init+0x12e>
 8001efa:	2b12      	cmp	r3, #18
 8001efc:	d82a      	bhi.n	8001f54 <HAL_GPIO_Init+0xcc>
 8001efe:	2b12      	cmp	r3, #18
 8001f00:	d859      	bhi.n	8001fb6 <HAL_GPIO_Init+0x12e>
 8001f02:	a201      	add	r2, pc, #4	; (adr r2, 8001f08 <HAL_GPIO_Init+0x80>)
 8001f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f08:	08001f83 	.word	0x08001f83
 8001f0c:	08001f5d 	.word	0x08001f5d
 8001f10:	08001f6f 	.word	0x08001f6f
 8001f14:	08001fb1 	.word	0x08001fb1
 8001f18:	08001fb7 	.word	0x08001fb7
 8001f1c:	08001fb7 	.word	0x08001fb7
 8001f20:	08001fb7 	.word	0x08001fb7
 8001f24:	08001fb7 	.word	0x08001fb7
 8001f28:	08001fb7 	.word	0x08001fb7
 8001f2c:	08001fb7 	.word	0x08001fb7
 8001f30:	08001fb7 	.word	0x08001fb7
 8001f34:	08001fb7 	.word	0x08001fb7
 8001f38:	08001fb7 	.word	0x08001fb7
 8001f3c:	08001fb7 	.word	0x08001fb7
 8001f40:	08001fb7 	.word	0x08001fb7
 8001f44:	08001fb7 	.word	0x08001fb7
 8001f48:	08001fb7 	.word	0x08001fb7
 8001f4c:	08001f65 	.word	0x08001f65
 8001f50:	08001f79 	.word	0x08001f79
 8001f54:	4a79      	ldr	r2, [pc, #484]	; (800213c <HAL_GPIO_Init+0x2b4>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d013      	beq.n	8001f82 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f5a:	e02c      	b.n	8001fb6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	623b      	str	r3, [r7, #32]
          break;
 8001f62:	e029      	b.n	8001fb8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	3304      	adds	r3, #4
 8001f6a:	623b      	str	r3, [r7, #32]
          break;
 8001f6c:	e024      	b.n	8001fb8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	3308      	adds	r3, #8
 8001f74:	623b      	str	r3, [r7, #32]
          break;
 8001f76:	e01f      	b.n	8001fb8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	330c      	adds	r3, #12
 8001f7e:	623b      	str	r3, [r7, #32]
          break;
 8001f80:	e01a      	b.n	8001fb8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d102      	bne.n	8001f90 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f8a:	2304      	movs	r3, #4
 8001f8c:	623b      	str	r3, [r7, #32]
          break;
 8001f8e:	e013      	b.n	8001fb8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d105      	bne.n	8001fa4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f98:	2308      	movs	r3, #8
 8001f9a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	69fa      	ldr	r2, [r7, #28]
 8001fa0:	611a      	str	r2, [r3, #16]
          break;
 8001fa2:	e009      	b.n	8001fb8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fa4:	2308      	movs	r3, #8
 8001fa6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	69fa      	ldr	r2, [r7, #28]
 8001fac:	615a      	str	r2, [r3, #20]
          break;
 8001fae:	e003      	b.n	8001fb8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	623b      	str	r3, [r7, #32]
          break;
 8001fb4:	e000      	b.n	8001fb8 <HAL_GPIO_Init+0x130>
          break;
 8001fb6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001fb8:	69bb      	ldr	r3, [r7, #24]
 8001fba:	2bff      	cmp	r3, #255	; 0xff
 8001fbc:	d801      	bhi.n	8001fc2 <HAL_GPIO_Init+0x13a>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	e001      	b.n	8001fc6 <HAL_GPIO_Init+0x13e>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	3304      	adds	r3, #4
 8001fc6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001fc8:	69bb      	ldr	r3, [r7, #24]
 8001fca:	2bff      	cmp	r3, #255	; 0xff
 8001fcc:	d802      	bhi.n	8001fd4 <HAL_GPIO_Init+0x14c>
 8001fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	e002      	b.n	8001fda <HAL_GPIO_Init+0x152>
 8001fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd6:	3b08      	subs	r3, #8
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	210f      	movs	r1, #15
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe8:	43db      	mvns	r3, r3
 8001fea:	401a      	ands	r2, r3
 8001fec:	6a39      	ldr	r1, [r7, #32]
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ff4:	431a      	orrs	r2, r3
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002002:	2b00      	cmp	r3, #0
 8002004:	f000 80b1 	beq.w	800216a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002008:	4b4d      	ldr	r3, [pc, #308]	; (8002140 <HAL_GPIO_Init+0x2b8>)
 800200a:	699b      	ldr	r3, [r3, #24]
 800200c:	4a4c      	ldr	r2, [pc, #304]	; (8002140 <HAL_GPIO_Init+0x2b8>)
 800200e:	f043 0301 	orr.w	r3, r3, #1
 8002012:	6193      	str	r3, [r2, #24]
 8002014:	4b4a      	ldr	r3, [pc, #296]	; (8002140 <HAL_GPIO_Init+0x2b8>)
 8002016:	699b      	ldr	r3, [r3, #24]
 8002018:	f003 0301 	and.w	r3, r3, #1
 800201c:	60bb      	str	r3, [r7, #8]
 800201e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002020:	4a48      	ldr	r2, [pc, #288]	; (8002144 <HAL_GPIO_Init+0x2bc>)
 8002022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002024:	089b      	lsrs	r3, r3, #2
 8002026:	3302      	adds	r3, #2
 8002028:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800202c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800202e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002030:	f003 0303 	and.w	r3, r3, #3
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	220f      	movs	r2, #15
 8002038:	fa02 f303 	lsl.w	r3, r2, r3
 800203c:	43db      	mvns	r3, r3
 800203e:	68fa      	ldr	r2, [r7, #12]
 8002040:	4013      	ands	r3, r2
 8002042:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	4a40      	ldr	r2, [pc, #256]	; (8002148 <HAL_GPIO_Init+0x2c0>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d013      	beq.n	8002074 <HAL_GPIO_Init+0x1ec>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	4a3f      	ldr	r2, [pc, #252]	; (800214c <HAL_GPIO_Init+0x2c4>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d00d      	beq.n	8002070 <HAL_GPIO_Init+0x1e8>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	4a3e      	ldr	r2, [pc, #248]	; (8002150 <HAL_GPIO_Init+0x2c8>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d007      	beq.n	800206c <HAL_GPIO_Init+0x1e4>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	4a3d      	ldr	r2, [pc, #244]	; (8002154 <HAL_GPIO_Init+0x2cc>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d101      	bne.n	8002068 <HAL_GPIO_Init+0x1e0>
 8002064:	2303      	movs	r3, #3
 8002066:	e006      	b.n	8002076 <HAL_GPIO_Init+0x1ee>
 8002068:	2304      	movs	r3, #4
 800206a:	e004      	b.n	8002076 <HAL_GPIO_Init+0x1ee>
 800206c:	2302      	movs	r3, #2
 800206e:	e002      	b.n	8002076 <HAL_GPIO_Init+0x1ee>
 8002070:	2301      	movs	r3, #1
 8002072:	e000      	b.n	8002076 <HAL_GPIO_Init+0x1ee>
 8002074:	2300      	movs	r3, #0
 8002076:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002078:	f002 0203 	and.w	r2, r2, #3
 800207c:	0092      	lsls	r2, r2, #2
 800207e:	4093      	lsls	r3, r2
 8002080:	68fa      	ldr	r2, [r7, #12]
 8002082:	4313      	orrs	r3, r2
 8002084:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002086:	492f      	ldr	r1, [pc, #188]	; (8002144 <HAL_GPIO_Init+0x2bc>)
 8002088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208a:	089b      	lsrs	r3, r3, #2
 800208c:	3302      	adds	r3, #2
 800208e:	68fa      	ldr	r2, [r7, #12]
 8002090:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d006      	beq.n	80020ae <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80020a0:	4b2d      	ldr	r3, [pc, #180]	; (8002158 <HAL_GPIO_Init+0x2d0>)
 80020a2:	689a      	ldr	r2, [r3, #8]
 80020a4:	492c      	ldr	r1, [pc, #176]	; (8002158 <HAL_GPIO_Init+0x2d0>)
 80020a6:	69bb      	ldr	r3, [r7, #24]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	608b      	str	r3, [r1, #8]
 80020ac:	e006      	b.n	80020bc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80020ae:	4b2a      	ldr	r3, [pc, #168]	; (8002158 <HAL_GPIO_Init+0x2d0>)
 80020b0:	689a      	ldr	r2, [r3, #8]
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	43db      	mvns	r3, r3
 80020b6:	4928      	ldr	r1, [pc, #160]	; (8002158 <HAL_GPIO_Init+0x2d0>)
 80020b8:	4013      	ands	r3, r2
 80020ba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d006      	beq.n	80020d6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80020c8:	4b23      	ldr	r3, [pc, #140]	; (8002158 <HAL_GPIO_Init+0x2d0>)
 80020ca:	68da      	ldr	r2, [r3, #12]
 80020cc:	4922      	ldr	r1, [pc, #136]	; (8002158 <HAL_GPIO_Init+0x2d0>)
 80020ce:	69bb      	ldr	r3, [r7, #24]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	60cb      	str	r3, [r1, #12]
 80020d4:	e006      	b.n	80020e4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80020d6:	4b20      	ldr	r3, [pc, #128]	; (8002158 <HAL_GPIO_Init+0x2d0>)
 80020d8:	68da      	ldr	r2, [r3, #12]
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	43db      	mvns	r3, r3
 80020de:	491e      	ldr	r1, [pc, #120]	; (8002158 <HAL_GPIO_Init+0x2d0>)
 80020e0:	4013      	ands	r3, r2
 80020e2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d006      	beq.n	80020fe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80020f0:	4b19      	ldr	r3, [pc, #100]	; (8002158 <HAL_GPIO_Init+0x2d0>)
 80020f2:	685a      	ldr	r2, [r3, #4]
 80020f4:	4918      	ldr	r1, [pc, #96]	; (8002158 <HAL_GPIO_Init+0x2d0>)
 80020f6:	69bb      	ldr	r3, [r7, #24]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	604b      	str	r3, [r1, #4]
 80020fc:	e006      	b.n	800210c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80020fe:	4b16      	ldr	r3, [pc, #88]	; (8002158 <HAL_GPIO_Init+0x2d0>)
 8002100:	685a      	ldr	r2, [r3, #4]
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	43db      	mvns	r3, r3
 8002106:	4914      	ldr	r1, [pc, #80]	; (8002158 <HAL_GPIO_Init+0x2d0>)
 8002108:	4013      	ands	r3, r2
 800210a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002114:	2b00      	cmp	r3, #0
 8002116:	d021      	beq.n	800215c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002118:	4b0f      	ldr	r3, [pc, #60]	; (8002158 <HAL_GPIO_Init+0x2d0>)
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	490e      	ldr	r1, [pc, #56]	; (8002158 <HAL_GPIO_Init+0x2d0>)
 800211e:	69bb      	ldr	r3, [r7, #24]
 8002120:	4313      	orrs	r3, r2
 8002122:	600b      	str	r3, [r1, #0]
 8002124:	e021      	b.n	800216a <HAL_GPIO_Init+0x2e2>
 8002126:	bf00      	nop
 8002128:	10320000 	.word	0x10320000
 800212c:	10310000 	.word	0x10310000
 8002130:	10220000 	.word	0x10220000
 8002134:	10210000 	.word	0x10210000
 8002138:	10120000 	.word	0x10120000
 800213c:	10110000 	.word	0x10110000
 8002140:	40021000 	.word	0x40021000
 8002144:	40010000 	.word	0x40010000
 8002148:	40010800 	.word	0x40010800
 800214c:	40010c00 	.word	0x40010c00
 8002150:	40011000 	.word	0x40011000
 8002154:	40011400 	.word	0x40011400
 8002158:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800215c:	4b0b      	ldr	r3, [pc, #44]	; (800218c <HAL_GPIO_Init+0x304>)
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	69bb      	ldr	r3, [r7, #24]
 8002162:	43db      	mvns	r3, r3
 8002164:	4909      	ldr	r1, [pc, #36]	; (800218c <HAL_GPIO_Init+0x304>)
 8002166:	4013      	ands	r3, r2
 8002168:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800216a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216c:	3301      	adds	r3, #1
 800216e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002176:	fa22 f303 	lsr.w	r3, r2, r3
 800217a:	2b00      	cmp	r3, #0
 800217c:	f47f ae8e 	bne.w	8001e9c <HAL_GPIO_Init+0x14>
  }
}
 8002180:	bf00      	nop
 8002182:	bf00      	nop
 8002184:	372c      	adds	r7, #44	; 0x2c
 8002186:	46bd      	mov	sp, r7
 8002188:	bc80      	pop	{r7}
 800218a:	4770      	bx	lr
 800218c:	40010400 	.word	0x40010400

08002190 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002190:	b480      	push	{r7}
 8002192:	b085      	sub	sp, #20
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	460b      	mov	r3, r1
 800219a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	689a      	ldr	r2, [r3, #8]
 80021a0:	887b      	ldrh	r3, [r7, #2]
 80021a2:	4013      	ands	r3, r2
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d002      	beq.n	80021ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80021a8:	2301      	movs	r3, #1
 80021aa:	73fb      	strb	r3, [r7, #15]
 80021ac:	e001      	b.n	80021b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021ae:	2300      	movs	r3, #0
 80021b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80021b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3714      	adds	r7, #20
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bc80      	pop	{r7}
 80021bc:	4770      	bx	lr

080021be <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021be:	b480      	push	{r7}
 80021c0:	b083      	sub	sp, #12
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	6078      	str	r0, [r7, #4]
 80021c6:	460b      	mov	r3, r1
 80021c8:	807b      	strh	r3, [r7, #2]
 80021ca:	4613      	mov	r3, r2
 80021cc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021ce:	787b      	ldrb	r3, [r7, #1]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d003      	beq.n	80021dc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021d4:	887a      	ldrh	r2, [r7, #2]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80021da:	e003      	b.n	80021e4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80021dc:	887b      	ldrh	r3, [r7, #2]
 80021de:	041a      	lsls	r2, r3, #16
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	611a      	str	r2, [r3, #16]
}
 80021e4:	bf00      	nop
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bc80      	pop	{r7}
 80021ec:	4770      	bx	lr
	...

080021f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b086      	sub	sp, #24
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d101      	bne.n	8002202 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e272      	b.n	80026e8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0301 	and.w	r3, r3, #1
 800220a:	2b00      	cmp	r3, #0
 800220c:	f000 8087 	beq.w	800231e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002210:	4b92      	ldr	r3, [pc, #584]	; (800245c <HAL_RCC_OscConfig+0x26c>)
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f003 030c 	and.w	r3, r3, #12
 8002218:	2b04      	cmp	r3, #4
 800221a:	d00c      	beq.n	8002236 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800221c:	4b8f      	ldr	r3, [pc, #572]	; (800245c <HAL_RCC_OscConfig+0x26c>)
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f003 030c 	and.w	r3, r3, #12
 8002224:	2b08      	cmp	r3, #8
 8002226:	d112      	bne.n	800224e <HAL_RCC_OscConfig+0x5e>
 8002228:	4b8c      	ldr	r3, [pc, #560]	; (800245c <HAL_RCC_OscConfig+0x26c>)
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002230:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002234:	d10b      	bne.n	800224e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002236:	4b89      	ldr	r3, [pc, #548]	; (800245c <HAL_RCC_OscConfig+0x26c>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d06c      	beq.n	800231c <HAL_RCC_OscConfig+0x12c>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d168      	bne.n	800231c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e24c      	b.n	80026e8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002256:	d106      	bne.n	8002266 <HAL_RCC_OscConfig+0x76>
 8002258:	4b80      	ldr	r3, [pc, #512]	; (800245c <HAL_RCC_OscConfig+0x26c>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a7f      	ldr	r2, [pc, #508]	; (800245c <HAL_RCC_OscConfig+0x26c>)
 800225e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002262:	6013      	str	r3, [r2, #0]
 8002264:	e02e      	b.n	80022c4 <HAL_RCC_OscConfig+0xd4>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d10c      	bne.n	8002288 <HAL_RCC_OscConfig+0x98>
 800226e:	4b7b      	ldr	r3, [pc, #492]	; (800245c <HAL_RCC_OscConfig+0x26c>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a7a      	ldr	r2, [pc, #488]	; (800245c <HAL_RCC_OscConfig+0x26c>)
 8002274:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002278:	6013      	str	r3, [r2, #0]
 800227a:	4b78      	ldr	r3, [pc, #480]	; (800245c <HAL_RCC_OscConfig+0x26c>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a77      	ldr	r2, [pc, #476]	; (800245c <HAL_RCC_OscConfig+0x26c>)
 8002280:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002284:	6013      	str	r3, [r2, #0]
 8002286:	e01d      	b.n	80022c4 <HAL_RCC_OscConfig+0xd4>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002290:	d10c      	bne.n	80022ac <HAL_RCC_OscConfig+0xbc>
 8002292:	4b72      	ldr	r3, [pc, #456]	; (800245c <HAL_RCC_OscConfig+0x26c>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a71      	ldr	r2, [pc, #452]	; (800245c <HAL_RCC_OscConfig+0x26c>)
 8002298:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800229c:	6013      	str	r3, [r2, #0]
 800229e:	4b6f      	ldr	r3, [pc, #444]	; (800245c <HAL_RCC_OscConfig+0x26c>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a6e      	ldr	r2, [pc, #440]	; (800245c <HAL_RCC_OscConfig+0x26c>)
 80022a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022a8:	6013      	str	r3, [r2, #0]
 80022aa:	e00b      	b.n	80022c4 <HAL_RCC_OscConfig+0xd4>
 80022ac:	4b6b      	ldr	r3, [pc, #428]	; (800245c <HAL_RCC_OscConfig+0x26c>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a6a      	ldr	r2, [pc, #424]	; (800245c <HAL_RCC_OscConfig+0x26c>)
 80022b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022b6:	6013      	str	r3, [r2, #0]
 80022b8:	4b68      	ldr	r3, [pc, #416]	; (800245c <HAL_RCC_OscConfig+0x26c>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a67      	ldr	r2, [pc, #412]	; (800245c <HAL_RCC_OscConfig+0x26c>)
 80022be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022c2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d013      	beq.n	80022f4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022cc:	f7ff fcc4 	bl	8001c58 <HAL_GetTick>
 80022d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022d2:	e008      	b.n	80022e6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022d4:	f7ff fcc0 	bl	8001c58 <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	2b64      	cmp	r3, #100	; 0x64
 80022e0:	d901      	bls.n	80022e6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e200      	b.n	80026e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022e6:	4b5d      	ldr	r3, [pc, #372]	; (800245c <HAL_RCC_OscConfig+0x26c>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d0f0      	beq.n	80022d4 <HAL_RCC_OscConfig+0xe4>
 80022f2:	e014      	b.n	800231e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f4:	f7ff fcb0 	bl	8001c58 <HAL_GetTick>
 80022f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022fa:	e008      	b.n	800230e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022fc:	f7ff fcac 	bl	8001c58 <HAL_GetTick>
 8002300:	4602      	mov	r2, r0
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	2b64      	cmp	r3, #100	; 0x64
 8002308:	d901      	bls.n	800230e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800230a:	2303      	movs	r3, #3
 800230c:	e1ec      	b.n	80026e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800230e:	4b53      	ldr	r3, [pc, #332]	; (800245c <HAL_RCC_OscConfig+0x26c>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d1f0      	bne.n	80022fc <HAL_RCC_OscConfig+0x10c>
 800231a:	e000      	b.n	800231e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800231c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0302 	and.w	r3, r3, #2
 8002326:	2b00      	cmp	r3, #0
 8002328:	d063      	beq.n	80023f2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800232a:	4b4c      	ldr	r3, [pc, #304]	; (800245c <HAL_RCC_OscConfig+0x26c>)
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f003 030c 	and.w	r3, r3, #12
 8002332:	2b00      	cmp	r3, #0
 8002334:	d00b      	beq.n	800234e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002336:	4b49      	ldr	r3, [pc, #292]	; (800245c <HAL_RCC_OscConfig+0x26c>)
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	f003 030c 	and.w	r3, r3, #12
 800233e:	2b08      	cmp	r3, #8
 8002340:	d11c      	bne.n	800237c <HAL_RCC_OscConfig+0x18c>
 8002342:	4b46      	ldr	r3, [pc, #280]	; (800245c <HAL_RCC_OscConfig+0x26c>)
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d116      	bne.n	800237c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800234e:	4b43      	ldr	r3, [pc, #268]	; (800245c <HAL_RCC_OscConfig+0x26c>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0302 	and.w	r3, r3, #2
 8002356:	2b00      	cmp	r3, #0
 8002358:	d005      	beq.n	8002366 <HAL_RCC_OscConfig+0x176>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	691b      	ldr	r3, [r3, #16]
 800235e:	2b01      	cmp	r3, #1
 8002360:	d001      	beq.n	8002366 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e1c0      	b.n	80026e8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002366:	4b3d      	ldr	r3, [pc, #244]	; (800245c <HAL_RCC_OscConfig+0x26c>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	695b      	ldr	r3, [r3, #20]
 8002372:	00db      	lsls	r3, r3, #3
 8002374:	4939      	ldr	r1, [pc, #228]	; (800245c <HAL_RCC_OscConfig+0x26c>)
 8002376:	4313      	orrs	r3, r2
 8002378:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800237a:	e03a      	b.n	80023f2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	691b      	ldr	r3, [r3, #16]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d020      	beq.n	80023c6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002384:	4b36      	ldr	r3, [pc, #216]	; (8002460 <HAL_RCC_OscConfig+0x270>)
 8002386:	2201      	movs	r2, #1
 8002388:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800238a:	f7ff fc65 	bl	8001c58 <HAL_GetTick>
 800238e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002390:	e008      	b.n	80023a4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002392:	f7ff fc61 	bl	8001c58 <HAL_GetTick>
 8002396:	4602      	mov	r2, r0
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	2b02      	cmp	r3, #2
 800239e:	d901      	bls.n	80023a4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80023a0:	2303      	movs	r3, #3
 80023a2:	e1a1      	b.n	80026e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023a4:	4b2d      	ldr	r3, [pc, #180]	; (800245c <HAL_RCC_OscConfig+0x26c>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0302 	and.w	r3, r3, #2
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d0f0      	beq.n	8002392 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023b0:	4b2a      	ldr	r3, [pc, #168]	; (800245c <HAL_RCC_OscConfig+0x26c>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	695b      	ldr	r3, [r3, #20]
 80023bc:	00db      	lsls	r3, r3, #3
 80023be:	4927      	ldr	r1, [pc, #156]	; (800245c <HAL_RCC_OscConfig+0x26c>)
 80023c0:	4313      	orrs	r3, r2
 80023c2:	600b      	str	r3, [r1, #0]
 80023c4:	e015      	b.n	80023f2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023c6:	4b26      	ldr	r3, [pc, #152]	; (8002460 <HAL_RCC_OscConfig+0x270>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023cc:	f7ff fc44 	bl	8001c58 <HAL_GetTick>
 80023d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023d2:	e008      	b.n	80023e6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023d4:	f7ff fc40 	bl	8001c58 <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d901      	bls.n	80023e6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	e180      	b.n	80026e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023e6:	4b1d      	ldr	r3, [pc, #116]	; (800245c <HAL_RCC_OscConfig+0x26c>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0302 	and.w	r3, r3, #2
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d1f0      	bne.n	80023d4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0308 	and.w	r3, r3, #8
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d03a      	beq.n	8002474 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	699b      	ldr	r3, [r3, #24]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d019      	beq.n	800243a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002406:	4b17      	ldr	r3, [pc, #92]	; (8002464 <HAL_RCC_OscConfig+0x274>)
 8002408:	2201      	movs	r2, #1
 800240a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800240c:	f7ff fc24 	bl	8001c58 <HAL_GetTick>
 8002410:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002412:	e008      	b.n	8002426 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002414:	f7ff fc20 	bl	8001c58 <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	2b02      	cmp	r3, #2
 8002420:	d901      	bls.n	8002426 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e160      	b.n	80026e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002426:	4b0d      	ldr	r3, [pc, #52]	; (800245c <HAL_RCC_OscConfig+0x26c>)
 8002428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800242a:	f003 0302 	and.w	r3, r3, #2
 800242e:	2b00      	cmp	r3, #0
 8002430:	d0f0      	beq.n	8002414 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002432:	2001      	movs	r0, #1
 8002434:	f000 face 	bl	80029d4 <RCC_Delay>
 8002438:	e01c      	b.n	8002474 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800243a:	4b0a      	ldr	r3, [pc, #40]	; (8002464 <HAL_RCC_OscConfig+0x274>)
 800243c:	2200      	movs	r2, #0
 800243e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002440:	f7ff fc0a 	bl	8001c58 <HAL_GetTick>
 8002444:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002446:	e00f      	b.n	8002468 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002448:	f7ff fc06 	bl	8001c58 <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	2b02      	cmp	r3, #2
 8002454:	d908      	bls.n	8002468 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e146      	b.n	80026e8 <HAL_RCC_OscConfig+0x4f8>
 800245a:	bf00      	nop
 800245c:	40021000 	.word	0x40021000
 8002460:	42420000 	.word	0x42420000
 8002464:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002468:	4b92      	ldr	r3, [pc, #584]	; (80026b4 <HAL_RCC_OscConfig+0x4c4>)
 800246a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800246c:	f003 0302 	and.w	r3, r3, #2
 8002470:	2b00      	cmp	r3, #0
 8002472:	d1e9      	bne.n	8002448 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0304 	and.w	r3, r3, #4
 800247c:	2b00      	cmp	r3, #0
 800247e:	f000 80a6 	beq.w	80025ce <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002482:	2300      	movs	r3, #0
 8002484:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002486:	4b8b      	ldr	r3, [pc, #556]	; (80026b4 <HAL_RCC_OscConfig+0x4c4>)
 8002488:	69db      	ldr	r3, [r3, #28]
 800248a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d10d      	bne.n	80024ae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002492:	4b88      	ldr	r3, [pc, #544]	; (80026b4 <HAL_RCC_OscConfig+0x4c4>)
 8002494:	69db      	ldr	r3, [r3, #28]
 8002496:	4a87      	ldr	r2, [pc, #540]	; (80026b4 <HAL_RCC_OscConfig+0x4c4>)
 8002498:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800249c:	61d3      	str	r3, [r2, #28]
 800249e:	4b85      	ldr	r3, [pc, #532]	; (80026b4 <HAL_RCC_OscConfig+0x4c4>)
 80024a0:	69db      	ldr	r3, [r3, #28]
 80024a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024a6:	60bb      	str	r3, [r7, #8]
 80024a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024aa:	2301      	movs	r3, #1
 80024ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024ae:	4b82      	ldr	r3, [pc, #520]	; (80026b8 <HAL_RCC_OscConfig+0x4c8>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d118      	bne.n	80024ec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024ba:	4b7f      	ldr	r3, [pc, #508]	; (80026b8 <HAL_RCC_OscConfig+0x4c8>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a7e      	ldr	r2, [pc, #504]	; (80026b8 <HAL_RCC_OscConfig+0x4c8>)
 80024c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024c6:	f7ff fbc7 	bl	8001c58 <HAL_GetTick>
 80024ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024cc:	e008      	b.n	80024e0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024ce:	f7ff fbc3 	bl	8001c58 <HAL_GetTick>
 80024d2:	4602      	mov	r2, r0
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	2b64      	cmp	r3, #100	; 0x64
 80024da:	d901      	bls.n	80024e0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80024dc:	2303      	movs	r3, #3
 80024de:	e103      	b.n	80026e8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024e0:	4b75      	ldr	r3, [pc, #468]	; (80026b8 <HAL_RCC_OscConfig+0x4c8>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d0f0      	beq.n	80024ce <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d106      	bne.n	8002502 <HAL_RCC_OscConfig+0x312>
 80024f4:	4b6f      	ldr	r3, [pc, #444]	; (80026b4 <HAL_RCC_OscConfig+0x4c4>)
 80024f6:	6a1b      	ldr	r3, [r3, #32]
 80024f8:	4a6e      	ldr	r2, [pc, #440]	; (80026b4 <HAL_RCC_OscConfig+0x4c4>)
 80024fa:	f043 0301 	orr.w	r3, r3, #1
 80024fe:	6213      	str	r3, [r2, #32]
 8002500:	e02d      	b.n	800255e <HAL_RCC_OscConfig+0x36e>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d10c      	bne.n	8002524 <HAL_RCC_OscConfig+0x334>
 800250a:	4b6a      	ldr	r3, [pc, #424]	; (80026b4 <HAL_RCC_OscConfig+0x4c4>)
 800250c:	6a1b      	ldr	r3, [r3, #32]
 800250e:	4a69      	ldr	r2, [pc, #420]	; (80026b4 <HAL_RCC_OscConfig+0x4c4>)
 8002510:	f023 0301 	bic.w	r3, r3, #1
 8002514:	6213      	str	r3, [r2, #32]
 8002516:	4b67      	ldr	r3, [pc, #412]	; (80026b4 <HAL_RCC_OscConfig+0x4c4>)
 8002518:	6a1b      	ldr	r3, [r3, #32]
 800251a:	4a66      	ldr	r2, [pc, #408]	; (80026b4 <HAL_RCC_OscConfig+0x4c4>)
 800251c:	f023 0304 	bic.w	r3, r3, #4
 8002520:	6213      	str	r3, [r2, #32]
 8002522:	e01c      	b.n	800255e <HAL_RCC_OscConfig+0x36e>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	2b05      	cmp	r3, #5
 800252a:	d10c      	bne.n	8002546 <HAL_RCC_OscConfig+0x356>
 800252c:	4b61      	ldr	r3, [pc, #388]	; (80026b4 <HAL_RCC_OscConfig+0x4c4>)
 800252e:	6a1b      	ldr	r3, [r3, #32]
 8002530:	4a60      	ldr	r2, [pc, #384]	; (80026b4 <HAL_RCC_OscConfig+0x4c4>)
 8002532:	f043 0304 	orr.w	r3, r3, #4
 8002536:	6213      	str	r3, [r2, #32]
 8002538:	4b5e      	ldr	r3, [pc, #376]	; (80026b4 <HAL_RCC_OscConfig+0x4c4>)
 800253a:	6a1b      	ldr	r3, [r3, #32]
 800253c:	4a5d      	ldr	r2, [pc, #372]	; (80026b4 <HAL_RCC_OscConfig+0x4c4>)
 800253e:	f043 0301 	orr.w	r3, r3, #1
 8002542:	6213      	str	r3, [r2, #32]
 8002544:	e00b      	b.n	800255e <HAL_RCC_OscConfig+0x36e>
 8002546:	4b5b      	ldr	r3, [pc, #364]	; (80026b4 <HAL_RCC_OscConfig+0x4c4>)
 8002548:	6a1b      	ldr	r3, [r3, #32]
 800254a:	4a5a      	ldr	r2, [pc, #360]	; (80026b4 <HAL_RCC_OscConfig+0x4c4>)
 800254c:	f023 0301 	bic.w	r3, r3, #1
 8002550:	6213      	str	r3, [r2, #32]
 8002552:	4b58      	ldr	r3, [pc, #352]	; (80026b4 <HAL_RCC_OscConfig+0x4c4>)
 8002554:	6a1b      	ldr	r3, [r3, #32]
 8002556:	4a57      	ldr	r2, [pc, #348]	; (80026b4 <HAL_RCC_OscConfig+0x4c4>)
 8002558:	f023 0304 	bic.w	r3, r3, #4
 800255c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	68db      	ldr	r3, [r3, #12]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d015      	beq.n	8002592 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002566:	f7ff fb77 	bl	8001c58 <HAL_GetTick>
 800256a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800256c:	e00a      	b.n	8002584 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800256e:	f7ff fb73 	bl	8001c58 <HAL_GetTick>
 8002572:	4602      	mov	r2, r0
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	f241 3288 	movw	r2, #5000	; 0x1388
 800257c:	4293      	cmp	r3, r2
 800257e:	d901      	bls.n	8002584 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002580:	2303      	movs	r3, #3
 8002582:	e0b1      	b.n	80026e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002584:	4b4b      	ldr	r3, [pc, #300]	; (80026b4 <HAL_RCC_OscConfig+0x4c4>)
 8002586:	6a1b      	ldr	r3, [r3, #32]
 8002588:	f003 0302 	and.w	r3, r3, #2
 800258c:	2b00      	cmp	r3, #0
 800258e:	d0ee      	beq.n	800256e <HAL_RCC_OscConfig+0x37e>
 8002590:	e014      	b.n	80025bc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002592:	f7ff fb61 	bl	8001c58 <HAL_GetTick>
 8002596:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002598:	e00a      	b.n	80025b0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800259a:	f7ff fb5d 	bl	8001c58 <HAL_GetTick>
 800259e:	4602      	mov	r2, r0
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d901      	bls.n	80025b0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80025ac:	2303      	movs	r3, #3
 80025ae:	e09b      	b.n	80026e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025b0:	4b40      	ldr	r3, [pc, #256]	; (80026b4 <HAL_RCC_OscConfig+0x4c4>)
 80025b2:	6a1b      	ldr	r3, [r3, #32]
 80025b4:	f003 0302 	and.w	r3, r3, #2
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d1ee      	bne.n	800259a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80025bc:	7dfb      	ldrb	r3, [r7, #23]
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d105      	bne.n	80025ce <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025c2:	4b3c      	ldr	r3, [pc, #240]	; (80026b4 <HAL_RCC_OscConfig+0x4c4>)
 80025c4:	69db      	ldr	r3, [r3, #28]
 80025c6:	4a3b      	ldr	r2, [pc, #236]	; (80026b4 <HAL_RCC_OscConfig+0x4c4>)
 80025c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025cc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	69db      	ldr	r3, [r3, #28]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	f000 8087 	beq.w	80026e6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025d8:	4b36      	ldr	r3, [pc, #216]	; (80026b4 <HAL_RCC_OscConfig+0x4c4>)
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f003 030c 	and.w	r3, r3, #12
 80025e0:	2b08      	cmp	r3, #8
 80025e2:	d061      	beq.n	80026a8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	69db      	ldr	r3, [r3, #28]
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d146      	bne.n	800267a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025ec:	4b33      	ldr	r3, [pc, #204]	; (80026bc <HAL_RCC_OscConfig+0x4cc>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025f2:	f7ff fb31 	bl	8001c58 <HAL_GetTick>
 80025f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025f8:	e008      	b.n	800260c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025fa:	f7ff fb2d 	bl	8001c58 <HAL_GetTick>
 80025fe:	4602      	mov	r2, r0
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	2b02      	cmp	r3, #2
 8002606:	d901      	bls.n	800260c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002608:	2303      	movs	r3, #3
 800260a:	e06d      	b.n	80026e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800260c:	4b29      	ldr	r3, [pc, #164]	; (80026b4 <HAL_RCC_OscConfig+0x4c4>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002614:	2b00      	cmp	r3, #0
 8002616:	d1f0      	bne.n	80025fa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6a1b      	ldr	r3, [r3, #32]
 800261c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002620:	d108      	bne.n	8002634 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002622:	4b24      	ldr	r3, [pc, #144]	; (80026b4 <HAL_RCC_OscConfig+0x4c4>)
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	4921      	ldr	r1, [pc, #132]	; (80026b4 <HAL_RCC_OscConfig+0x4c4>)
 8002630:	4313      	orrs	r3, r2
 8002632:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002634:	4b1f      	ldr	r3, [pc, #124]	; (80026b4 <HAL_RCC_OscConfig+0x4c4>)
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6a19      	ldr	r1, [r3, #32]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002644:	430b      	orrs	r3, r1
 8002646:	491b      	ldr	r1, [pc, #108]	; (80026b4 <HAL_RCC_OscConfig+0x4c4>)
 8002648:	4313      	orrs	r3, r2
 800264a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800264c:	4b1b      	ldr	r3, [pc, #108]	; (80026bc <HAL_RCC_OscConfig+0x4cc>)
 800264e:	2201      	movs	r2, #1
 8002650:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002652:	f7ff fb01 	bl	8001c58 <HAL_GetTick>
 8002656:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002658:	e008      	b.n	800266c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800265a:	f7ff fafd 	bl	8001c58 <HAL_GetTick>
 800265e:	4602      	mov	r2, r0
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	2b02      	cmp	r3, #2
 8002666:	d901      	bls.n	800266c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002668:	2303      	movs	r3, #3
 800266a:	e03d      	b.n	80026e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800266c:	4b11      	ldr	r3, [pc, #68]	; (80026b4 <HAL_RCC_OscConfig+0x4c4>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d0f0      	beq.n	800265a <HAL_RCC_OscConfig+0x46a>
 8002678:	e035      	b.n	80026e6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800267a:	4b10      	ldr	r3, [pc, #64]	; (80026bc <HAL_RCC_OscConfig+0x4cc>)
 800267c:	2200      	movs	r2, #0
 800267e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002680:	f7ff faea 	bl	8001c58 <HAL_GetTick>
 8002684:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002686:	e008      	b.n	800269a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002688:	f7ff fae6 	bl	8001c58 <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	2b02      	cmp	r3, #2
 8002694:	d901      	bls.n	800269a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e026      	b.n	80026e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800269a:	4b06      	ldr	r3, [pc, #24]	; (80026b4 <HAL_RCC_OscConfig+0x4c4>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d1f0      	bne.n	8002688 <HAL_RCC_OscConfig+0x498>
 80026a6:	e01e      	b.n	80026e6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	69db      	ldr	r3, [r3, #28]
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d107      	bne.n	80026c0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e019      	b.n	80026e8 <HAL_RCC_OscConfig+0x4f8>
 80026b4:	40021000 	.word	0x40021000
 80026b8:	40007000 	.word	0x40007000
 80026bc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80026c0:	4b0b      	ldr	r3, [pc, #44]	; (80026f0 <HAL_RCC_OscConfig+0x500>)
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6a1b      	ldr	r3, [r3, #32]
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d106      	bne.n	80026e2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026de:	429a      	cmp	r2, r3
 80026e0:	d001      	beq.n	80026e6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e000      	b.n	80026e8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80026e6:	2300      	movs	r3, #0
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3718      	adds	r7, #24
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	40021000 	.word	0x40021000

080026f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d101      	bne.n	8002708 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e0d0      	b.n	80028aa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002708:	4b6a      	ldr	r3, [pc, #424]	; (80028b4 <HAL_RCC_ClockConfig+0x1c0>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0307 	and.w	r3, r3, #7
 8002710:	683a      	ldr	r2, [r7, #0]
 8002712:	429a      	cmp	r2, r3
 8002714:	d910      	bls.n	8002738 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002716:	4b67      	ldr	r3, [pc, #412]	; (80028b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f023 0207 	bic.w	r2, r3, #7
 800271e:	4965      	ldr	r1, [pc, #404]	; (80028b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	4313      	orrs	r3, r2
 8002724:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002726:	4b63      	ldr	r3, [pc, #396]	; (80028b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0307 	and.w	r3, r3, #7
 800272e:	683a      	ldr	r2, [r7, #0]
 8002730:	429a      	cmp	r2, r3
 8002732:	d001      	beq.n	8002738 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e0b8      	b.n	80028aa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0302 	and.w	r3, r3, #2
 8002740:	2b00      	cmp	r3, #0
 8002742:	d020      	beq.n	8002786 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0304 	and.w	r3, r3, #4
 800274c:	2b00      	cmp	r3, #0
 800274e:	d005      	beq.n	800275c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002750:	4b59      	ldr	r3, [pc, #356]	; (80028b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	4a58      	ldr	r2, [pc, #352]	; (80028b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002756:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800275a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0308 	and.w	r3, r3, #8
 8002764:	2b00      	cmp	r3, #0
 8002766:	d005      	beq.n	8002774 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002768:	4b53      	ldr	r3, [pc, #332]	; (80028b8 <HAL_RCC_ClockConfig+0x1c4>)
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	4a52      	ldr	r2, [pc, #328]	; (80028b8 <HAL_RCC_ClockConfig+0x1c4>)
 800276e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002772:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002774:	4b50      	ldr	r3, [pc, #320]	; (80028b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	494d      	ldr	r1, [pc, #308]	; (80028b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002782:	4313      	orrs	r3, r2
 8002784:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0301 	and.w	r3, r3, #1
 800278e:	2b00      	cmp	r3, #0
 8002790:	d040      	beq.n	8002814 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	2b01      	cmp	r3, #1
 8002798:	d107      	bne.n	80027aa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800279a:	4b47      	ldr	r3, [pc, #284]	; (80028b8 <HAL_RCC_ClockConfig+0x1c4>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d115      	bne.n	80027d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e07f      	b.n	80028aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d107      	bne.n	80027c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027b2:	4b41      	ldr	r3, [pc, #260]	; (80028b8 <HAL_RCC_ClockConfig+0x1c4>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d109      	bne.n	80027d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e073      	b.n	80028aa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027c2:	4b3d      	ldr	r3, [pc, #244]	; (80028b8 <HAL_RCC_ClockConfig+0x1c4>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0302 	and.w	r3, r3, #2
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d101      	bne.n	80027d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e06b      	b.n	80028aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027d2:	4b39      	ldr	r3, [pc, #228]	; (80028b8 <HAL_RCC_ClockConfig+0x1c4>)
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	f023 0203 	bic.w	r2, r3, #3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	4936      	ldr	r1, [pc, #216]	; (80028b8 <HAL_RCC_ClockConfig+0x1c4>)
 80027e0:	4313      	orrs	r3, r2
 80027e2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027e4:	f7ff fa38 	bl	8001c58 <HAL_GetTick>
 80027e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ea:	e00a      	b.n	8002802 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027ec:	f7ff fa34 	bl	8001c58 <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d901      	bls.n	8002802 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e053      	b.n	80028aa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002802:	4b2d      	ldr	r3, [pc, #180]	; (80028b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	f003 020c 	and.w	r2, r3, #12
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	429a      	cmp	r2, r3
 8002812:	d1eb      	bne.n	80027ec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002814:	4b27      	ldr	r3, [pc, #156]	; (80028b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0307 	and.w	r3, r3, #7
 800281c:	683a      	ldr	r2, [r7, #0]
 800281e:	429a      	cmp	r2, r3
 8002820:	d210      	bcs.n	8002844 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002822:	4b24      	ldr	r3, [pc, #144]	; (80028b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f023 0207 	bic.w	r2, r3, #7
 800282a:	4922      	ldr	r1, [pc, #136]	; (80028b4 <HAL_RCC_ClockConfig+0x1c0>)
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	4313      	orrs	r3, r2
 8002830:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002832:	4b20      	ldr	r3, [pc, #128]	; (80028b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0307 	and.w	r3, r3, #7
 800283a:	683a      	ldr	r2, [r7, #0]
 800283c:	429a      	cmp	r2, r3
 800283e:	d001      	beq.n	8002844 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e032      	b.n	80028aa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0304 	and.w	r3, r3, #4
 800284c:	2b00      	cmp	r3, #0
 800284e:	d008      	beq.n	8002862 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002850:	4b19      	ldr	r3, [pc, #100]	; (80028b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	4916      	ldr	r1, [pc, #88]	; (80028b8 <HAL_RCC_ClockConfig+0x1c4>)
 800285e:	4313      	orrs	r3, r2
 8002860:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0308 	and.w	r3, r3, #8
 800286a:	2b00      	cmp	r3, #0
 800286c:	d009      	beq.n	8002882 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800286e:	4b12      	ldr	r3, [pc, #72]	; (80028b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	691b      	ldr	r3, [r3, #16]
 800287a:	00db      	lsls	r3, r3, #3
 800287c:	490e      	ldr	r1, [pc, #56]	; (80028b8 <HAL_RCC_ClockConfig+0x1c4>)
 800287e:	4313      	orrs	r3, r2
 8002880:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002882:	f000 f821 	bl	80028c8 <HAL_RCC_GetSysClockFreq>
 8002886:	4602      	mov	r2, r0
 8002888:	4b0b      	ldr	r3, [pc, #44]	; (80028b8 <HAL_RCC_ClockConfig+0x1c4>)
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	091b      	lsrs	r3, r3, #4
 800288e:	f003 030f 	and.w	r3, r3, #15
 8002892:	490a      	ldr	r1, [pc, #40]	; (80028bc <HAL_RCC_ClockConfig+0x1c8>)
 8002894:	5ccb      	ldrb	r3, [r1, r3]
 8002896:	fa22 f303 	lsr.w	r3, r2, r3
 800289a:	4a09      	ldr	r2, [pc, #36]	; (80028c0 <HAL_RCC_ClockConfig+0x1cc>)
 800289c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800289e:	4b09      	ldr	r3, [pc, #36]	; (80028c4 <HAL_RCC_ClockConfig+0x1d0>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4618      	mov	r0, r3
 80028a4:	f7ff f996 	bl	8001bd4 <HAL_InitTick>

  return HAL_OK;
 80028a8:	2300      	movs	r3, #0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3710      	adds	r7, #16
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	40022000 	.word	0x40022000
 80028b8:	40021000 	.word	0x40021000
 80028bc:	08004b90 	.word	0x08004b90
 80028c0:	20000078 	.word	0x20000078
 80028c4:	2000007c 	.word	0x2000007c

080028c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b087      	sub	sp, #28
 80028cc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80028ce:	2300      	movs	r3, #0
 80028d0:	60fb      	str	r3, [r7, #12]
 80028d2:	2300      	movs	r3, #0
 80028d4:	60bb      	str	r3, [r7, #8]
 80028d6:	2300      	movs	r3, #0
 80028d8:	617b      	str	r3, [r7, #20]
 80028da:	2300      	movs	r3, #0
 80028dc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80028de:	2300      	movs	r3, #0
 80028e0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80028e2:	4b1e      	ldr	r3, [pc, #120]	; (800295c <HAL_RCC_GetSysClockFreq+0x94>)
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f003 030c 	and.w	r3, r3, #12
 80028ee:	2b04      	cmp	r3, #4
 80028f0:	d002      	beq.n	80028f8 <HAL_RCC_GetSysClockFreq+0x30>
 80028f2:	2b08      	cmp	r3, #8
 80028f4:	d003      	beq.n	80028fe <HAL_RCC_GetSysClockFreq+0x36>
 80028f6:	e027      	b.n	8002948 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80028f8:	4b19      	ldr	r3, [pc, #100]	; (8002960 <HAL_RCC_GetSysClockFreq+0x98>)
 80028fa:	613b      	str	r3, [r7, #16]
      break;
 80028fc:	e027      	b.n	800294e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	0c9b      	lsrs	r3, r3, #18
 8002902:	f003 030f 	and.w	r3, r3, #15
 8002906:	4a17      	ldr	r2, [pc, #92]	; (8002964 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002908:	5cd3      	ldrb	r3, [r2, r3]
 800290a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d010      	beq.n	8002938 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002916:	4b11      	ldr	r3, [pc, #68]	; (800295c <HAL_RCC_GetSysClockFreq+0x94>)
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	0c5b      	lsrs	r3, r3, #17
 800291c:	f003 0301 	and.w	r3, r3, #1
 8002920:	4a11      	ldr	r2, [pc, #68]	; (8002968 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002922:	5cd3      	ldrb	r3, [r2, r3]
 8002924:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a0d      	ldr	r2, [pc, #52]	; (8002960 <HAL_RCC_GetSysClockFreq+0x98>)
 800292a:	fb03 f202 	mul.w	r2, r3, r2
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	fbb2 f3f3 	udiv	r3, r2, r3
 8002934:	617b      	str	r3, [r7, #20]
 8002936:	e004      	b.n	8002942 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	4a0c      	ldr	r2, [pc, #48]	; (800296c <HAL_RCC_GetSysClockFreq+0xa4>)
 800293c:	fb02 f303 	mul.w	r3, r2, r3
 8002940:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	613b      	str	r3, [r7, #16]
      break;
 8002946:	e002      	b.n	800294e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002948:	4b05      	ldr	r3, [pc, #20]	; (8002960 <HAL_RCC_GetSysClockFreq+0x98>)
 800294a:	613b      	str	r3, [r7, #16]
      break;
 800294c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800294e:	693b      	ldr	r3, [r7, #16]
}
 8002950:	4618      	mov	r0, r3
 8002952:	371c      	adds	r7, #28
 8002954:	46bd      	mov	sp, r7
 8002956:	bc80      	pop	{r7}
 8002958:	4770      	bx	lr
 800295a:	bf00      	nop
 800295c:	40021000 	.word	0x40021000
 8002960:	007a1200 	.word	0x007a1200
 8002964:	08004ba8 	.word	0x08004ba8
 8002968:	08004bb8 	.word	0x08004bb8
 800296c:	003d0900 	.word	0x003d0900

08002970 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002970:	b480      	push	{r7}
 8002972:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002974:	4b02      	ldr	r3, [pc, #8]	; (8002980 <HAL_RCC_GetHCLKFreq+0x10>)
 8002976:	681b      	ldr	r3, [r3, #0]
}
 8002978:	4618      	mov	r0, r3
 800297a:	46bd      	mov	sp, r7
 800297c:	bc80      	pop	{r7}
 800297e:	4770      	bx	lr
 8002980:	20000078 	.word	0x20000078

08002984 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002988:	f7ff fff2 	bl	8002970 <HAL_RCC_GetHCLKFreq>
 800298c:	4602      	mov	r2, r0
 800298e:	4b05      	ldr	r3, [pc, #20]	; (80029a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	0a1b      	lsrs	r3, r3, #8
 8002994:	f003 0307 	and.w	r3, r3, #7
 8002998:	4903      	ldr	r1, [pc, #12]	; (80029a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800299a:	5ccb      	ldrb	r3, [r1, r3]
 800299c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	40021000 	.word	0x40021000
 80029a8:	08004ba0 	.word	0x08004ba0

080029ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80029b0:	f7ff ffde 	bl	8002970 <HAL_RCC_GetHCLKFreq>
 80029b4:	4602      	mov	r2, r0
 80029b6:	4b05      	ldr	r3, [pc, #20]	; (80029cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	0adb      	lsrs	r3, r3, #11
 80029bc:	f003 0307 	and.w	r3, r3, #7
 80029c0:	4903      	ldr	r1, [pc, #12]	; (80029d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029c2:	5ccb      	ldrb	r3, [r1, r3]
 80029c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	40021000 	.word	0x40021000
 80029d0:	08004ba0 	.word	0x08004ba0

080029d4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b085      	sub	sp, #20
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80029dc:	4b0a      	ldr	r3, [pc, #40]	; (8002a08 <RCC_Delay+0x34>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a0a      	ldr	r2, [pc, #40]	; (8002a0c <RCC_Delay+0x38>)
 80029e2:	fba2 2303 	umull	r2, r3, r2, r3
 80029e6:	0a5b      	lsrs	r3, r3, #9
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	fb02 f303 	mul.w	r3, r2, r3
 80029ee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80029f0:	bf00      	nop
  }
  while (Delay --);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	1e5a      	subs	r2, r3, #1
 80029f6:	60fa      	str	r2, [r7, #12]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d1f9      	bne.n	80029f0 <RCC_Delay+0x1c>
}
 80029fc:	bf00      	nop
 80029fe:	bf00      	nop
 8002a00:	3714      	adds	r7, #20
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bc80      	pop	{r7}
 8002a06:	4770      	bx	lr
 8002a08:	20000078 	.word	0x20000078
 8002a0c:	10624dd3 	.word	0x10624dd3

08002a10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d101      	bne.n	8002a22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e041      	b.n	8002aa6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d106      	bne.n	8002a3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f7fe ff04 	bl	8001844 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2202      	movs	r2, #2
 8002a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	3304      	adds	r3, #4
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	4610      	mov	r0, r2
 8002a50:	f000 fbde 	bl	8003210 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2201      	movs	r2, #1
 8002a58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2201      	movs	r2, #1
 8002a98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002aa4:	2300      	movs	r3, #0
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3708      	adds	r7, #8
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}

08002aae <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002aae:	b580      	push	{r7, lr}
 8002ab0:	b082      	sub	sp, #8
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d101      	bne.n	8002ac0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e041      	b.n	8002b44 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d106      	bne.n	8002ada <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f000 f839 	bl	8002b4c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2202      	movs	r2, #2
 8002ade:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	3304      	adds	r3, #4
 8002aea:	4619      	mov	r1, r3
 8002aec:	4610      	mov	r0, r2
 8002aee:	f000 fb8f 	bl	8003210 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2201      	movs	r2, #1
 8002af6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2201      	movs	r2, #1
 8002afe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2201      	movs	r2, #1
 8002b06:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2201      	movs	r2, #1
 8002b16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2201      	movs	r2, #1
 8002b26:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2201      	movs	r2, #1
 8002b36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b42:	2300      	movs	r3, #0
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3708      	adds	r7, #8
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002b54:	bf00      	nop
 8002b56:	370c      	adds	r7, #12
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bc80      	pop	{r7}
 8002b5c:	4770      	bx	lr
	...

08002b60 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d109      	bne.n	8002b84 <HAL_TIM_PWM_Start+0x24>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	bf14      	ite	ne
 8002b7c:	2301      	movne	r3, #1
 8002b7e:	2300      	moveq	r3, #0
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	e022      	b.n	8002bca <HAL_TIM_PWM_Start+0x6a>
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	2b04      	cmp	r3, #4
 8002b88:	d109      	bne.n	8002b9e <HAL_TIM_PWM_Start+0x3e>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	bf14      	ite	ne
 8002b96:	2301      	movne	r3, #1
 8002b98:	2300      	moveq	r3, #0
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	e015      	b.n	8002bca <HAL_TIM_PWM_Start+0x6a>
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	2b08      	cmp	r3, #8
 8002ba2:	d109      	bne.n	8002bb8 <HAL_TIM_PWM_Start+0x58>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	bf14      	ite	ne
 8002bb0:	2301      	movne	r3, #1
 8002bb2:	2300      	moveq	r3, #0
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	e008      	b.n	8002bca <HAL_TIM_PWM_Start+0x6a>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	bf14      	ite	ne
 8002bc4:	2301      	movne	r3, #1
 8002bc6:	2300      	moveq	r3, #0
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d001      	beq.n	8002bd2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e05e      	b.n	8002c90 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d104      	bne.n	8002be2 <HAL_TIM_PWM_Start+0x82>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2202      	movs	r2, #2
 8002bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002be0:	e013      	b.n	8002c0a <HAL_TIM_PWM_Start+0xaa>
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	2b04      	cmp	r3, #4
 8002be6:	d104      	bne.n	8002bf2 <HAL_TIM_PWM_Start+0x92>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2202      	movs	r2, #2
 8002bec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002bf0:	e00b      	b.n	8002c0a <HAL_TIM_PWM_Start+0xaa>
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	2b08      	cmp	r3, #8
 8002bf6:	d104      	bne.n	8002c02 <HAL_TIM_PWM_Start+0xa2>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2202      	movs	r2, #2
 8002bfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c00:	e003      	b.n	8002c0a <HAL_TIM_PWM_Start+0xaa>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2202      	movs	r2, #2
 8002c06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	6839      	ldr	r1, [r7, #0]
 8002c12:	4618      	mov	r0, r3
 8002c14:	f000 fd7c 	bl	8003710 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a1e      	ldr	r2, [pc, #120]	; (8002c98 <HAL_TIM_PWM_Start+0x138>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d107      	bne.n	8002c32 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c30:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a18      	ldr	r2, [pc, #96]	; (8002c98 <HAL_TIM_PWM_Start+0x138>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d00e      	beq.n	8002c5a <HAL_TIM_PWM_Start+0xfa>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c44:	d009      	beq.n	8002c5a <HAL_TIM_PWM_Start+0xfa>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a14      	ldr	r2, [pc, #80]	; (8002c9c <HAL_TIM_PWM_Start+0x13c>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d004      	beq.n	8002c5a <HAL_TIM_PWM_Start+0xfa>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a12      	ldr	r2, [pc, #72]	; (8002ca0 <HAL_TIM_PWM_Start+0x140>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d111      	bne.n	8002c7e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	f003 0307 	and.w	r3, r3, #7
 8002c64:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2b06      	cmp	r3, #6
 8002c6a:	d010      	beq.n	8002c8e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f042 0201 	orr.w	r2, r2, #1
 8002c7a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c7c:	e007      	b.n	8002c8e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f042 0201 	orr.w	r2, r2, #1
 8002c8c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c8e:	2300      	movs	r3, #0
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3710      	adds	r7, #16
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	40012c00 	.word	0x40012c00
 8002c9c:	40000400 	.word	0x40000400
 8002ca0:	40000800 	.word	0x40000800

08002ca4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	691b      	ldr	r3, [r3, #16]
 8002cb2:	f003 0302 	and.w	r3, r3, #2
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d122      	bne.n	8002d00 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	f003 0302 	and.w	r3, r3, #2
 8002cc4:	2b02      	cmp	r3, #2
 8002cc6:	d11b      	bne.n	8002d00 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f06f 0202 	mvn.w	r2, #2
 8002cd0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	699b      	ldr	r3, [r3, #24]
 8002cde:	f003 0303 	and.w	r3, r3, #3
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d003      	beq.n	8002cee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f000 fa76 	bl	80031d8 <HAL_TIM_IC_CaptureCallback>
 8002cec:	e005      	b.n	8002cfa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f000 fa69 	bl	80031c6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f000 fa78 	bl	80031ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	691b      	ldr	r3, [r3, #16]
 8002d06:	f003 0304 	and.w	r3, r3, #4
 8002d0a:	2b04      	cmp	r3, #4
 8002d0c:	d122      	bne.n	8002d54 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	f003 0304 	and.w	r3, r3, #4
 8002d18:	2b04      	cmp	r3, #4
 8002d1a:	d11b      	bne.n	8002d54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f06f 0204 	mvn.w	r2, #4
 8002d24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2202      	movs	r2, #2
 8002d2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	699b      	ldr	r3, [r3, #24]
 8002d32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d003      	beq.n	8002d42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f000 fa4c 	bl	80031d8 <HAL_TIM_IC_CaptureCallback>
 8002d40:	e005      	b.n	8002d4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f000 fa3f 	bl	80031c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	f000 fa4e 	bl	80031ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	691b      	ldr	r3, [r3, #16]
 8002d5a:	f003 0308 	and.w	r3, r3, #8
 8002d5e:	2b08      	cmp	r3, #8
 8002d60:	d122      	bne.n	8002da8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	f003 0308 	and.w	r3, r3, #8
 8002d6c:	2b08      	cmp	r3, #8
 8002d6e:	d11b      	bne.n	8002da8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f06f 0208 	mvn.w	r2, #8
 8002d78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2204      	movs	r2, #4
 8002d7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	69db      	ldr	r3, [r3, #28]
 8002d86:	f003 0303 	and.w	r3, r3, #3
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d003      	beq.n	8002d96 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f000 fa22 	bl	80031d8 <HAL_TIM_IC_CaptureCallback>
 8002d94:	e005      	b.n	8002da2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f000 fa15 	bl	80031c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	f000 fa24 	bl	80031ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	691b      	ldr	r3, [r3, #16]
 8002dae:	f003 0310 	and.w	r3, r3, #16
 8002db2:	2b10      	cmp	r3, #16
 8002db4:	d122      	bne.n	8002dfc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	f003 0310 	and.w	r3, r3, #16
 8002dc0:	2b10      	cmp	r3, #16
 8002dc2:	d11b      	bne.n	8002dfc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f06f 0210 	mvn.w	r2, #16
 8002dcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2208      	movs	r2, #8
 8002dd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	69db      	ldr	r3, [r3, #28]
 8002dda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d003      	beq.n	8002dea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f000 f9f8 	bl	80031d8 <HAL_TIM_IC_CaptureCallback>
 8002de8:	e005      	b.n	8002df6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f000 f9eb 	bl	80031c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f000 f9fa 	bl	80031ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	691b      	ldr	r3, [r3, #16]
 8002e02:	f003 0301 	and.w	r3, r3, #1
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d10e      	bne.n	8002e28 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	f003 0301 	and.w	r3, r3, #1
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d107      	bne.n	8002e28 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f06f 0201 	mvn.w	r2, #1
 8002e20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f7fe f813 	bl	8000e4e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	691b      	ldr	r3, [r3, #16]
 8002e2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e32:	2b80      	cmp	r3, #128	; 0x80
 8002e34:	d10e      	bne.n	8002e54 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e40:	2b80      	cmp	r3, #128	; 0x80
 8002e42:	d107      	bne.n	8002e54 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002e4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f000 fce9 	bl	8003826 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	691b      	ldr	r3, [r3, #16]
 8002e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e5e:	2b40      	cmp	r3, #64	; 0x40
 8002e60:	d10e      	bne.n	8002e80 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e6c:	2b40      	cmp	r3, #64	; 0x40
 8002e6e:	d107      	bne.n	8002e80 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f000 f9be 	bl	80031fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	691b      	ldr	r3, [r3, #16]
 8002e86:	f003 0320 	and.w	r3, r3, #32
 8002e8a:	2b20      	cmp	r3, #32
 8002e8c:	d10e      	bne.n	8002eac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	f003 0320 	and.w	r3, r3, #32
 8002e98:	2b20      	cmp	r3, #32
 8002e9a:	d107      	bne.n	8002eac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f06f 0220 	mvn.w	r2, #32
 8002ea4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f000 fcb4 	bl	8003814 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002eac:	bf00      	nop
 8002eae:	3708      	adds	r7, #8
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}

08002eb4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b086      	sub	sp, #24
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	60f8      	str	r0, [r7, #12]
 8002ebc:	60b9      	str	r1, [r7, #8]
 8002ebe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d101      	bne.n	8002ed2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002ece:	2302      	movs	r3, #2
 8002ed0:	e0ae      	b.n	8003030 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2b0c      	cmp	r3, #12
 8002ede:	f200 809f 	bhi.w	8003020 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002ee2:	a201      	add	r2, pc, #4	; (adr r2, 8002ee8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ee8:	08002f1d 	.word	0x08002f1d
 8002eec:	08003021 	.word	0x08003021
 8002ef0:	08003021 	.word	0x08003021
 8002ef4:	08003021 	.word	0x08003021
 8002ef8:	08002f5d 	.word	0x08002f5d
 8002efc:	08003021 	.word	0x08003021
 8002f00:	08003021 	.word	0x08003021
 8002f04:	08003021 	.word	0x08003021
 8002f08:	08002f9f 	.word	0x08002f9f
 8002f0c:	08003021 	.word	0x08003021
 8002f10:	08003021 	.word	0x08003021
 8002f14:	08003021 	.word	0x08003021
 8002f18:	08002fdf 	.word	0x08002fdf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	68b9      	ldr	r1, [r7, #8]
 8002f22:	4618      	mov	r0, r3
 8002f24:	f000 f9d6 	bl	80032d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	699a      	ldr	r2, [r3, #24]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f042 0208 	orr.w	r2, r2, #8
 8002f36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	699a      	ldr	r2, [r3, #24]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f022 0204 	bic.w	r2, r2, #4
 8002f46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	6999      	ldr	r1, [r3, #24]
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	691a      	ldr	r2, [r3, #16]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	430a      	orrs	r2, r1
 8002f58:	619a      	str	r2, [r3, #24]
      break;
 8002f5a:	e064      	b.n	8003026 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	68b9      	ldr	r1, [r7, #8]
 8002f62:	4618      	mov	r0, r3
 8002f64:	f000 fa1c 	bl	80033a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	699a      	ldr	r2, [r3, #24]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	699a      	ldr	r2, [r3, #24]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	6999      	ldr	r1, [r3, #24]
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	691b      	ldr	r3, [r3, #16]
 8002f92:	021a      	lsls	r2, r3, #8
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	430a      	orrs	r2, r1
 8002f9a:	619a      	str	r2, [r3, #24]
      break;
 8002f9c:	e043      	b.n	8003026 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	68b9      	ldr	r1, [r7, #8]
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f000 fa65 	bl	8003474 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	69da      	ldr	r2, [r3, #28]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f042 0208 	orr.w	r2, r2, #8
 8002fb8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	69da      	ldr	r2, [r3, #28]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f022 0204 	bic.w	r2, r2, #4
 8002fc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	69d9      	ldr	r1, [r3, #28]
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	691a      	ldr	r2, [r3, #16]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	430a      	orrs	r2, r1
 8002fda:	61da      	str	r2, [r3, #28]
      break;
 8002fdc:	e023      	b.n	8003026 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	68b9      	ldr	r1, [r7, #8]
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f000 faaf 	bl	8003548 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	69da      	ldr	r2, [r3, #28]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ff8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	69da      	ldr	r2, [r3, #28]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003008:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	69d9      	ldr	r1, [r3, #28]
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	691b      	ldr	r3, [r3, #16]
 8003014:	021a      	lsls	r2, r3, #8
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	430a      	orrs	r2, r1
 800301c:	61da      	str	r2, [r3, #28]
      break;
 800301e:	e002      	b.n	8003026 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	75fb      	strb	r3, [r7, #23]
      break;
 8003024:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2200      	movs	r2, #0
 800302a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800302e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003030:	4618      	mov	r0, r3
 8003032:	3718      	adds	r7, #24
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}

08003038 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b084      	sub	sp, #16
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003042:	2300      	movs	r3, #0
 8003044:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800304c:	2b01      	cmp	r3, #1
 800304e:	d101      	bne.n	8003054 <HAL_TIM_ConfigClockSource+0x1c>
 8003050:	2302      	movs	r3, #2
 8003052:	e0b4      	b.n	80031be <HAL_TIM_ConfigClockSource+0x186>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2201      	movs	r2, #1
 8003058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2202      	movs	r2, #2
 8003060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003072:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800307a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	68ba      	ldr	r2, [r7, #8]
 8003082:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800308c:	d03e      	beq.n	800310c <HAL_TIM_ConfigClockSource+0xd4>
 800308e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003092:	f200 8087 	bhi.w	80031a4 <HAL_TIM_ConfigClockSource+0x16c>
 8003096:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800309a:	f000 8086 	beq.w	80031aa <HAL_TIM_ConfigClockSource+0x172>
 800309e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030a2:	d87f      	bhi.n	80031a4 <HAL_TIM_ConfigClockSource+0x16c>
 80030a4:	2b70      	cmp	r3, #112	; 0x70
 80030a6:	d01a      	beq.n	80030de <HAL_TIM_ConfigClockSource+0xa6>
 80030a8:	2b70      	cmp	r3, #112	; 0x70
 80030aa:	d87b      	bhi.n	80031a4 <HAL_TIM_ConfigClockSource+0x16c>
 80030ac:	2b60      	cmp	r3, #96	; 0x60
 80030ae:	d050      	beq.n	8003152 <HAL_TIM_ConfigClockSource+0x11a>
 80030b0:	2b60      	cmp	r3, #96	; 0x60
 80030b2:	d877      	bhi.n	80031a4 <HAL_TIM_ConfigClockSource+0x16c>
 80030b4:	2b50      	cmp	r3, #80	; 0x50
 80030b6:	d03c      	beq.n	8003132 <HAL_TIM_ConfigClockSource+0xfa>
 80030b8:	2b50      	cmp	r3, #80	; 0x50
 80030ba:	d873      	bhi.n	80031a4 <HAL_TIM_ConfigClockSource+0x16c>
 80030bc:	2b40      	cmp	r3, #64	; 0x40
 80030be:	d058      	beq.n	8003172 <HAL_TIM_ConfigClockSource+0x13a>
 80030c0:	2b40      	cmp	r3, #64	; 0x40
 80030c2:	d86f      	bhi.n	80031a4 <HAL_TIM_ConfigClockSource+0x16c>
 80030c4:	2b30      	cmp	r3, #48	; 0x30
 80030c6:	d064      	beq.n	8003192 <HAL_TIM_ConfigClockSource+0x15a>
 80030c8:	2b30      	cmp	r3, #48	; 0x30
 80030ca:	d86b      	bhi.n	80031a4 <HAL_TIM_ConfigClockSource+0x16c>
 80030cc:	2b20      	cmp	r3, #32
 80030ce:	d060      	beq.n	8003192 <HAL_TIM_ConfigClockSource+0x15a>
 80030d0:	2b20      	cmp	r3, #32
 80030d2:	d867      	bhi.n	80031a4 <HAL_TIM_ConfigClockSource+0x16c>
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d05c      	beq.n	8003192 <HAL_TIM_ConfigClockSource+0x15a>
 80030d8:	2b10      	cmp	r3, #16
 80030da:	d05a      	beq.n	8003192 <HAL_TIM_ConfigClockSource+0x15a>
 80030dc:	e062      	b.n	80031a4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80030ee:	f000 faf0 	bl	80036d2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003100:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	68ba      	ldr	r2, [r7, #8]
 8003108:	609a      	str	r2, [r3, #8]
      break;
 800310a:	e04f      	b.n	80031ac <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800311c:	f000 fad9 	bl	80036d2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	689a      	ldr	r2, [r3, #8]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800312e:	609a      	str	r2, [r3, #8]
      break;
 8003130:	e03c      	b.n	80031ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800313e:	461a      	mov	r2, r3
 8003140:	f000 fa50 	bl	80035e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	2150      	movs	r1, #80	; 0x50
 800314a:	4618      	mov	r0, r3
 800314c:	f000 faa7 	bl	800369e <TIM_ITRx_SetConfig>
      break;
 8003150:	e02c      	b.n	80031ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800315e:	461a      	mov	r2, r3
 8003160:	f000 fa6e 	bl	8003640 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	2160      	movs	r1, #96	; 0x60
 800316a:	4618      	mov	r0, r3
 800316c:	f000 fa97 	bl	800369e <TIM_ITRx_SetConfig>
      break;
 8003170:	e01c      	b.n	80031ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800317e:	461a      	mov	r2, r3
 8003180:	f000 fa30 	bl	80035e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	2140      	movs	r1, #64	; 0x40
 800318a:	4618      	mov	r0, r3
 800318c:	f000 fa87 	bl	800369e <TIM_ITRx_SetConfig>
      break;
 8003190:	e00c      	b.n	80031ac <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4619      	mov	r1, r3
 800319c:	4610      	mov	r0, r2
 800319e:	f000 fa7e 	bl	800369e <TIM_ITRx_SetConfig>
      break;
 80031a2:	e003      	b.n	80031ac <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	73fb      	strb	r3, [r7, #15]
      break;
 80031a8:	e000      	b.n	80031ac <HAL_TIM_ConfigClockSource+0x174>
      break;
 80031aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2201      	movs	r2, #1
 80031b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2200      	movs	r2, #0
 80031b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80031bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3710      	adds	r7, #16
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}

080031c6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031c6:	b480      	push	{r7}
 80031c8:	b083      	sub	sp, #12
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80031ce:	bf00      	nop
 80031d0:	370c      	adds	r7, #12
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bc80      	pop	{r7}
 80031d6:	4770      	bx	lr

080031d8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80031d8:	b480      	push	{r7}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80031e0:	bf00      	nop
 80031e2:	370c      	adds	r7, #12
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bc80      	pop	{r7}
 80031e8:	4770      	bx	lr

080031ea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80031ea:	b480      	push	{r7}
 80031ec:	b083      	sub	sp, #12
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80031f2:	bf00      	nop
 80031f4:	370c      	adds	r7, #12
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bc80      	pop	{r7}
 80031fa:	4770      	bx	lr

080031fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003204:	bf00      	nop
 8003206:	370c      	adds	r7, #12
 8003208:	46bd      	mov	sp, r7
 800320a:	bc80      	pop	{r7}
 800320c:	4770      	bx	lr
	...

08003210 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003210:	b480      	push	{r7}
 8003212:	b085      	sub	sp, #20
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	4a29      	ldr	r2, [pc, #164]	; (80032c8 <TIM_Base_SetConfig+0xb8>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d00b      	beq.n	8003240 <TIM_Base_SetConfig+0x30>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800322e:	d007      	beq.n	8003240 <TIM_Base_SetConfig+0x30>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	4a26      	ldr	r2, [pc, #152]	; (80032cc <TIM_Base_SetConfig+0xbc>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d003      	beq.n	8003240 <TIM_Base_SetConfig+0x30>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	4a25      	ldr	r2, [pc, #148]	; (80032d0 <TIM_Base_SetConfig+0xc0>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d108      	bne.n	8003252 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003246:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	68fa      	ldr	r2, [r7, #12]
 800324e:	4313      	orrs	r3, r2
 8003250:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4a1c      	ldr	r2, [pc, #112]	; (80032c8 <TIM_Base_SetConfig+0xb8>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d00b      	beq.n	8003272 <TIM_Base_SetConfig+0x62>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003260:	d007      	beq.n	8003272 <TIM_Base_SetConfig+0x62>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4a19      	ldr	r2, [pc, #100]	; (80032cc <TIM_Base_SetConfig+0xbc>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d003      	beq.n	8003272 <TIM_Base_SetConfig+0x62>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4a18      	ldr	r2, [pc, #96]	; (80032d0 <TIM_Base_SetConfig+0xc0>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d108      	bne.n	8003284 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003278:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	68db      	ldr	r3, [r3, #12]
 800327e:	68fa      	ldr	r2, [r7, #12]
 8003280:	4313      	orrs	r3, r2
 8003282:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	695b      	ldr	r3, [r3, #20]
 800328e:	4313      	orrs	r3, r2
 8003290:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	68fa      	ldr	r2, [r7, #12]
 8003296:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	689a      	ldr	r2, [r3, #8]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	4a07      	ldr	r2, [pc, #28]	; (80032c8 <TIM_Base_SetConfig+0xb8>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d103      	bne.n	80032b8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	691a      	ldr	r2, [r3, #16]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2201      	movs	r2, #1
 80032bc:	615a      	str	r2, [r3, #20]
}
 80032be:	bf00      	nop
 80032c0:	3714      	adds	r7, #20
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bc80      	pop	{r7}
 80032c6:	4770      	bx	lr
 80032c8:	40012c00 	.word	0x40012c00
 80032cc:	40000400 	.word	0x40000400
 80032d0:	40000800 	.word	0x40000800

080032d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b087      	sub	sp, #28
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6a1b      	ldr	r3, [r3, #32]
 80032e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6a1b      	ldr	r3, [r3, #32]
 80032e8:	f023 0201 	bic.w	r2, r3, #1
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	699b      	ldr	r3, [r3, #24]
 80032fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003302:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f023 0303 	bic.w	r3, r3, #3
 800330a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	68fa      	ldr	r2, [r7, #12]
 8003312:	4313      	orrs	r3, r2
 8003314:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	f023 0302 	bic.w	r3, r3, #2
 800331c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	697a      	ldr	r2, [r7, #20]
 8003324:	4313      	orrs	r3, r2
 8003326:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	4a1c      	ldr	r2, [pc, #112]	; (800339c <TIM_OC1_SetConfig+0xc8>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d10c      	bne.n	800334a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	f023 0308 	bic.w	r3, r3, #8
 8003336:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	697a      	ldr	r2, [r7, #20]
 800333e:	4313      	orrs	r3, r2
 8003340:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	f023 0304 	bic.w	r3, r3, #4
 8003348:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4a13      	ldr	r2, [pc, #76]	; (800339c <TIM_OC1_SetConfig+0xc8>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d111      	bne.n	8003376 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003358:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003360:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	695b      	ldr	r3, [r3, #20]
 8003366:	693a      	ldr	r2, [r7, #16]
 8003368:	4313      	orrs	r3, r2
 800336a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	699b      	ldr	r3, [r3, #24]
 8003370:	693a      	ldr	r2, [r7, #16]
 8003372:	4313      	orrs	r3, r2
 8003374:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	693a      	ldr	r2, [r7, #16]
 800337a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	68fa      	ldr	r2, [r7, #12]
 8003380:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	685a      	ldr	r2, [r3, #4]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	697a      	ldr	r2, [r7, #20]
 800338e:	621a      	str	r2, [r3, #32]
}
 8003390:	bf00      	nop
 8003392:	371c      	adds	r7, #28
 8003394:	46bd      	mov	sp, r7
 8003396:	bc80      	pop	{r7}
 8003398:	4770      	bx	lr
 800339a:	bf00      	nop
 800339c:	40012c00 	.word	0x40012c00

080033a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b087      	sub	sp, #28
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6a1b      	ldr	r3, [r3, #32]
 80033ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6a1b      	ldr	r3, [r3, #32]
 80033b4:	f023 0210 	bic.w	r2, r3, #16
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	699b      	ldr	r3, [r3, #24]
 80033c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	021b      	lsls	r3, r3, #8
 80033de:	68fa      	ldr	r2, [r7, #12]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	f023 0320 	bic.w	r3, r3, #32
 80033ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	011b      	lsls	r3, r3, #4
 80033f2:	697a      	ldr	r2, [r7, #20]
 80033f4:	4313      	orrs	r3, r2
 80033f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	4a1d      	ldr	r2, [pc, #116]	; (8003470 <TIM_OC2_SetConfig+0xd0>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d10d      	bne.n	800341c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003406:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	011b      	lsls	r3, r3, #4
 800340e:	697a      	ldr	r2, [r7, #20]
 8003410:	4313      	orrs	r3, r2
 8003412:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800341a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	4a14      	ldr	r2, [pc, #80]	; (8003470 <TIM_OC2_SetConfig+0xd0>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d113      	bne.n	800344c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800342a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003432:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	695b      	ldr	r3, [r3, #20]
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	693a      	ldr	r2, [r7, #16]
 800343c:	4313      	orrs	r3, r2
 800343e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	699b      	ldr	r3, [r3, #24]
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	693a      	ldr	r2, [r7, #16]
 8003448:	4313      	orrs	r3, r2
 800344a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	693a      	ldr	r2, [r7, #16]
 8003450:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	68fa      	ldr	r2, [r7, #12]
 8003456:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	685a      	ldr	r2, [r3, #4]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	697a      	ldr	r2, [r7, #20]
 8003464:	621a      	str	r2, [r3, #32]
}
 8003466:	bf00      	nop
 8003468:	371c      	adds	r7, #28
 800346a:	46bd      	mov	sp, r7
 800346c:	bc80      	pop	{r7}
 800346e:	4770      	bx	lr
 8003470:	40012c00 	.word	0x40012c00

08003474 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003474:	b480      	push	{r7}
 8003476:	b087      	sub	sp, #28
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6a1b      	ldr	r3, [r3, #32]
 8003482:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6a1b      	ldr	r3, [r3, #32]
 8003488:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	69db      	ldr	r3, [r3, #28]
 800349a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f023 0303 	bic.w	r3, r3, #3
 80034aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	68fa      	ldr	r2, [r7, #12]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80034bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	021b      	lsls	r3, r3, #8
 80034c4:	697a      	ldr	r2, [r7, #20]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a1d      	ldr	r2, [pc, #116]	; (8003544 <TIM_OC3_SetConfig+0xd0>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d10d      	bne.n	80034ee <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80034d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	68db      	ldr	r3, [r3, #12]
 80034de:	021b      	lsls	r3, r3, #8
 80034e0:	697a      	ldr	r2, [r7, #20]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80034ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	4a14      	ldr	r2, [pc, #80]	; (8003544 <TIM_OC3_SetConfig+0xd0>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d113      	bne.n	800351e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80034fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003504:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	695b      	ldr	r3, [r3, #20]
 800350a:	011b      	lsls	r3, r3, #4
 800350c:	693a      	ldr	r2, [r7, #16]
 800350e:	4313      	orrs	r3, r2
 8003510:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	699b      	ldr	r3, [r3, #24]
 8003516:	011b      	lsls	r3, r3, #4
 8003518:	693a      	ldr	r2, [r7, #16]
 800351a:	4313      	orrs	r3, r2
 800351c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	693a      	ldr	r2, [r7, #16]
 8003522:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	68fa      	ldr	r2, [r7, #12]
 8003528:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	685a      	ldr	r2, [r3, #4]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	697a      	ldr	r2, [r7, #20]
 8003536:	621a      	str	r2, [r3, #32]
}
 8003538:	bf00      	nop
 800353a:	371c      	adds	r7, #28
 800353c:	46bd      	mov	sp, r7
 800353e:	bc80      	pop	{r7}
 8003540:	4770      	bx	lr
 8003542:	bf00      	nop
 8003544:	40012c00 	.word	0x40012c00

08003548 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003548:	b480      	push	{r7}
 800354a:	b087      	sub	sp, #28
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6a1b      	ldr	r3, [r3, #32]
 8003556:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6a1b      	ldr	r3, [r3, #32]
 800355c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	69db      	ldr	r3, [r3, #28]
 800356e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003576:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800357e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	021b      	lsls	r3, r3, #8
 8003586:	68fa      	ldr	r2, [r7, #12]
 8003588:	4313      	orrs	r3, r2
 800358a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003592:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	031b      	lsls	r3, r3, #12
 800359a:	693a      	ldr	r2, [r7, #16]
 800359c:	4313      	orrs	r3, r2
 800359e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	4a0f      	ldr	r2, [pc, #60]	; (80035e0 <TIM_OC4_SetConfig+0x98>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d109      	bne.n	80035bc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80035ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	695b      	ldr	r3, [r3, #20]
 80035b4:	019b      	lsls	r3, r3, #6
 80035b6:	697a      	ldr	r2, [r7, #20]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	697a      	ldr	r2, [r7, #20]
 80035c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	68fa      	ldr	r2, [r7, #12]
 80035c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	685a      	ldr	r2, [r3, #4]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	693a      	ldr	r2, [r7, #16]
 80035d4:	621a      	str	r2, [r3, #32]
}
 80035d6:	bf00      	nop
 80035d8:	371c      	adds	r7, #28
 80035da:	46bd      	mov	sp, r7
 80035dc:	bc80      	pop	{r7}
 80035de:	4770      	bx	lr
 80035e0:	40012c00 	.word	0x40012c00

080035e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b087      	sub	sp, #28
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	60f8      	str	r0, [r7, #12]
 80035ec:	60b9      	str	r1, [r7, #8]
 80035ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	6a1b      	ldr	r3, [r3, #32]
 80035f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	6a1b      	ldr	r3, [r3, #32]
 80035fa:	f023 0201 	bic.w	r2, r3, #1
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	699b      	ldr	r3, [r3, #24]
 8003606:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800360e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	011b      	lsls	r3, r3, #4
 8003614:	693a      	ldr	r2, [r7, #16]
 8003616:	4313      	orrs	r3, r2
 8003618:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	f023 030a 	bic.w	r3, r3, #10
 8003620:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003622:	697a      	ldr	r2, [r7, #20]
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	4313      	orrs	r3, r2
 8003628:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	693a      	ldr	r2, [r7, #16]
 800362e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	697a      	ldr	r2, [r7, #20]
 8003634:	621a      	str	r2, [r3, #32]
}
 8003636:	bf00      	nop
 8003638:	371c      	adds	r7, #28
 800363a:	46bd      	mov	sp, r7
 800363c:	bc80      	pop	{r7}
 800363e:	4770      	bx	lr

08003640 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003640:	b480      	push	{r7}
 8003642:	b087      	sub	sp, #28
 8003644:	af00      	add	r7, sp, #0
 8003646:	60f8      	str	r0, [r7, #12]
 8003648:	60b9      	str	r1, [r7, #8]
 800364a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6a1b      	ldr	r3, [r3, #32]
 8003650:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	6a1b      	ldr	r3, [r3, #32]
 8003656:	f023 0210 	bic.w	r2, r3, #16
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	699b      	ldr	r3, [r3, #24]
 8003662:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800366a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	031b      	lsls	r3, r3, #12
 8003670:	693a      	ldr	r2, [r7, #16]
 8003672:	4313      	orrs	r3, r2
 8003674:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800367c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	011b      	lsls	r3, r3, #4
 8003682:	697a      	ldr	r2, [r7, #20]
 8003684:	4313      	orrs	r3, r2
 8003686:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	693a      	ldr	r2, [r7, #16]
 800368c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	697a      	ldr	r2, [r7, #20]
 8003692:	621a      	str	r2, [r3, #32]
}
 8003694:	bf00      	nop
 8003696:	371c      	adds	r7, #28
 8003698:	46bd      	mov	sp, r7
 800369a:	bc80      	pop	{r7}
 800369c:	4770      	bx	lr

0800369e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800369e:	b480      	push	{r7}
 80036a0:	b085      	sub	sp, #20
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	6078      	str	r0, [r7, #4]
 80036a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80036b6:	683a      	ldr	r2, [r7, #0]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	f043 0307 	orr.w	r3, r3, #7
 80036c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	68fa      	ldr	r2, [r7, #12]
 80036c6:	609a      	str	r2, [r3, #8]
}
 80036c8:	bf00      	nop
 80036ca:	3714      	adds	r7, #20
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bc80      	pop	{r7}
 80036d0:	4770      	bx	lr

080036d2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80036d2:	b480      	push	{r7}
 80036d4:	b087      	sub	sp, #28
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	60f8      	str	r0, [r7, #12]
 80036da:	60b9      	str	r1, [r7, #8]
 80036dc:	607a      	str	r2, [r7, #4]
 80036de:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80036ec:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	021a      	lsls	r2, r3, #8
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	431a      	orrs	r2, r3
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	4313      	orrs	r3, r2
 80036fa:	697a      	ldr	r2, [r7, #20]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	697a      	ldr	r2, [r7, #20]
 8003704:	609a      	str	r2, [r3, #8]
}
 8003706:	bf00      	nop
 8003708:	371c      	adds	r7, #28
 800370a:	46bd      	mov	sp, r7
 800370c:	bc80      	pop	{r7}
 800370e:	4770      	bx	lr

08003710 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003710:	b480      	push	{r7}
 8003712:	b087      	sub	sp, #28
 8003714:	af00      	add	r7, sp, #0
 8003716:	60f8      	str	r0, [r7, #12]
 8003718:	60b9      	str	r1, [r7, #8]
 800371a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	f003 031f 	and.w	r3, r3, #31
 8003722:	2201      	movs	r2, #1
 8003724:	fa02 f303 	lsl.w	r3, r2, r3
 8003728:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	6a1a      	ldr	r2, [r3, #32]
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	43db      	mvns	r3, r3
 8003732:	401a      	ands	r2, r3
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6a1a      	ldr	r2, [r3, #32]
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	f003 031f 	and.w	r3, r3, #31
 8003742:	6879      	ldr	r1, [r7, #4]
 8003744:	fa01 f303 	lsl.w	r3, r1, r3
 8003748:	431a      	orrs	r2, r3
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	621a      	str	r2, [r3, #32]
}
 800374e:	bf00      	nop
 8003750:	371c      	adds	r7, #28
 8003752:	46bd      	mov	sp, r7
 8003754:	bc80      	pop	{r7}
 8003756:	4770      	bx	lr

08003758 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003758:	b480      	push	{r7}
 800375a:	b085      	sub	sp, #20
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003768:	2b01      	cmp	r3, #1
 800376a:	d101      	bne.n	8003770 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800376c:	2302      	movs	r3, #2
 800376e:	e046      	b.n	80037fe <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2201      	movs	r2, #1
 8003774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2202      	movs	r2, #2
 800377c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003796:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	68fa      	ldr	r2, [r7, #12]
 800379e:	4313      	orrs	r3, r2
 80037a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	68fa      	ldr	r2, [r7, #12]
 80037a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a16      	ldr	r2, [pc, #88]	; (8003808 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d00e      	beq.n	80037d2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037bc:	d009      	beq.n	80037d2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a12      	ldr	r2, [pc, #72]	; (800380c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d004      	beq.n	80037d2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a10      	ldr	r2, [pc, #64]	; (8003810 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d10c      	bne.n	80037ec <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	68ba      	ldr	r2, [r7, #8]
 80037e0:	4313      	orrs	r3, r2
 80037e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	68ba      	ldr	r2, [r7, #8]
 80037ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2201      	movs	r2, #1
 80037f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2200      	movs	r2, #0
 80037f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037fc:	2300      	movs	r3, #0
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3714      	adds	r7, #20
 8003802:	46bd      	mov	sp, r7
 8003804:	bc80      	pop	{r7}
 8003806:	4770      	bx	lr
 8003808:	40012c00 	.word	0x40012c00
 800380c:	40000400 	.word	0x40000400
 8003810:	40000800 	.word	0x40000800

08003814 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003814:	b480      	push	{r7}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800381c:	bf00      	nop
 800381e:	370c      	adds	r7, #12
 8003820:	46bd      	mov	sp, r7
 8003822:	bc80      	pop	{r7}
 8003824:	4770      	bx	lr

08003826 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003826:	b480      	push	{r7}
 8003828:	b083      	sub	sp, #12
 800382a:	af00      	add	r7, sp, #0
 800382c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800382e:	bf00      	nop
 8003830:	370c      	adds	r7, #12
 8003832:	46bd      	mov	sp, r7
 8003834:	bc80      	pop	{r7}
 8003836:	4770      	bx	lr

08003838 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b082      	sub	sp, #8
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d101      	bne.n	800384a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e042      	b.n	80038d0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003850:	b2db      	uxtb	r3, r3
 8003852:	2b00      	cmp	r3, #0
 8003854:	d106      	bne.n	8003864 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f7fe f85a 	bl	8001918 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2224      	movs	r2, #36	; 0x24
 8003868:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	68da      	ldr	r2, [r3, #12]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800387a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f000 f91d 	bl	8003abc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	691a      	ldr	r2, [r3, #16]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003890:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	695a      	ldr	r2, [r3, #20]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	68da      	ldr	r2, [r3, #12]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2220      	movs	r2, #32
 80038bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2220      	movs	r2, #32
 80038c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2200      	movs	r2, #0
 80038cc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80038ce:	2300      	movs	r3, #0
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	3708      	adds	r7, #8
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}

080038d8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b08a      	sub	sp, #40	; 0x28
 80038dc:	af02      	add	r7, sp, #8
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	60b9      	str	r1, [r7, #8]
 80038e2:	603b      	str	r3, [r7, #0]
 80038e4:	4613      	mov	r3, r2
 80038e6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80038e8:	2300      	movs	r3, #0
 80038ea:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	2b20      	cmp	r3, #32
 80038f6:	d16d      	bne.n	80039d4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d002      	beq.n	8003904 <HAL_UART_Transmit+0x2c>
 80038fe:	88fb      	ldrh	r3, [r7, #6]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d101      	bne.n	8003908 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e066      	b.n	80039d6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2200      	movs	r2, #0
 800390c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2221      	movs	r2, #33	; 0x21
 8003912:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003916:	f7fe f99f 	bl	8001c58 <HAL_GetTick>
 800391a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	88fa      	ldrh	r2, [r7, #6]
 8003920:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	88fa      	ldrh	r2, [r7, #6]
 8003926:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003930:	d108      	bne.n	8003944 <HAL_UART_Transmit+0x6c>
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	691b      	ldr	r3, [r3, #16]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d104      	bne.n	8003944 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800393a:	2300      	movs	r3, #0
 800393c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	61bb      	str	r3, [r7, #24]
 8003942:	e003      	b.n	800394c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003948:	2300      	movs	r3, #0
 800394a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800394c:	e02a      	b.n	80039a4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	9300      	str	r3, [sp, #0]
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	2200      	movs	r2, #0
 8003956:	2180      	movs	r1, #128	; 0x80
 8003958:	68f8      	ldr	r0, [r7, #12]
 800395a:	f000 f840 	bl	80039de <UART_WaitOnFlagUntilTimeout>
 800395e:	4603      	mov	r3, r0
 8003960:	2b00      	cmp	r3, #0
 8003962:	d001      	beq.n	8003968 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003964:	2303      	movs	r3, #3
 8003966:	e036      	b.n	80039d6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003968:	69fb      	ldr	r3, [r7, #28]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d10b      	bne.n	8003986 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800396e:	69bb      	ldr	r3, [r7, #24]
 8003970:	881b      	ldrh	r3, [r3, #0]
 8003972:	461a      	mov	r2, r3
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800397c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800397e:	69bb      	ldr	r3, [r7, #24]
 8003980:	3302      	adds	r3, #2
 8003982:	61bb      	str	r3, [r7, #24]
 8003984:	e007      	b.n	8003996 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	781a      	ldrb	r2, [r3, #0]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	3301      	adds	r3, #1
 8003994:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800399a:	b29b      	uxth	r3, r3
 800399c:	3b01      	subs	r3, #1
 800399e:	b29a      	uxth	r2, r3
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039a8:	b29b      	uxth	r3, r3
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d1cf      	bne.n	800394e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	9300      	str	r3, [sp, #0]
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	2200      	movs	r2, #0
 80039b6:	2140      	movs	r1, #64	; 0x40
 80039b8:	68f8      	ldr	r0, [r7, #12]
 80039ba:	f000 f810 	bl	80039de <UART_WaitOnFlagUntilTimeout>
 80039be:	4603      	mov	r3, r0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d001      	beq.n	80039c8 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80039c4:	2303      	movs	r3, #3
 80039c6:	e006      	b.n	80039d6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2220      	movs	r2, #32
 80039cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80039d0:	2300      	movs	r3, #0
 80039d2:	e000      	b.n	80039d6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80039d4:	2302      	movs	r3, #2
  }
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3720      	adds	r7, #32
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}

080039de <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80039de:	b580      	push	{r7, lr}
 80039e0:	b090      	sub	sp, #64	; 0x40
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	60f8      	str	r0, [r7, #12]
 80039e6:	60b9      	str	r1, [r7, #8]
 80039e8:	603b      	str	r3, [r7, #0]
 80039ea:	4613      	mov	r3, r2
 80039ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039ee:	e050      	b.n	8003a92 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039f6:	d04c      	beq.n	8003a92 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80039f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d007      	beq.n	8003a0e <UART_WaitOnFlagUntilTimeout+0x30>
 80039fe:	f7fe f92b 	bl	8001c58 <HAL_GetTick>
 8003a02:	4602      	mov	r2, r0
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	1ad3      	subs	r3, r2, r3
 8003a08:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	d241      	bcs.n	8003a92 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	330c      	adds	r3, #12
 8003a14:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a18:	e853 3f00 	ldrex	r3, [r3]
 8003a1c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a20:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003a24:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	330c      	adds	r3, #12
 8003a2c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003a2e:	637a      	str	r2, [r7, #52]	; 0x34
 8003a30:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a32:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003a34:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a36:	e841 2300 	strex	r3, r2, [r1]
 8003a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d1e5      	bne.n	8003a0e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	3314      	adds	r3, #20
 8003a48:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	e853 3f00 	ldrex	r3, [r3]
 8003a50:	613b      	str	r3, [r7, #16]
   return(result);
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	f023 0301 	bic.w	r3, r3, #1
 8003a58:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	3314      	adds	r3, #20
 8003a60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a62:	623a      	str	r2, [r7, #32]
 8003a64:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a66:	69f9      	ldr	r1, [r7, #28]
 8003a68:	6a3a      	ldr	r2, [r7, #32]
 8003a6a:	e841 2300 	strex	r3, r2, [r1]
 8003a6e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d1e5      	bne.n	8003a42 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2220      	movs	r2, #32
 8003a7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2220      	movs	r2, #32
 8003a82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003a8e:	2303      	movs	r3, #3
 8003a90:	e00f      	b.n	8003ab2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	68ba      	ldr	r2, [r7, #8]
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	bf0c      	ite	eq
 8003aa2:	2301      	moveq	r3, #1
 8003aa4:	2300      	movne	r3, #0
 8003aa6:	b2db      	uxtb	r3, r3
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	79fb      	ldrb	r3, [r7, #7]
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d09f      	beq.n	80039f0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ab0:	2300      	movs	r3, #0
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3740      	adds	r7, #64	; 0x40
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
	...

08003abc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b084      	sub	sp, #16
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	691b      	ldr	r3, [r3, #16]
 8003aca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	68da      	ldr	r2, [r3, #12]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	430a      	orrs	r2, r1
 8003ad8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	689a      	ldr	r2, [r3, #8]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	691b      	ldr	r3, [r3, #16]
 8003ae2:	431a      	orrs	r2, r3
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	695b      	ldr	r3, [r3, #20]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	68db      	ldr	r3, [r3, #12]
 8003af2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003af6:	f023 030c 	bic.w	r3, r3, #12
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	6812      	ldr	r2, [r2, #0]
 8003afe:	68b9      	ldr	r1, [r7, #8]
 8003b00:	430b      	orrs	r3, r1
 8003b02:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	695b      	ldr	r3, [r3, #20]
 8003b0a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	699a      	ldr	r2, [r3, #24]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	430a      	orrs	r2, r1
 8003b18:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a2c      	ldr	r2, [pc, #176]	; (8003bd0 <UART_SetConfig+0x114>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d103      	bne.n	8003b2c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003b24:	f7fe ff42 	bl	80029ac <HAL_RCC_GetPCLK2Freq>
 8003b28:	60f8      	str	r0, [r7, #12]
 8003b2a:	e002      	b.n	8003b32 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003b2c:	f7fe ff2a 	bl	8002984 <HAL_RCC_GetPCLK1Freq>
 8003b30:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b32:	68fa      	ldr	r2, [r7, #12]
 8003b34:	4613      	mov	r3, r2
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	4413      	add	r3, r2
 8003b3a:	009a      	lsls	r2, r3, #2
 8003b3c:	441a      	add	r2, r3
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b48:	4a22      	ldr	r2, [pc, #136]	; (8003bd4 <UART_SetConfig+0x118>)
 8003b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b4e:	095b      	lsrs	r3, r3, #5
 8003b50:	0119      	lsls	r1, r3, #4
 8003b52:	68fa      	ldr	r2, [r7, #12]
 8003b54:	4613      	mov	r3, r2
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	4413      	add	r3, r2
 8003b5a:	009a      	lsls	r2, r3, #2
 8003b5c:	441a      	add	r2, r3
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	009b      	lsls	r3, r3, #2
 8003b64:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b68:	4b1a      	ldr	r3, [pc, #104]	; (8003bd4 <UART_SetConfig+0x118>)
 8003b6a:	fba3 0302 	umull	r0, r3, r3, r2
 8003b6e:	095b      	lsrs	r3, r3, #5
 8003b70:	2064      	movs	r0, #100	; 0x64
 8003b72:	fb00 f303 	mul.w	r3, r0, r3
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	011b      	lsls	r3, r3, #4
 8003b7a:	3332      	adds	r3, #50	; 0x32
 8003b7c:	4a15      	ldr	r2, [pc, #84]	; (8003bd4 <UART_SetConfig+0x118>)
 8003b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b82:	095b      	lsrs	r3, r3, #5
 8003b84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b88:	4419      	add	r1, r3
 8003b8a:	68fa      	ldr	r2, [r7, #12]
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	4413      	add	r3, r2
 8003b92:	009a      	lsls	r2, r3, #2
 8003b94:	441a      	add	r2, r3
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ba0:	4b0c      	ldr	r3, [pc, #48]	; (8003bd4 <UART_SetConfig+0x118>)
 8003ba2:	fba3 0302 	umull	r0, r3, r3, r2
 8003ba6:	095b      	lsrs	r3, r3, #5
 8003ba8:	2064      	movs	r0, #100	; 0x64
 8003baa:	fb00 f303 	mul.w	r3, r0, r3
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	011b      	lsls	r3, r3, #4
 8003bb2:	3332      	adds	r3, #50	; 0x32
 8003bb4:	4a07      	ldr	r2, [pc, #28]	; (8003bd4 <UART_SetConfig+0x118>)
 8003bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bba:	095b      	lsrs	r3, r3, #5
 8003bbc:	f003 020f 	and.w	r2, r3, #15
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	440a      	add	r2, r1
 8003bc6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003bc8:	bf00      	nop
 8003bca:	3710      	adds	r7, #16
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	40013800 	.word	0x40013800
 8003bd4:	51eb851f 	.word	0x51eb851f

08003bd8 <std>:
 8003bd8:	2300      	movs	r3, #0
 8003bda:	b510      	push	{r4, lr}
 8003bdc:	4604      	mov	r4, r0
 8003bde:	e9c0 3300 	strd	r3, r3, [r0]
 8003be2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003be6:	6083      	str	r3, [r0, #8]
 8003be8:	8181      	strh	r1, [r0, #12]
 8003bea:	6643      	str	r3, [r0, #100]	; 0x64
 8003bec:	81c2      	strh	r2, [r0, #14]
 8003bee:	6183      	str	r3, [r0, #24]
 8003bf0:	4619      	mov	r1, r3
 8003bf2:	2208      	movs	r2, #8
 8003bf4:	305c      	adds	r0, #92	; 0x5c
 8003bf6:	f000 f9e5 	bl	8003fc4 <memset>
 8003bfa:	4b05      	ldr	r3, [pc, #20]	; (8003c10 <std+0x38>)
 8003bfc:	6224      	str	r4, [r4, #32]
 8003bfe:	6263      	str	r3, [r4, #36]	; 0x24
 8003c00:	4b04      	ldr	r3, [pc, #16]	; (8003c14 <std+0x3c>)
 8003c02:	62a3      	str	r3, [r4, #40]	; 0x28
 8003c04:	4b04      	ldr	r3, [pc, #16]	; (8003c18 <std+0x40>)
 8003c06:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003c08:	4b04      	ldr	r3, [pc, #16]	; (8003c1c <std+0x44>)
 8003c0a:	6323      	str	r3, [r4, #48]	; 0x30
 8003c0c:	bd10      	pop	{r4, pc}
 8003c0e:	bf00      	nop
 8003c10:	08003e15 	.word	0x08003e15
 8003c14:	08003e37 	.word	0x08003e37
 8003c18:	08003e6f 	.word	0x08003e6f
 8003c1c:	08003e93 	.word	0x08003e93

08003c20 <stdio_exit_handler>:
 8003c20:	4a02      	ldr	r2, [pc, #8]	; (8003c2c <stdio_exit_handler+0xc>)
 8003c22:	4903      	ldr	r1, [pc, #12]	; (8003c30 <stdio_exit_handler+0x10>)
 8003c24:	4803      	ldr	r0, [pc, #12]	; (8003c34 <stdio_exit_handler+0x14>)
 8003c26:	f000 b869 	b.w	8003cfc <_fwalk_sglue>
 8003c2a:	bf00      	nop
 8003c2c:	20000084 	.word	0x20000084
 8003c30:	08004951 	.word	0x08004951
 8003c34:	20000090 	.word	0x20000090

08003c38 <cleanup_stdio>:
 8003c38:	6841      	ldr	r1, [r0, #4]
 8003c3a:	4b0c      	ldr	r3, [pc, #48]	; (8003c6c <cleanup_stdio+0x34>)
 8003c3c:	b510      	push	{r4, lr}
 8003c3e:	4299      	cmp	r1, r3
 8003c40:	4604      	mov	r4, r0
 8003c42:	d001      	beq.n	8003c48 <cleanup_stdio+0x10>
 8003c44:	f000 fe84 	bl	8004950 <_fflush_r>
 8003c48:	68a1      	ldr	r1, [r4, #8]
 8003c4a:	4b09      	ldr	r3, [pc, #36]	; (8003c70 <cleanup_stdio+0x38>)
 8003c4c:	4299      	cmp	r1, r3
 8003c4e:	d002      	beq.n	8003c56 <cleanup_stdio+0x1e>
 8003c50:	4620      	mov	r0, r4
 8003c52:	f000 fe7d 	bl	8004950 <_fflush_r>
 8003c56:	68e1      	ldr	r1, [r4, #12]
 8003c58:	4b06      	ldr	r3, [pc, #24]	; (8003c74 <cleanup_stdio+0x3c>)
 8003c5a:	4299      	cmp	r1, r3
 8003c5c:	d004      	beq.n	8003c68 <cleanup_stdio+0x30>
 8003c5e:	4620      	mov	r0, r4
 8003c60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c64:	f000 be74 	b.w	8004950 <_fflush_r>
 8003c68:	bd10      	pop	{r4, pc}
 8003c6a:	bf00      	nop
 8003c6c:	20000330 	.word	0x20000330
 8003c70:	20000398 	.word	0x20000398
 8003c74:	20000400 	.word	0x20000400

08003c78 <global_stdio_init.part.0>:
 8003c78:	b510      	push	{r4, lr}
 8003c7a:	4b0b      	ldr	r3, [pc, #44]	; (8003ca8 <global_stdio_init.part.0+0x30>)
 8003c7c:	4c0b      	ldr	r4, [pc, #44]	; (8003cac <global_stdio_init.part.0+0x34>)
 8003c7e:	4a0c      	ldr	r2, [pc, #48]	; (8003cb0 <global_stdio_init.part.0+0x38>)
 8003c80:	4620      	mov	r0, r4
 8003c82:	601a      	str	r2, [r3, #0]
 8003c84:	2104      	movs	r1, #4
 8003c86:	2200      	movs	r2, #0
 8003c88:	f7ff ffa6 	bl	8003bd8 <std>
 8003c8c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003c90:	2201      	movs	r2, #1
 8003c92:	2109      	movs	r1, #9
 8003c94:	f7ff ffa0 	bl	8003bd8 <std>
 8003c98:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003c9c:	2202      	movs	r2, #2
 8003c9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ca2:	2112      	movs	r1, #18
 8003ca4:	f7ff bf98 	b.w	8003bd8 <std>
 8003ca8:	20000468 	.word	0x20000468
 8003cac:	20000330 	.word	0x20000330
 8003cb0:	08003c21 	.word	0x08003c21

08003cb4 <__sfp_lock_acquire>:
 8003cb4:	4801      	ldr	r0, [pc, #4]	; (8003cbc <__sfp_lock_acquire+0x8>)
 8003cb6:	f000 b9fd 	b.w	80040b4 <__retarget_lock_acquire_recursive>
 8003cba:	bf00      	nop
 8003cbc:	20000471 	.word	0x20000471

08003cc0 <__sfp_lock_release>:
 8003cc0:	4801      	ldr	r0, [pc, #4]	; (8003cc8 <__sfp_lock_release+0x8>)
 8003cc2:	f000 b9f8 	b.w	80040b6 <__retarget_lock_release_recursive>
 8003cc6:	bf00      	nop
 8003cc8:	20000471 	.word	0x20000471

08003ccc <__sinit>:
 8003ccc:	b510      	push	{r4, lr}
 8003cce:	4604      	mov	r4, r0
 8003cd0:	f7ff fff0 	bl	8003cb4 <__sfp_lock_acquire>
 8003cd4:	6a23      	ldr	r3, [r4, #32]
 8003cd6:	b11b      	cbz	r3, 8003ce0 <__sinit+0x14>
 8003cd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003cdc:	f7ff bff0 	b.w	8003cc0 <__sfp_lock_release>
 8003ce0:	4b04      	ldr	r3, [pc, #16]	; (8003cf4 <__sinit+0x28>)
 8003ce2:	6223      	str	r3, [r4, #32]
 8003ce4:	4b04      	ldr	r3, [pc, #16]	; (8003cf8 <__sinit+0x2c>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d1f5      	bne.n	8003cd8 <__sinit+0xc>
 8003cec:	f7ff ffc4 	bl	8003c78 <global_stdio_init.part.0>
 8003cf0:	e7f2      	b.n	8003cd8 <__sinit+0xc>
 8003cf2:	bf00      	nop
 8003cf4:	08003c39 	.word	0x08003c39
 8003cf8:	20000468 	.word	0x20000468

08003cfc <_fwalk_sglue>:
 8003cfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d00:	4607      	mov	r7, r0
 8003d02:	4688      	mov	r8, r1
 8003d04:	4614      	mov	r4, r2
 8003d06:	2600      	movs	r6, #0
 8003d08:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003d0c:	f1b9 0901 	subs.w	r9, r9, #1
 8003d10:	d505      	bpl.n	8003d1e <_fwalk_sglue+0x22>
 8003d12:	6824      	ldr	r4, [r4, #0]
 8003d14:	2c00      	cmp	r4, #0
 8003d16:	d1f7      	bne.n	8003d08 <_fwalk_sglue+0xc>
 8003d18:	4630      	mov	r0, r6
 8003d1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d1e:	89ab      	ldrh	r3, [r5, #12]
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d907      	bls.n	8003d34 <_fwalk_sglue+0x38>
 8003d24:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003d28:	3301      	adds	r3, #1
 8003d2a:	d003      	beq.n	8003d34 <_fwalk_sglue+0x38>
 8003d2c:	4629      	mov	r1, r5
 8003d2e:	4638      	mov	r0, r7
 8003d30:	47c0      	blx	r8
 8003d32:	4306      	orrs	r6, r0
 8003d34:	3568      	adds	r5, #104	; 0x68
 8003d36:	e7e9      	b.n	8003d0c <_fwalk_sglue+0x10>

08003d38 <iprintf>:
 8003d38:	b40f      	push	{r0, r1, r2, r3}
 8003d3a:	b507      	push	{r0, r1, r2, lr}
 8003d3c:	4906      	ldr	r1, [pc, #24]	; (8003d58 <iprintf+0x20>)
 8003d3e:	ab04      	add	r3, sp, #16
 8003d40:	6808      	ldr	r0, [r1, #0]
 8003d42:	f853 2b04 	ldr.w	r2, [r3], #4
 8003d46:	6881      	ldr	r1, [r0, #8]
 8003d48:	9301      	str	r3, [sp, #4]
 8003d4a:	f000 fad1 	bl	80042f0 <_vfiprintf_r>
 8003d4e:	b003      	add	sp, #12
 8003d50:	f85d eb04 	ldr.w	lr, [sp], #4
 8003d54:	b004      	add	sp, #16
 8003d56:	4770      	bx	lr
 8003d58:	200000dc 	.word	0x200000dc

08003d5c <_puts_r>:
 8003d5c:	6a03      	ldr	r3, [r0, #32]
 8003d5e:	b570      	push	{r4, r5, r6, lr}
 8003d60:	4605      	mov	r5, r0
 8003d62:	460e      	mov	r6, r1
 8003d64:	6884      	ldr	r4, [r0, #8]
 8003d66:	b90b      	cbnz	r3, 8003d6c <_puts_r+0x10>
 8003d68:	f7ff ffb0 	bl	8003ccc <__sinit>
 8003d6c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003d6e:	07db      	lsls	r3, r3, #31
 8003d70:	d405      	bmi.n	8003d7e <_puts_r+0x22>
 8003d72:	89a3      	ldrh	r3, [r4, #12]
 8003d74:	0598      	lsls	r0, r3, #22
 8003d76:	d402      	bmi.n	8003d7e <_puts_r+0x22>
 8003d78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003d7a:	f000 f99b 	bl	80040b4 <__retarget_lock_acquire_recursive>
 8003d7e:	89a3      	ldrh	r3, [r4, #12]
 8003d80:	0719      	lsls	r1, r3, #28
 8003d82:	d513      	bpl.n	8003dac <_puts_r+0x50>
 8003d84:	6923      	ldr	r3, [r4, #16]
 8003d86:	b18b      	cbz	r3, 8003dac <_puts_r+0x50>
 8003d88:	3e01      	subs	r6, #1
 8003d8a:	68a3      	ldr	r3, [r4, #8]
 8003d8c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003d90:	3b01      	subs	r3, #1
 8003d92:	60a3      	str	r3, [r4, #8]
 8003d94:	b9e9      	cbnz	r1, 8003dd2 <_puts_r+0x76>
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	da2e      	bge.n	8003df8 <_puts_r+0x9c>
 8003d9a:	4622      	mov	r2, r4
 8003d9c:	210a      	movs	r1, #10
 8003d9e:	4628      	mov	r0, r5
 8003da0:	f000 f87b 	bl	8003e9a <__swbuf_r>
 8003da4:	3001      	adds	r0, #1
 8003da6:	d007      	beq.n	8003db8 <_puts_r+0x5c>
 8003da8:	250a      	movs	r5, #10
 8003daa:	e007      	b.n	8003dbc <_puts_r+0x60>
 8003dac:	4621      	mov	r1, r4
 8003dae:	4628      	mov	r0, r5
 8003db0:	f000 f8b0 	bl	8003f14 <__swsetup_r>
 8003db4:	2800      	cmp	r0, #0
 8003db6:	d0e7      	beq.n	8003d88 <_puts_r+0x2c>
 8003db8:	f04f 35ff 	mov.w	r5, #4294967295
 8003dbc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003dbe:	07da      	lsls	r2, r3, #31
 8003dc0:	d405      	bmi.n	8003dce <_puts_r+0x72>
 8003dc2:	89a3      	ldrh	r3, [r4, #12]
 8003dc4:	059b      	lsls	r3, r3, #22
 8003dc6:	d402      	bmi.n	8003dce <_puts_r+0x72>
 8003dc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003dca:	f000 f974 	bl	80040b6 <__retarget_lock_release_recursive>
 8003dce:	4628      	mov	r0, r5
 8003dd0:	bd70      	pop	{r4, r5, r6, pc}
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	da04      	bge.n	8003de0 <_puts_r+0x84>
 8003dd6:	69a2      	ldr	r2, [r4, #24]
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	dc06      	bgt.n	8003dea <_puts_r+0x8e>
 8003ddc:	290a      	cmp	r1, #10
 8003dde:	d004      	beq.n	8003dea <_puts_r+0x8e>
 8003de0:	6823      	ldr	r3, [r4, #0]
 8003de2:	1c5a      	adds	r2, r3, #1
 8003de4:	6022      	str	r2, [r4, #0]
 8003de6:	7019      	strb	r1, [r3, #0]
 8003de8:	e7cf      	b.n	8003d8a <_puts_r+0x2e>
 8003dea:	4622      	mov	r2, r4
 8003dec:	4628      	mov	r0, r5
 8003dee:	f000 f854 	bl	8003e9a <__swbuf_r>
 8003df2:	3001      	adds	r0, #1
 8003df4:	d1c9      	bne.n	8003d8a <_puts_r+0x2e>
 8003df6:	e7df      	b.n	8003db8 <_puts_r+0x5c>
 8003df8:	250a      	movs	r5, #10
 8003dfa:	6823      	ldr	r3, [r4, #0]
 8003dfc:	1c5a      	adds	r2, r3, #1
 8003dfe:	6022      	str	r2, [r4, #0]
 8003e00:	701d      	strb	r5, [r3, #0]
 8003e02:	e7db      	b.n	8003dbc <_puts_r+0x60>

08003e04 <puts>:
 8003e04:	4b02      	ldr	r3, [pc, #8]	; (8003e10 <puts+0xc>)
 8003e06:	4601      	mov	r1, r0
 8003e08:	6818      	ldr	r0, [r3, #0]
 8003e0a:	f7ff bfa7 	b.w	8003d5c <_puts_r>
 8003e0e:	bf00      	nop
 8003e10:	200000dc 	.word	0x200000dc

08003e14 <__sread>:
 8003e14:	b510      	push	{r4, lr}
 8003e16:	460c      	mov	r4, r1
 8003e18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e1c:	f000 f8fc 	bl	8004018 <_read_r>
 8003e20:	2800      	cmp	r0, #0
 8003e22:	bfab      	itete	ge
 8003e24:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003e26:	89a3      	ldrhlt	r3, [r4, #12]
 8003e28:	181b      	addge	r3, r3, r0
 8003e2a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003e2e:	bfac      	ite	ge
 8003e30:	6563      	strge	r3, [r4, #84]	; 0x54
 8003e32:	81a3      	strhlt	r3, [r4, #12]
 8003e34:	bd10      	pop	{r4, pc}

08003e36 <__swrite>:
 8003e36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e3a:	461f      	mov	r7, r3
 8003e3c:	898b      	ldrh	r3, [r1, #12]
 8003e3e:	4605      	mov	r5, r0
 8003e40:	05db      	lsls	r3, r3, #23
 8003e42:	460c      	mov	r4, r1
 8003e44:	4616      	mov	r6, r2
 8003e46:	d505      	bpl.n	8003e54 <__swrite+0x1e>
 8003e48:	2302      	movs	r3, #2
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e50:	f000 f8d0 	bl	8003ff4 <_lseek_r>
 8003e54:	89a3      	ldrh	r3, [r4, #12]
 8003e56:	4632      	mov	r2, r6
 8003e58:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e5c:	81a3      	strh	r3, [r4, #12]
 8003e5e:	4628      	mov	r0, r5
 8003e60:	463b      	mov	r3, r7
 8003e62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003e66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e6a:	f000 b8e7 	b.w	800403c <_write_r>

08003e6e <__sseek>:
 8003e6e:	b510      	push	{r4, lr}
 8003e70:	460c      	mov	r4, r1
 8003e72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e76:	f000 f8bd 	bl	8003ff4 <_lseek_r>
 8003e7a:	1c43      	adds	r3, r0, #1
 8003e7c:	89a3      	ldrh	r3, [r4, #12]
 8003e7e:	bf15      	itete	ne
 8003e80:	6560      	strne	r0, [r4, #84]	; 0x54
 8003e82:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003e86:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003e8a:	81a3      	strheq	r3, [r4, #12]
 8003e8c:	bf18      	it	ne
 8003e8e:	81a3      	strhne	r3, [r4, #12]
 8003e90:	bd10      	pop	{r4, pc}

08003e92 <__sclose>:
 8003e92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e96:	f000 b89d 	b.w	8003fd4 <_close_r>

08003e9a <__swbuf_r>:
 8003e9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e9c:	460e      	mov	r6, r1
 8003e9e:	4614      	mov	r4, r2
 8003ea0:	4605      	mov	r5, r0
 8003ea2:	b118      	cbz	r0, 8003eac <__swbuf_r+0x12>
 8003ea4:	6a03      	ldr	r3, [r0, #32]
 8003ea6:	b90b      	cbnz	r3, 8003eac <__swbuf_r+0x12>
 8003ea8:	f7ff ff10 	bl	8003ccc <__sinit>
 8003eac:	69a3      	ldr	r3, [r4, #24]
 8003eae:	60a3      	str	r3, [r4, #8]
 8003eb0:	89a3      	ldrh	r3, [r4, #12]
 8003eb2:	071a      	lsls	r2, r3, #28
 8003eb4:	d525      	bpl.n	8003f02 <__swbuf_r+0x68>
 8003eb6:	6923      	ldr	r3, [r4, #16]
 8003eb8:	b31b      	cbz	r3, 8003f02 <__swbuf_r+0x68>
 8003eba:	6823      	ldr	r3, [r4, #0]
 8003ebc:	6922      	ldr	r2, [r4, #16]
 8003ebe:	b2f6      	uxtb	r6, r6
 8003ec0:	1a98      	subs	r0, r3, r2
 8003ec2:	6963      	ldr	r3, [r4, #20]
 8003ec4:	4637      	mov	r7, r6
 8003ec6:	4283      	cmp	r3, r0
 8003ec8:	dc04      	bgt.n	8003ed4 <__swbuf_r+0x3a>
 8003eca:	4621      	mov	r1, r4
 8003ecc:	4628      	mov	r0, r5
 8003ece:	f000 fd3f 	bl	8004950 <_fflush_r>
 8003ed2:	b9e0      	cbnz	r0, 8003f0e <__swbuf_r+0x74>
 8003ed4:	68a3      	ldr	r3, [r4, #8]
 8003ed6:	3b01      	subs	r3, #1
 8003ed8:	60a3      	str	r3, [r4, #8]
 8003eda:	6823      	ldr	r3, [r4, #0]
 8003edc:	1c5a      	adds	r2, r3, #1
 8003ede:	6022      	str	r2, [r4, #0]
 8003ee0:	701e      	strb	r6, [r3, #0]
 8003ee2:	6962      	ldr	r2, [r4, #20]
 8003ee4:	1c43      	adds	r3, r0, #1
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d004      	beq.n	8003ef4 <__swbuf_r+0x5a>
 8003eea:	89a3      	ldrh	r3, [r4, #12]
 8003eec:	07db      	lsls	r3, r3, #31
 8003eee:	d506      	bpl.n	8003efe <__swbuf_r+0x64>
 8003ef0:	2e0a      	cmp	r6, #10
 8003ef2:	d104      	bne.n	8003efe <__swbuf_r+0x64>
 8003ef4:	4621      	mov	r1, r4
 8003ef6:	4628      	mov	r0, r5
 8003ef8:	f000 fd2a 	bl	8004950 <_fflush_r>
 8003efc:	b938      	cbnz	r0, 8003f0e <__swbuf_r+0x74>
 8003efe:	4638      	mov	r0, r7
 8003f00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f02:	4621      	mov	r1, r4
 8003f04:	4628      	mov	r0, r5
 8003f06:	f000 f805 	bl	8003f14 <__swsetup_r>
 8003f0a:	2800      	cmp	r0, #0
 8003f0c:	d0d5      	beq.n	8003eba <__swbuf_r+0x20>
 8003f0e:	f04f 37ff 	mov.w	r7, #4294967295
 8003f12:	e7f4      	b.n	8003efe <__swbuf_r+0x64>

08003f14 <__swsetup_r>:
 8003f14:	b538      	push	{r3, r4, r5, lr}
 8003f16:	4b2a      	ldr	r3, [pc, #168]	; (8003fc0 <__swsetup_r+0xac>)
 8003f18:	4605      	mov	r5, r0
 8003f1a:	6818      	ldr	r0, [r3, #0]
 8003f1c:	460c      	mov	r4, r1
 8003f1e:	b118      	cbz	r0, 8003f28 <__swsetup_r+0x14>
 8003f20:	6a03      	ldr	r3, [r0, #32]
 8003f22:	b90b      	cbnz	r3, 8003f28 <__swsetup_r+0x14>
 8003f24:	f7ff fed2 	bl	8003ccc <__sinit>
 8003f28:	89a3      	ldrh	r3, [r4, #12]
 8003f2a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003f2e:	0718      	lsls	r0, r3, #28
 8003f30:	d422      	bmi.n	8003f78 <__swsetup_r+0x64>
 8003f32:	06d9      	lsls	r1, r3, #27
 8003f34:	d407      	bmi.n	8003f46 <__swsetup_r+0x32>
 8003f36:	2309      	movs	r3, #9
 8003f38:	602b      	str	r3, [r5, #0]
 8003f3a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003f3e:	f04f 30ff 	mov.w	r0, #4294967295
 8003f42:	81a3      	strh	r3, [r4, #12]
 8003f44:	e034      	b.n	8003fb0 <__swsetup_r+0x9c>
 8003f46:	0758      	lsls	r0, r3, #29
 8003f48:	d512      	bpl.n	8003f70 <__swsetup_r+0x5c>
 8003f4a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003f4c:	b141      	cbz	r1, 8003f60 <__swsetup_r+0x4c>
 8003f4e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003f52:	4299      	cmp	r1, r3
 8003f54:	d002      	beq.n	8003f5c <__swsetup_r+0x48>
 8003f56:	4628      	mov	r0, r5
 8003f58:	f000 f8ae 	bl	80040b8 <_free_r>
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	6363      	str	r3, [r4, #52]	; 0x34
 8003f60:	89a3      	ldrh	r3, [r4, #12]
 8003f62:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003f66:	81a3      	strh	r3, [r4, #12]
 8003f68:	2300      	movs	r3, #0
 8003f6a:	6063      	str	r3, [r4, #4]
 8003f6c:	6923      	ldr	r3, [r4, #16]
 8003f6e:	6023      	str	r3, [r4, #0]
 8003f70:	89a3      	ldrh	r3, [r4, #12]
 8003f72:	f043 0308 	orr.w	r3, r3, #8
 8003f76:	81a3      	strh	r3, [r4, #12]
 8003f78:	6923      	ldr	r3, [r4, #16]
 8003f7a:	b94b      	cbnz	r3, 8003f90 <__swsetup_r+0x7c>
 8003f7c:	89a3      	ldrh	r3, [r4, #12]
 8003f7e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003f82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f86:	d003      	beq.n	8003f90 <__swsetup_r+0x7c>
 8003f88:	4621      	mov	r1, r4
 8003f8a:	4628      	mov	r0, r5
 8003f8c:	f000 fd2d 	bl	80049ea <__smakebuf_r>
 8003f90:	89a0      	ldrh	r0, [r4, #12]
 8003f92:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003f96:	f010 0301 	ands.w	r3, r0, #1
 8003f9a:	d00a      	beq.n	8003fb2 <__swsetup_r+0x9e>
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	60a3      	str	r3, [r4, #8]
 8003fa0:	6963      	ldr	r3, [r4, #20]
 8003fa2:	425b      	negs	r3, r3
 8003fa4:	61a3      	str	r3, [r4, #24]
 8003fa6:	6923      	ldr	r3, [r4, #16]
 8003fa8:	b943      	cbnz	r3, 8003fbc <__swsetup_r+0xa8>
 8003faa:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003fae:	d1c4      	bne.n	8003f3a <__swsetup_r+0x26>
 8003fb0:	bd38      	pop	{r3, r4, r5, pc}
 8003fb2:	0781      	lsls	r1, r0, #30
 8003fb4:	bf58      	it	pl
 8003fb6:	6963      	ldrpl	r3, [r4, #20]
 8003fb8:	60a3      	str	r3, [r4, #8]
 8003fba:	e7f4      	b.n	8003fa6 <__swsetup_r+0x92>
 8003fbc:	2000      	movs	r0, #0
 8003fbe:	e7f7      	b.n	8003fb0 <__swsetup_r+0x9c>
 8003fc0:	200000dc 	.word	0x200000dc

08003fc4 <memset>:
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	4402      	add	r2, r0
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d100      	bne.n	8003fce <memset+0xa>
 8003fcc:	4770      	bx	lr
 8003fce:	f803 1b01 	strb.w	r1, [r3], #1
 8003fd2:	e7f9      	b.n	8003fc8 <memset+0x4>

08003fd4 <_close_r>:
 8003fd4:	b538      	push	{r3, r4, r5, lr}
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	4d05      	ldr	r5, [pc, #20]	; (8003ff0 <_close_r+0x1c>)
 8003fda:	4604      	mov	r4, r0
 8003fdc:	4608      	mov	r0, r1
 8003fde:	602b      	str	r3, [r5, #0]
 8003fe0:	f7fd fd4f 	bl	8001a82 <_close>
 8003fe4:	1c43      	adds	r3, r0, #1
 8003fe6:	d102      	bne.n	8003fee <_close_r+0x1a>
 8003fe8:	682b      	ldr	r3, [r5, #0]
 8003fea:	b103      	cbz	r3, 8003fee <_close_r+0x1a>
 8003fec:	6023      	str	r3, [r4, #0]
 8003fee:	bd38      	pop	{r3, r4, r5, pc}
 8003ff0:	2000046c 	.word	0x2000046c

08003ff4 <_lseek_r>:
 8003ff4:	b538      	push	{r3, r4, r5, lr}
 8003ff6:	4604      	mov	r4, r0
 8003ff8:	4608      	mov	r0, r1
 8003ffa:	4611      	mov	r1, r2
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	4d05      	ldr	r5, [pc, #20]	; (8004014 <_lseek_r+0x20>)
 8004000:	602a      	str	r2, [r5, #0]
 8004002:	461a      	mov	r2, r3
 8004004:	f7fd fd61 	bl	8001aca <_lseek>
 8004008:	1c43      	adds	r3, r0, #1
 800400a:	d102      	bne.n	8004012 <_lseek_r+0x1e>
 800400c:	682b      	ldr	r3, [r5, #0]
 800400e:	b103      	cbz	r3, 8004012 <_lseek_r+0x1e>
 8004010:	6023      	str	r3, [r4, #0]
 8004012:	bd38      	pop	{r3, r4, r5, pc}
 8004014:	2000046c 	.word	0x2000046c

08004018 <_read_r>:
 8004018:	b538      	push	{r3, r4, r5, lr}
 800401a:	4604      	mov	r4, r0
 800401c:	4608      	mov	r0, r1
 800401e:	4611      	mov	r1, r2
 8004020:	2200      	movs	r2, #0
 8004022:	4d05      	ldr	r5, [pc, #20]	; (8004038 <_read_r+0x20>)
 8004024:	602a      	str	r2, [r5, #0]
 8004026:	461a      	mov	r2, r3
 8004028:	f7fd fcf2 	bl	8001a10 <_read>
 800402c:	1c43      	adds	r3, r0, #1
 800402e:	d102      	bne.n	8004036 <_read_r+0x1e>
 8004030:	682b      	ldr	r3, [r5, #0]
 8004032:	b103      	cbz	r3, 8004036 <_read_r+0x1e>
 8004034:	6023      	str	r3, [r4, #0]
 8004036:	bd38      	pop	{r3, r4, r5, pc}
 8004038:	2000046c 	.word	0x2000046c

0800403c <_write_r>:
 800403c:	b538      	push	{r3, r4, r5, lr}
 800403e:	4604      	mov	r4, r0
 8004040:	4608      	mov	r0, r1
 8004042:	4611      	mov	r1, r2
 8004044:	2200      	movs	r2, #0
 8004046:	4d05      	ldr	r5, [pc, #20]	; (800405c <_write_r+0x20>)
 8004048:	602a      	str	r2, [r5, #0]
 800404a:	461a      	mov	r2, r3
 800404c:	f7fd fcfd 	bl	8001a4a <_write>
 8004050:	1c43      	adds	r3, r0, #1
 8004052:	d102      	bne.n	800405a <_write_r+0x1e>
 8004054:	682b      	ldr	r3, [r5, #0]
 8004056:	b103      	cbz	r3, 800405a <_write_r+0x1e>
 8004058:	6023      	str	r3, [r4, #0]
 800405a:	bd38      	pop	{r3, r4, r5, pc}
 800405c:	2000046c 	.word	0x2000046c

08004060 <__errno>:
 8004060:	4b01      	ldr	r3, [pc, #4]	; (8004068 <__errno+0x8>)
 8004062:	6818      	ldr	r0, [r3, #0]
 8004064:	4770      	bx	lr
 8004066:	bf00      	nop
 8004068:	200000dc 	.word	0x200000dc

0800406c <__libc_init_array>:
 800406c:	b570      	push	{r4, r5, r6, lr}
 800406e:	2600      	movs	r6, #0
 8004070:	4d0c      	ldr	r5, [pc, #48]	; (80040a4 <__libc_init_array+0x38>)
 8004072:	4c0d      	ldr	r4, [pc, #52]	; (80040a8 <__libc_init_array+0x3c>)
 8004074:	1b64      	subs	r4, r4, r5
 8004076:	10a4      	asrs	r4, r4, #2
 8004078:	42a6      	cmp	r6, r4
 800407a:	d109      	bne.n	8004090 <__libc_init_array+0x24>
 800407c:	f000 fd32 	bl	8004ae4 <_init>
 8004080:	2600      	movs	r6, #0
 8004082:	4d0a      	ldr	r5, [pc, #40]	; (80040ac <__libc_init_array+0x40>)
 8004084:	4c0a      	ldr	r4, [pc, #40]	; (80040b0 <__libc_init_array+0x44>)
 8004086:	1b64      	subs	r4, r4, r5
 8004088:	10a4      	asrs	r4, r4, #2
 800408a:	42a6      	cmp	r6, r4
 800408c:	d105      	bne.n	800409a <__libc_init_array+0x2e>
 800408e:	bd70      	pop	{r4, r5, r6, pc}
 8004090:	f855 3b04 	ldr.w	r3, [r5], #4
 8004094:	4798      	blx	r3
 8004096:	3601      	adds	r6, #1
 8004098:	e7ee      	b.n	8004078 <__libc_init_array+0xc>
 800409a:	f855 3b04 	ldr.w	r3, [r5], #4
 800409e:	4798      	blx	r3
 80040a0:	3601      	adds	r6, #1
 80040a2:	e7f2      	b.n	800408a <__libc_init_array+0x1e>
 80040a4:	08004bf0 	.word	0x08004bf0
 80040a8:	08004bf0 	.word	0x08004bf0
 80040ac:	08004bf0 	.word	0x08004bf0
 80040b0:	08004bf4 	.word	0x08004bf4

080040b4 <__retarget_lock_acquire_recursive>:
 80040b4:	4770      	bx	lr

080040b6 <__retarget_lock_release_recursive>:
 80040b6:	4770      	bx	lr

080040b8 <_free_r>:
 80040b8:	b538      	push	{r3, r4, r5, lr}
 80040ba:	4605      	mov	r5, r0
 80040bc:	2900      	cmp	r1, #0
 80040be:	d040      	beq.n	8004142 <_free_r+0x8a>
 80040c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040c4:	1f0c      	subs	r4, r1, #4
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	bfb8      	it	lt
 80040ca:	18e4      	addlt	r4, r4, r3
 80040cc:	f000 f8dc 	bl	8004288 <__malloc_lock>
 80040d0:	4a1c      	ldr	r2, [pc, #112]	; (8004144 <_free_r+0x8c>)
 80040d2:	6813      	ldr	r3, [r2, #0]
 80040d4:	b933      	cbnz	r3, 80040e4 <_free_r+0x2c>
 80040d6:	6063      	str	r3, [r4, #4]
 80040d8:	6014      	str	r4, [r2, #0]
 80040da:	4628      	mov	r0, r5
 80040dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80040e0:	f000 b8d8 	b.w	8004294 <__malloc_unlock>
 80040e4:	42a3      	cmp	r3, r4
 80040e6:	d908      	bls.n	80040fa <_free_r+0x42>
 80040e8:	6820      	ldr	r0, [r4, #0]
 80040ea:	1821      	adds	r1, r4, r0
 80040ec:	428b      	cmp	r3, r1
 80040ee:	bf01      	itttt	eq
 80040f0:	6819      	ldreq	r1, [r3, #0]
 80040f2:	685b      	ldreq	r3, [r3, #4]
 80040f4:	1809      	addeq	r1, r1, r0
 80040f6:	6021      	streq	r1, [r4, #0]
 80040f8:	e7ed      	b.n	80040d6 <_free_r+0x1e>
 80040fa:	461a      	mov	r2, r3
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	b10b      	cbz	r3, 8004104 <_free_r+0x4c>
 8004100:	42a3      	cmp	r3, r4
 8004102:	d9fa      	bls.n	80040fa <_free_r+0x42>
 8004104:	6811      	ldr	r1, [r2, #0]
 8004106:	1850      	adds	r0, r2, r1
 8004108:	42a0      	cmp	r0, r4
 800410a:	d10b      	bne.n	8004124 <_free_r+0x6c>
 800410c:	6820      	ldr	r0, [r4, #0]
 800410e:	4401      	add	r1, r0
 8004110:	1850      	adds	r0, r2, r1
 8004112:	4283      	cmp	r3, r0
 8004114:	6011      	str	r1, [r2, #0]
 8004116:	d1e0      	bne.n	80040da <_free_r+0x22>
 8004118:	6818      	ldr	r0, [r3, #0]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	4408      	add	r0, r1
 800411e:	6010      	str	r0, [r2, #0]
 8004120:	6053      	str	r3, [r2, #4]
 8004122:	e7da      	b.n	80040da <_free_r+0x22>
 8004124:	d902      	bls.n	800412c <_free_r+0x74>
 8004126:	230c      	movs	r3, #12
 8004128:	602b      	str	r3, [r5, #0]
 800412a:	e7d6      	b.n	80040da <_free_r+0x22>
 800412c:	6820      	ldr	r0, [r4, #0]
 800412e:	1821      	adds	r1, r4, r0
 8004130:	428b      	cmp	r3, r1
 8004132:	bf01      	itttt	eq
 8004134:	6819      	ldreq	r1, [r3, #0]
 8004136:	685b      	ldreq	r3, [r3, #4]
 8004138:	1809      	addeq	r1, r1, r0
 800413a:	6021      	streq	r1, [r4, #0]
 800413c:	6063      	str	r3, [r4, #4]
 800413e:	6054      	str	r4, [r2, #4]
 8004140:	e7cb      	b.n	80040da <_free_r+0x22>
 8004142:	bd38      	pop	{r3, r4, r5, pc}
 8004144:	20000474 	.word	0x20000474

08004148 <sbrk_aligned>:
 8004148:	b570      	push	{r4, r5, r6, lr}
 800414a:	4e0e      	ldr	r6, [pc, #56]	; (8004184 <sbrk_aligned+0x3c>)
 800414c:	460c      	mov	r4, r1
 800414e:	6831      	ldr	r1, [r6, #0]
 8004150:	4605      	mov	r5, r0
 8004152:	b911      	cbnz	r1, 800415a <sbrk_aligned+0x12>
 8004154:	f000 fca8 	bl	8004aa8 <_sbrk_r>
 8004158:	6030      	str	r0, [r6, #0]
 800415a:	4621      	mov	r1, r4
 800415c:	4628      	mov	r0, r5
 800415e:	f000 fca3 	bl	8004aa8 <_sbrk_r>
 8004162:	1c43      	adds	r3, r0, #1
 8004164:	d00a      	beq.n	800417c <sbrk_aligned+0x34>
 8004166:	1cc4      	adds	r4, r0, #3
 8004168:	f024 0403 	bic.w	r4, r4, #3
 800416c:	42a0      	cmp	r0, r4
 800416e:	d007      	beq.n	8004180 <sbrk_aligned+0x38>
 8004170:	1a21      	subs	r1, r4, r0
 8004172:	4628      	mov	r0, r5
 8004174:	f000 fc98 	bl	8004aa8 <_sbrk_r>
 8004178:	3001      	adds	r0, #1
 800417a:	d101      	bne.n	8004180 <sbrk_aligned+0x38>
 800417c:	f04f 34ff 	mov.w	r4, #4294967295
 8004180:	4620      	mov	r0, r4
 8004182:	bd70      	pop	{r4, r5, r6, pc}
 8004184:	20000478 	.word	0x20000478

08004188 <_malloc_r>:
 8004188:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800418c:	1ccd      	adds	r5, r1, #3
 800418e:	f025 0503 	bic.w	r5, r5, #3
 8004192:	3508      	adds	r5, #8
 8004194:	2d0c      	cmp	r5, #12
 8004196:	bf38      	it	cc
 8004198:	250c      	movcc	r5, #12
 800419a:	2d00      	cmp	r5, #0
 800419c:	4607      	mov	r7, r0
 800419e:	db01      	blt.n	80041a4 <_malloc_r+0x1c>
 80041a0:	42a9      	cmp	r1, r5
 80041a2:	d905      	bls.n	80041b0 <_malloc_r+0x28>
 80041a4:	230c      	movs	r3, #12
 80041a6:	2600      	movs	r6, #0
 80041a8:	603b      	str	r3, [r7, #0]
 80041aa:	4630      	mov	r0, r6
 80041ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80041b0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004284 <_malloc_r+0xfc>
 80041b4:	f000 f868 	bl	8004288 <__malloc_lock>
 80041b8:	f8d8 3000 	ldr.w	r3, [r8]
 80041bc:	461c      	mov	r4, r3
 80041be:	bb5c      	cbnz	r4, 8004218 <_malloc_r+0x90>
 80041c0:	4629      	mov	r1, r5
 80041c2:	4638      	mov	r0, r7
 80041c4:	f7ff ffc0 	bl	8004148 <sbrk_aligned>
 80041c8:	1c43      	adds	r3, r0, #1
 80041ca:	4604      	mov	r4, r0
 80041cc:	d155      	bne.n	800427a <_malloc_r+0xf2>
 80041ce:	f8d8 4000 	ldr.w	r4, [r8]
 80041d2:	4626      	mov	r6, r4
 80041d4:	2e00      	cmp	r6, #0
 80041d6:	d145      	bne.n	8004264 <_malloc_r+0xdc>
 80041d8:	2c00      	cmp	r4, #0
 80041da:	d048      	beq.n	800426e <_malloc_r+0xe6>
 80041dc:	6823      	ldr	r3, [r4, #0]
 80041de:	4631      	mov	r1, r6
 80041e0:	4638      	mov	r0, r7
 80041e2:	eb04 0903 	add.w	r9, r4, r3
 80041e6:	f000 fc5f 	bl	8004aa8 <_sbrk_r>
 80041ea:	4581      	cmp	r9, r0
 80041ec:	d13f      	bne.n	800426e <_malloc_r+0xe6>
 80041ee:	6821      	ldr	r1, [r4, #0]
 80041f0:	4638      	mov	r0, r7
 80041f2:	1a6d      	subs	r5, r5, r1
 80041f4:	4629      	mov	r1, r5
 80041f6:	f7ff ffa7 	bl	8004148 <sbrk_aligned>
 80041fa:	3001      	adds	r0, #1
 80041fc:	d037      	beq.n	800426e <_malloc_r+0xe6>
 80041fe:	6823      	ldr	r3, [r4, #0]
 8004200:	442b      	add	r3, r5
 8004202:	6023      	str	r3, [r4, #0]
 8004204:	f8d8 3000 	ldr.w	r3, [r8]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d038      	beq.n	800427e <_malloc_r+0xf6>
 800420c:	685a      	ldr	r2, [r3, #4]
 800420e:	42a2      	cmp	r2, r4
 8004210:	d12b      	bne.n	800426a <_malloc_r+0xe2>
 8004212:	2200      	movs	r2, #0
 8004214:	605a      	str	r2, [r3, #4]
 8004216:	e00f      	b.n	8004238 <_malloc_r+0xb0>
 8004218:	6822      	ldr	r2, [r4, #0]
 800421a:	1b52      	subs	r2, r2, r5
 800421c:	d41f      	bmi.n	800425e <_malloc_r+0xd6>
 800421e:	2a0b      	cmp	r2, #11
 8004220:	d917      	bls.n	8004252 <_malloc_r+0xca>
 8004222:	1961      	adds	r1, r4, r5
 8004224:	42a3      	cmp	r3, r4
 8004226:	6025      	str	r5, [r4, #0]
 8004228:	bf18      	it	ne
 800422a:	6059      	strne	r1, [r3, #4]
 800422c:	6863      	ldr	r3, [r4, #4]
 800422e:	bf08      	it	eq
 8004230:	f8c8 1000 	streq.w	r1, [r8]
 8004234:	5162      	str	r2, [r4, r5]
 8004236:	604b      	str	r3, [r1, #4]
 8004238:	4638      	mov	r0, r7
 800423a:	f104 060b 	add.w	r6, r4, #11
 800423e:	f000 f829 	bl	8004294 <__malloc_unlock>
 8004242:	f026 0607 	bic.w	r6, r6, #7
 8004246:	1d23      	adds	r3, r4, #4
 8004248:	1af2      	subs	r2, r6, r3
 800424a:	d0ae      	beq.n	80041aa <_malloc_r+0x22>
 800424c:	1b9b      	subs	r3, r3, r6
 800424e:	50a3      	str	r3, [r4, r2]
 8004250:	e7ab      	b.n	80041aa <_malloc_r+0x22>
 8004252:	42a3      	cmp	r3, r4
 8004254:	6862      	ldr	r2, [r4, #4]
 8004256:	d1dd      	bne.n	8004214 <_malloc_r+0x8c>
 8004258:	f8c8 2000 	str.w	r2, [r8]
 800425c:	e7ec      	b.n	8004238 <_malloc_r+0xb0>
 800425e:	4623      	mov	r3, r4
 8004260:	6864      	ldr	r4, [r4, #4]
 8004262:	e7ac      	b.n	80041be <_malloc_r+0x36>
 8004264:	4634      	mov	r4, r6
 8004266:	6876      	ldr	r6, [r6, #4]
 8004268:	e7b4      	b.n	80041d4 <_malloc_r+0x4c>
 800426a:	4613      	mov	r3, r2
 800426c:	e7cc      	b.n	8004208 <_malloc_r+0x80>
 800426e:	230c      	movs	r3, #12
 8004270:	4638      	mov	r0, r7
 8004272:	603b      	str	r3, [r7, #0]
 8004274:	f000 f80e 	bl	8004294 <__malloc_unlock>
 8004278:	e797      	b.n	80041aa <_malloc_r+0x22>
 800427a:	6025      	str	r5, [r4, #0]
 800427c:	e7dc      	b.n	8004238 <_malloc_r+0xb0>
 800427e:	605b      	str	r3, [r3, #4]
 8004280:	deff      	udf	#255	; 0xff
 8004282:	bf00      	nop
 8004284:	20000474 	.word	0x20000474

08004288 <__malloc_lock>:
 8004288:	4801      	ldr	r0, [pc, #4]	; (8004290 <__malloc_lock+0x8>)
 800428a:	f7ff bf13 	b.w	80040b4 <__retarget_lock_acquire_recursive>
 800428e:	bf00      	nop
 8004290:	20000470 	.word	0x20000470

08004294 <__malloc_unlock>:
 8004294:	4801      	ldr	r0, [pc, #4]	; (800429c <__malloc_unlock+0x8>)
 8004296:	f7ff bf0e 	b.w	80040b6 <__retarget_lock_release_recursive>
 800429a:	bf00      	nop
 800429c:	20000470 	.word	0x20000470

080042a0 <__sfputc_r>:
 80042a0:	6893      	ldr	r3, [r2, #8]
 80042a2:	b410      	push	{r4}
 80042a4:	3b01      	subs	r3, #1
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	6093      	str	r3, [r2, #8]
 80042aa:	da07      	bge.n	80042bc <__sfputc_r+0x1c>
 80042ac:	6994      	ldr	r4, [r2, #24]
 80042ae:	42a3      	cmp	r3, r4
 80042b0:	db01      	blt.n	80042b6 <__sfputc_r+0x16>
 80042b2:	290a      	cmp	r1, #10
 80042b4:	d102      	bne.n	80042bc <__sfputc_r+0x1c>
 80042b6:	bc10      	pop	{r4}
 80042b8:	f7ff bdef 	b.w	8003e9a <__swbuf_r>
 80042bc:	6813      	ldr	r3, [r2, #0]
 80042be:	1c58      	adds	r0, r3, #1
 80042c0:	6010      	str	r0, [r2, #0]
 80042c2:	7019      	strb	r1, [r3, #0]
 80042c4:	4608      	mov	r0, r1
 80042c6:	bc10      	pop	{r4}
 80042c8:	4770      	bx	lr

080042ca <__sfputs_r>:
 80042ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042cc:	4606      	mov	r6, r0
 80042ce:	460f      	mov	r7, r1
 80042d0:	4614      	mov	r4, r2
 80042d2:	18d5      	adds	r5, r2, r3
 80042d4:	42ac      	cmp	r4, r5
 80042d6:	d101      	bne.n	80042dc <__sfputs_r+0x12>
 80042d8:	2000      	movs	r0, #0
 80042da:	e007      	b.n	80042ec <__sfputs_r+0x22>
 80042dc:	463a      	mov	r2, r7
 80042de:	4630      	mov	r0, r6
 80042e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042e4:	f7ff ffdc 	bl	80042a0 <__sfputc_r>
 80042e8:	1c43      	adds	r3, r0, #1
 80042ea:	d1f3      	bne.n	80042d4 <__sfputs_r+0xa>
 80042ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080042f0 <_vfiprintf_r>:
 80042f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042f4:	460d      	mov	r5, r1
 80042f6:	4614      	mov	r4, r2
 80042f8:	4698      	mov	r8, r3
 80042fa:	4606      	mov	r6, r0
 80042fc:	b09d      	sub	sp, #116	; 0x74
 80042fe:	b118      	cbz	r0, 8004308 <_vfiprintf_r+0x18>
 8004300:	6a03      	ldr	r3, [r0, #32]
 8004302:	b90b      	cbnz	r3, 8004308 <_vfiprintf_r+0x18>
 8004304:	f7ff fce2 	bl	8003ccc <__sinit>
 8004308:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800430a:	07d9      	lsls	r1, r3, #31
 800430c:	d405      	bmi.n	800431a <_vfiprintf_r+0x2a>
 800430e:	89ab      	ldrh	r3, [r5, #12]
 8004310:	059a      	lsls	r2, r3, #22
 8004312:	d402      	bmi.n	800431a <_vfiprintf_r+0x2a>
 8004314:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004316:	f7ff fecd 	bl	80040b4 <__retarget_lock_acquire_recursive>
 800431a:	89ab      	ldrh	r3, [r5, #12]
 800431c:	071b      	lsls	r3, r3, #28
 800431e:	d501      	bpl.n	8004324 <_vfiprintf_r+0x34>
 8004320:	692b      	ldr	r3, [r5, #16]
 8004322:	b99b      	cbnz	r3, 800434c <_vfiprintf_r+0x5c>
 8004324:	4629      	mov	r1, r5
 8004326:	4630      	mov	r0, r6
 8004328:	f7ff fdf4 	bl	8003f14 <__swsetup_r>
 800432c:	b170      	cbz	r0, 800434c <_vfiprintf_r+0x5c>
 800432e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004330:	07dc      	lsls	r4, r3, #31
 8004332:	d504      	bpl.n	800433e <_vfiprintf_r+0x4e>
 8004334:	f04f 30ff 	mov.w	r0, #4294967295
 8004338:	b01d      	add	sp, #116	; 0x74
 800433a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800433e:	89ab      	ldrh	r3, [r5, #12]
 8004340:	0598      	lsls	r0, r3, #22
 8004342:	d4f7      	bmi.n	8004334 <_vfiprintf_r+0x44>
 8004344:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004346:	f7ff feb6 	bl	80040b6 <__retarget_lock_release_recursive>
 800434a:	e7f3      	b.n	8004334 <_vfiprintf_r+0x44>
 800434c:	2300      	movs	r3, #0
 800434e:	9309      	str	r3, [sp, #36]	; 0x24
 8004350:	2320      	movs	r3, #32
 8004352:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004356:	2330      	movs	r3, #48	; 0x30
 8004358:	f04f 0901 	mov.w	r9, #1
 800435c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004360:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8004510 <_vfiprintf_r+0x220>
 8004364:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004368:	4623      	mov	r3, r4
 800436a:	469a      	mov	sl, r3
 800436c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004370:	b10a      	cbz	r2, 8004376 <_vfiprintf_r+0x86>
 8004372:	2a25      	cmp	r2, #37	; 0x25
 8004374:	d1f9      	bne.n	800436a <_vfiprintf_r+0x7a>
 8004376:	ebba 0b04 	subs.w	fp, sl, r4
 800437a:	d00b      	beq.n	8004394 <_vfiprintf_r+0xa4>
 800437c:	465b      	mov	r3, fp
 800437e:	4622      	mov	r2, r4
 8004380:	4629      	mov	r1, r5
 8004382:	4630      	mov	r0, r6
 8004384:	f7ff ffa1 	bl	80042ca <__sfputs_r>
 8004388:	3001      	adds	r0, #1
 800438a:	f000 80a9 	beq.w	80044e0 <_vfiprintf_r+0x1f0>
 800438e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004390:	445a      	add	r2, fp
 8004392:	9209      	str	r2, [sp, #36]	; 0x24
 8004394:	f89a 3000 	ldrb.w	r3, [sl]
 8004398:	2b00      	cmp	r3, #0
 800439a:	f000 80a1 	beq.w	80044e0 <_vfiprintf_r+0x1f0>
 800439e:	2300      	movs	r3, #0
 80043a0:	f04f 32ff 	mov.w	r2, #4294967295
 80043a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80043a8:	f10a 0a01 	add.w	sl, sl, #1
 80043ac:	9304      	str	r3, [sp, #16]
 80043ae:	9307      	str	r3, [sp, #28]
 80043b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80043b4:	931a      	str	r3, [sp, #104]	; 0x68
 80043b6:	4654      	mov	r4, sl
 80043b8:	2205      	movs	r2, #5
 80043ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043be:	4854      	ldr	r0, [pc, #336]	; (8004510 <_vfiprintf_r+0x220>)
 80043c0:	f000 fb82 	bl	8004ac8 <memchr>
 80043c4:	9a04      	ldr	r2, [sp, #16]
 80043c6:	b9d8      	cbnz	r0, 8004400 <_vfiprintf_r+0x110>
 80043c8:	06d1      	lsls	r1, r2, #27
 80043ca:	bf44      	itt	mi
 80043cc:	2320      	movmi	r3, #32
 80043ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80043d2:	0713      	lsls	r3, r2, #28
 80043d4:	bf44      	itt	mi
 80043d6:	232b      	movmi	r3, #43	; 0x2b
 80043d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80043dc:	f89a 3000 	ldrb.w	r3, [sl]
 80043e0:	2b2a      	cmp	r3, #42	; 0x2a
 80043e2:	d015      	beq.n	8004410 <_vfiprintf_r+0x120>
 80043e4:	4654      	mov	r4, sl
 80043e6:	2000      	movs	r0, #0
 80043e8:	f04f 0c0a 	mov.w	ip, #10
 80043ec:	9a07      	ldr	r2, [sp, #28]
 80043ee:	4621      	mov	r1, r4
 80043f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80043f4:	3b30      	subs	r3, #48	; 0x30
 80043f6:	2b09      	cmp	r3, #9
 80043f8:	d94d      	bls.n	8004496 <_vfiprintf_r+0x1a6>
 80043fa:	b1b0      	cbz	r0, 800442a <_vfiprintf_r+0x13a>
 80043fc:	9207      	str	r2, [sp, #28]
 80043fe:	e014      	b.n	800442a <_vfiprintf_r+0x13a>
 8004400:	eba0 0308 	sub.w	r3, r0, r8
 8004404:	fa09 f303 	lsl.w	r3, r9, r3
 8004408:	4313      	orrs	r3, r2
 800440a:	46a2      	mov	sl, r4
 800440c:	9304      	str	r3, [sp, #16]
 800440e:	e7d2      	b.n	80043b6 <_vfiprintf_r+0xc6>
 8004410:	9b03      	ldr	r3, [sp, #12]
 8004412:	1d19      	adds	r1, r3, #4
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	9103      	str	r1, [sp, #12]
 8004418:	2b00      	cmp	r3, #0
 800441a:	bfbb      	ittet	lt
 800441c:	425b      	neglt	r3, r3
 800441e:	f042 0202 	orrlt.w	r2, r2, #2
 8004422:	9307      	strge	r3, [sp, #28]
 8004424:	9307      	strlt	r3, [sp, #28]
 8004426:	bfb8      	it	lt
 8004428:	9204      	strlt	r2, [sp, #16]
 800442a:	7823      	ldrb	r3, [r4, #0]
 800442c:	2b2e      	cmp	r3, #46	; 0x2e
 800442e:	d10c      	bne.n	800444a <_vfiprintf_r+0x15a>
 8004430:	7863      	ldrb	r3, [r4, #1]
 8004432:	2b2a      	cmp	r3, #42	; 0x2a
 8004434:	d134      	bne.n	80044a0 <_vfiprintf_r+0x1b0>
 8004436:	9b03      	ldr	r3, [sp, #12]
 8004438:	3402      	adds	r4, #2
 800443a:	1d1a      	adds	r2, r3, #4
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	9203      	str	r2, [sp, #12]
 8004440:	2b00      	cmp	r3, #0
 8004442:	bfb8      	it	lt
 8004444:	f04f 33ff 	movlt.w	r3, #4294967295
 8004448:	9305      	str	r3, [sp, #20]
 800444a:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004514 <_vfiprintf_r+0x224>
 800444e:	2203      	movs	r2, #3
 8004450:	4650      	mov	r0, sl
 8004452:	7821      	ldrb	r1, [r4, #0]
 8004454:	f000 fb38 	bl	8004ac8 <memchr>
 8004458:	b138      	cbz	r0, 800446a <_vfiprintf_r+0x17a>
 800445a:	2240      	movs	r2, #64	; 0x40
 800445c:	9b04      	ldr	r3, [sp, #16]
 800445e:	eba0 000a 	sub.w	r0, r0, sl
 8004462:	4082      	lsls	r2, r0
 8004464:	4313      	orrs	r3, r2
 8004466:	3401      	adds	r4, #1
 8004468:	9304      	str	r3, [sp, #16]
 800446a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800446e:	2206      	movs	r2, #6
 8004470:	4829      	ldr	r0, [pc, #164]	; (8004518 <_vfiprintf_r+0x228>)
 8004472:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004476:	f000 fb27 	bl	8004ac8 <memchr>
 800447a:	2800      	cmp	r0, #0
 800447c:	d03f      	beq.n	80044fe <_vfiprintf_r+0x20e>
 800447e:	4b27      	ldr	r3, [pc, #156]	; (800451c <_vfiprintf_r+0x22c>)
 8004480:	bb1b      	cbnz	r3, 80044ca <_vfiprintf_r+0x1da>
 8004482:	9b03      	ldr	r3, [sp, #12]
 8004484:	3307      	adds	r3, #7
 8004486:	f023 0307 	bic.w	r3, r3, #7
 800448a:	3308      	adds	r3, #8
 800448c:	9303      	str	r3, [sp, #12]
 800448e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004490:	443b      	add	r3, r7
 8004492:	9309      	str	r3, [sp, #36]	; 0x24
 8004494:	e768      	b.n	8004368 <_vfiprintf_r+0x78>
 8004496:	460c      	mov	r4, r1
 8004498:	2001      	movs	r0, #1
 800449a:	fb0c 3202 	mla	r2, ip, r2, r3
 800449e:	e7a6      	b.n	80043ee <_vfiprintf_r+0xfe>
 80044a0:	2300      	movs	r3, #0
 80044a2:	f04f 0c0a 	mov.w	ip, #10
 80044a6:	4619      	mov	r1, r3
 80044a8:	3401      	adds	r4, #1
 80044aa:	9305      	str	r3, [sp, #20]
 80044ac:	4620      	mov	r0, r4
 80044ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80044b2:	3a30      	subs	r2, #48	; 0x30
 80044b4:	2a09      	cmp	r2, #9
 80044b6:	d903      	bls.n	80044c0 <_vfiprintf_r+0x1d0>
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d0c6      	beq.n	800444a <_vfiprintf_r+0x15a>
 80044bc:	9105      	str	r1, [sp, #20]
 80044be:	e7c4      	b.n	800444a <_vfiprintf_r+0x15a>
 80044c0:	4604      	mov	r4, r0
 80044c2:	2301      	movs	r3, #1
 80044c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80044c8:	e7f0      	b.n	80044ac <_vfiprintf_r+0x1bc>
 80044ca:	ab03      	add	r3, sp, #12
 80044cc:	9300      	str	r3, [sp, #0]
 80044ce:	462a      	mov	r2, r5
 80044d0:	4630      	mov	r0, r6
 80044d2:	4b13      	ldr	r3, [pc, #76]	; (8004520 <_vfiprintf_r+0x230>)
 80044d4:	a904      	add	r1, sp, #16
 80044d6:	f3af 8000 	nop.w
 80044da:	4607      	mov	r7, r0
 80044dc:	1c78      	adds	r0, r7, #1
 80044de:	d1d6      	bne.n	800448e <_vfiprintf_r+0x19e>
 80044e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80044e2:	07d9      	lsls	r1, r3, #31
 80044e4:	d405      	bmi.n	80044f2 <_vfiprintf_r+0x202>
 80044e6:	89ab      	ldrh	r3, [r5, #12]
 80044e8:	059a      	lsls	r2, r3, #22
 80044ea:	d402      	bmi.n	80044f2 <_vfiprintf_r+0x202>
 80044ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80044ee:	f7ff fde2 	bl	80040b6 <__retarget_lock_release_recursive>
 80044f2:	89ab      	ldrh	r3, [r5, #12]
 80044f4:	065b      	lsls	r3, r3, #25
 80044f6:	f53f af1d 	bmi.w	8004334 <_vfiprintf_r+0x44>
 80044fa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80044fc:	e71c      	b.n	8004338 <_vfiprintf_r+0x48>
 80044fe:	ab03      	add	r3, sp, #12
 8004500:	9300      	str	r3, [sp, #0]
 8004502:	462a      	mov	r2, r5
 8004504:	4630      	mov	r0, r6
 8004506:	4b06      	ldr	r3, [pc, #24]	; (8004520 <_vfiprintf_r+0x230>)
 8004508:	a904      	add	r1, sp, #16
 800450a:	f000 f87d 	bl	8004608 <_printf_i>
 800450e:	e7e4      	b.n	80044da <_vfiprintf_r+0x1ea>
 8004510:	08004bba 	.word	0x08004bba
 8004514:	08004bc0 	.word	0x08004bc0
 8004518:	08004bc4 	.word	0x08004bc4
 800451c:	00000000 	.word	0x00000000
 8004520:	080042cb 	.word	0x080042cb

08004524 <_printf_common>:
 8004524:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004528:	4616      	mov	r6, r2
 800452a:	4699      	mov	r9, r3
 800452c:	688a      	ldr	r2, [r1, #8]
 800452e:	690b      	ldr	r3, [r1, #16]
 8004530:	4607      	mov	r7, r0
 8004532:	4293      	cmp	r3, r2
 8004534:	bfb8      	it	lt
 8004536:	4613      	movlt	r3, r2
 8004538:	6033      	str	r3, [r6, #0]
 800453a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800453e:	460c      	mov	r4, r1
 8004540:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004544:	b10a      	cbz	r2, 800454a <_printf_common+0x26>
 8004546:	3301      	adds	r3, #1
 8004548:	6033      	str	r3, [r6, #0]
 800454a:	6823      	ldr	r3, [r4, #0]
 800454c:	0699      	lsls	r1, r3, #26
 800454e:	bf42      	ittt	mi
 8004550:	6833      	ldrmi	r3, [r6, #0]
 8004552:	3302      	addmi	r3, #2
 8004554:	6033      	strmi	r3, [r6, #0]
 8004556:	6825      	ldr	r5, [r4, #0]
 8004558:	f015 0506 	ands.w	r5, r5, #6
 800455c:	d106      	bne.n	800456c <_printf_common+0x48>
 800455e:	f104 0a19 	add.w	sl, r4, #25
 8004562:	68e3      	ldr	r3, [r4, #12]
 8004564:	6832      	ldr	r2, [r6, #0]
 8004566:	1a9b      	subs	r3, r3, r2
 8004568:	42ab      	cmp	r3, r5
 800456a:	dc2b      	bgt.n	80045c4 <_printf_common+0xa0>
 800456c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004570:	1e13      	subs	r3, r2, #0
 8004572:	6822      	ldr	r2, [r4, #0]
 8004574:	bf18      	it	ne
 8004576:	2301      	movne	r3, #1
 8004578:	0692      	lsls	r2, r2, #26
 800457a:	d430      	bmi.n	80045de <_printf_common+0xba>
 800457c:	4649      	mov	r1, r9
 800457e:	4638      	mov	r0, r7
 8004580:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004584:	47c0      	blx	r8
 8004586:	3001      	adds	r0, #1
 8004588:	d023      	beq.n	80045d2 <_printf_common+0xae>
 800458a:	6823      	ldr	r3, [r4, #0]
 800458c:	6922      	ldr	r2, [r4, #16]
 800458e:	f003 0306 	and.w	r3, r3, #6
 8004592:	2b04      	cmp	r3, #4
 8004594:	bf14      	ite	ne
 8004596:	2500      	movne	r5, #0
 8004598:	6833      	ldreq	r3, [r6, #0]
 800459a:	f04f 0600 	mov.w	r6, #0
 800459e:	bf08      	it	eq
 80045a0:	68e5      	ldreq	r5, [r4, #12]
 80045a2:	f104 041a 	add.w	r4, r4, #26
 80045a6:	bf08      	it	eq
 80045a8:	1aed      	subeq	r5, r5, r3
 80045aa:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80045ae:	bf08      	it	eq
 80045b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80045b4:	4293      	cmp	r3, r2
 80045b6:	bfc4      	itt	gt
 80045b8:	1a9b      	subgt	r3, r3, r2
 80045ba:	18ed      	addgt	r5, r5, r3
 80045bc:	42b5      	cmp	r5, r6
 80045be:	d11a      	bne.n	80045f6 <_printf_common+0xd2>
 80045c0:	2000      	movs	r0, #0
 80045c2:	e008      	b.n	80045d6 <_printf_common+0xb2>
 80045c4:	2301      	movs	r3, #1
 80045c6:	4652      	mov	r2, sl
 80045c8:	4649      	mov	r1, r9
 80045ca:	4638      	mov	r0, r7
 80045cc:	47c0      	blx	r8
 80045ce:	3001      	adds	r0, #1
 80045d0:	d103      	bne.n	80045da <_printf_common+0xb6>
 80045d2:	f04f 30ff 	mov.w	r0, #4294967295
 80045d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045da:	3501      	adds	r5, #1
 80045dc:	e7c1      	b.n	8004562 <_printf_common+0x3e>
 80045de:	2030      	movs	r0, #48	; 0x30
 80045e0:	18e1      	adds	r1, r4, r3
 80045e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80045e6:	1c5a      	adds	r2, r3, #1
 80045e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80045ec:	4422      	add	r2, r4
 80045ee:	3302      	adds	r3, #2
 80045f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80045f4:	e7c2      	b.n	800457c <_printf_common+0x58>
 80045f6:	2301      	movs	r3, #1
 80045f8:	4622      	mov	r2, r4
 80045fa:	4649      	mov	r1, r9
 80045fc:	4638      	mov	r0, r7
 80045fe:	47c0      	blx	r8
 8004600:	3001      	adds	r0, #1
 8004602:	d0e6      	beq.n	80045d2 <_printf_common+0xae>
 8004604:	3601      	adds	r6, #1
 8004606:	e7d9      	b.n	80045bc <_printf_common+0x98>

08004608 <_printf_i>:
 8004608:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800460c:	7e0f      	ldrb	r7, [r1, #24]
 800460e:	4691      	mov	r9, r2
 8004610:	2f78      	cmp	r7, #120	; 0x78
 8004612:	4680      	mov	r8, r0
 8004614:	460c      	mov	r4, r1
 8004616:	469a      	mov	sl, r3
 8004618:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800461a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800461e:	d807      	bhi.n	8004630 <_printf_i+0x28>
 8004620:	2f62      	cmp	r7, #98	; 0x62
 8004622:	d80a      	bhi.n	800463a <_printf_i+0x32>
 8004624:	2f00      	cmp	r7, #0
 8004626:	f000 80d5 	beq.w	80047d4 <_printf_i+0x1cc>
 800462a:	2f58      	cmp	r7, #88	; 0x58
 800462c:	f000 80c1 	beq.w	80047b2 <_printf_i+0x1aa>
 8004630:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004634:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004638:	e03a      	b.n	80046b0 <_printf_i+0xa8>
 800463a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800463e:	2b15      	cmp	r3, #21
 8004640:	d8f6      	bhi.n	8004630 <_printf_i+0x28>
 8004642:	a101      	add	r1, pc, #4	; (adr r1, 8004648 <_printf_i+0x40>)
 8004644:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004648:	080046a1 	.word	0x080046a1
 800464c:	080046b5 	.word	0x080046b5
 8004650:	08004631 	.word	0x08004631
 8004654:	08004631 	.word	0x08004631
 8004658:	08004631 	.word	0x08004631
 800465c:	08004631 	.word	0x08004631
 8004660:	080046b5 	.word	0x080046b5
 8004664:	08004631 	.word	0x08004631
 8004668:	08004631 	.word	0x08004631
 800466c:	08004631 	.word	0x08004631
 8004670:	08004631 	.word	0x08004631
 8004674:	080047bb 	.word	0x080047bb
 8004678:	080046e1 	.word	0x080046e1
 800467c:	08004775 	.word	0x08004775
 8004680:	08004631 	.word	0x08004631
 8004684:	08004631 	.word	0x08004631
 8004688:	080047dd 	.word	0x080047dd
 800468c:	08004631 	.word	0x08004631
 8004690:	080046e1 	.word	0x080046e1
 8004694:	08004631 	.word	0x08004631
 8004698:	08004631 	.word	0x08004631
 800469c:	0800477d 	.word	0x0800477d
 80046a0:	682b      	ldr	r3, [r5, #0]
 80046a2:	1d1a      	adds	r2, r3, #4
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	602a      	str	r2, [r5, #0]
 80046a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80046ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80046b0:	2301      	movs	r3, #1
 80046b2:	e0a0      	b.n	80047f6 <_printf_i+0x1ee>
 80046b4:	6820      	ldr	r0, [r4, #0]
 80046b6:	682b      	ldr	r3, [r5, #0]
 80046b8:	0607      	lsls	r7, r0, #24
 80046ba:	f103 0104 	add.w	r1, r3, #4
 80046be:	6029      	str	r1, [r5, #0]
 80046c0:	d501      	bpl.n	80046c6 <_printf_i+0xbe>
 80046c2:	681e      	ldr	r6, [r3, #0]
 80046c4:	e003      	b.n	80046ce <_printf_i+0xc6>
 80046c6:	0646      	lsls	r6, r0, #25
 80046c8:	d5fb      	bpl.n	80046c2 <_printf_i+0xba>
 80046ca:	f9b3 6000 	ldrsh.w	r6, [r3]
 80046ce:	2e00      	cmp	r6, #0
 80046d0:	da03      	bge.n	80046da <_printf_i+0xd2>
 80046d2:	232d      	movs	r3, #45	; 0x2d
 80046d4:	4276      	negs	r6, r6
 80046d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046da:	230a      	movs	r3, #10
 80046dc:	4859      	ldr	r0, [pc, #356]	; (8004844 <_printf_i+0x23c>)
 80046de:	e012      	b.n	8004706 <_printf_i+0xfe>
 80046e0:	682b      	ldr	r3, [r5, #0]
 80046e2:	6820      	ldr	r0, [r4, #0]
 80046e4:	1d19      	adds	r1, r3, #4
 80046e6:	6029      	str	r1, [r5, #0]
 80046e8:	0605      	lsls	r5, r0, #24
 80046ea:	d501      	bpl.n	80046f0 <_printf_i+0xe8>
 80046ec:	681e      	ldr	r6, [r3, #0]
 80046ee:	e002      	b.n	80046f6 <_printf_i+0xee>
 80046f0:	0641      	lsls	r1, r0, #25
 80046f2:	d5fb      	bpl.n	80046ec <_printf_i+0xe4>
 80046f4:	881e      	ldrh	r6, [r3, #0]
 80046f6:	2f6f      	cmp	r7, #111	; 0x6f
 80046f8:	bf0c      	ite	eq
 80046fa:	2308      	moveq	r3, #8
 80046fc:	230a      	movne	r3, #10
 80046fe:	4851      	ldr	r0, [pc, #324]	; (8004844 <_printf_i+0x23c>)
 8004700:	2100      	movs	r1, #0
 8004702:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004706:	6865      	ldr	r5, [r4, #4]
 8004708:	2d00      	cmp	r5, #0
 800470a:	bfa8      	it	ge
 800470c:	6821      	ldrge	r1, [r4, #0]
 800470e:	60a5      	str	r5, [r4, #8]
 8004710:	bfa4      	itt	ge
 8004712:	f021 0104 	bicge.w	r1, r1, #4
 8004716:	6021      	strge	r1, [r4, #0]
 8004718:	b90e      	cbnz	r6, 800471e <_printf_i+0x116>
 800471a:	2d00      	cmp	r5, #0
 800471c:	d04b      	beq.n	80047b6 <_printf_i+0x1ae>
 800471e:	4615      	mov	r5, r2
 8004720:	fbb6 f1f3 	udiv	r1, r6, r3
 8004724:	fb03 6711 	mls	r7, r3, r1, r6
 8004728:	5dc7      	ldrb	r7, [r0, r7]
 800472a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800472e:	4637      	mov	r7, r6
 8004730:	42bb      	cmp	r3, r7
 8004732:	460e      	mov	r6, r1
 8004734:	d9f4      	bls.n	8004720 <_printf_i+0x118>
 8004736:	2b08      	cmp	r3, #8
 8004738:	d10b      	bne.n	8004752 <_printf_i+0x14a>
 800473a:	6823      	ldr	r3, [r4, #0]
 800473c:	07de      	lsls	r6, r3, #31
 800473e:	d508      	bpl.n	8004752 <_printf_i+0x14a>
 8004740:	6923      	ldr	r3, [r4, #16]
 8004742:	6861      	ldr	r1, [r4, #4]
 8004744:	4299      	cmp	r1, r3
 8004746:	bfde      	ittt	le
 8004748:	2330      	movle	r3, #48	; 0x30
 800474a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800474e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004752:	1b52      	subs	r2, r2, r5
 8004754:	6122      	str	r2, [r4, #16]
 8004756:	464b      	mov	r3, r9
 8004758:	4621      	mov	r1, r4
 800475a:	4640      	mov	r0, r8
 800475c:	f8cd a000 	str.w	sl, [sp]
 8004760:	aa03      	add	r2, sp, #12
 8004762:	f7ff fedf 	bl	8004524 <_printf_common>
 8004766:	3001      	adds	r0, #1
 8004768:	d14a      	bne.n	8004800 <_printf_i+0x1f8>
 800476a:	f04f 30ff 	mov.w	r0, #4294967295
 800476e:	b004      	add	sp, #16
 8004770:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004774:	6823      	ldr	r3, [r4, #0]
 8004776:	f043 0320 	orr.w	r3, r3, #32
 800477a:	6023      	str	r3, [r4, #0]
 800477c:	2778      	movs	r7, #120	; 0x78
 800477e:	4832      	ldr	r0, [pc, #200]	; (8004848 <_printf_i+0x240>)
 8004780:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004784:	6823      	ldr	r3, [r4, #0]
 8004786:	6829      	ldr	r1, [r5, #0]
 8004788:	061f      	lsls	r7, r3, #24
 800478a:	f851 6b04 	ldr.w	r6, [r1], #4
 800478e:	d402      	bmi.n	8004796 <_printf_i+0x18e>
 8004790:	065f      	lsls	r7, r3, #25
 8004792:	bf48      	it	mi
 8004794:	b2b6      	uxthmi	r6, r6
 8004796:	07df      	lsls	r7, r3, #31
 8004798:	bf48      	it	mi
 800479a:	f043 0320 	orrmi.w	r3, r3, #32
 800479e:	6029      	str	r1, [r5, #0]
 80047a0:	bf48      	it	mi
 80047a2:	6023      	strmi	r3, [r4, #0]
 80047a4:	b91e      	cbnz	r6, 80047ae <_printf_i+0x1a6>
 80047a6:	6823      	ldr	r3, [r4, #0]
 80047a8:	f023 0320 	bic.w	r3, r3, #32
 80047ac:	6023      	str	r3, [r4, #0]
 80047ae:	2310      	movs	r3, #16
 80047b0:	e7a6      	b.n	8004700 <_printf_i+0xf8>
 80047b2:	4824      	ldr	r0, [pc, #144]	; (8004844 <_printf_i+0x23c>)
 80047b4:	e7e4      	b.n	8004780 <_printf_i+0x178>
 80047b6:	4615      	mov	r5, r2
 80047b8:	e7bd      	b.n	8004736 <_printf_i+0x12e>
 80047ba:	682b      	ldr	r3, [r5, #0]
 80047bc:	6826      	ldr	r6, [r4, #0]
 80047be:	1d18      	adds	r0, r3, #4
 80047c0:	6961      	ldr	r1, [r4, #20]
 80047c2:	6028      	str	r0, [r5, #0]
 80047c4:	0635      	lsls	r5, r6, #24
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	d501      	bpl.n	80047ce <_printf_i+0x1c6>
 80047ca:	6019      	str	r1, [r3, #0]
 80047cc:	e002      	b.n	80047d4 <_printf_i+0x1cc>
 80047ce:	0670      	lsls	r0, r6, #25
 80047d0:	d5fb      	bpl.n	80047ca <_printf_i+0x1c2>
 80047d2:	8019      	strh	r1, [r3, #0]
 80047d4:	2300      	movs	r3, #0
 80047d6:	4615      	mov	r5, r2
 80047d8:	6123      	str	r3, [r4, #16]
 80047da:	e7bc      	b.n	8004756 <_printf_i+0x14e>
 80047dc:	682b      	ldr	r3, [r5, #0]
 80047de:	2100      	movs	r1, #0
 80047e0:	1d1a      	adds	r2, r3, #4
 80047e2:	602a      	str	r2, [r5, #0]
 80047e4:	681d      	ldr	r5, [r3, #0]
 80047e6:	6862      	ldr	r2, [r4, #4]
 80047e8:	4628      	mov	r0, r5
 80047ea:	f000 f96d 	bl	8004ac8 <memchr>
 80047ee:	b108      	cbz	r0, 80047f4 <_printf_i+0x1ec>
 80047f0:	1b40      	subs	r0, r0, r5
 80047f2:	6060      	str	r0, [r4, #4]
 80047f4:	6863      	ldr	r3, [r4, #4]
 80047f6:	6123      	str	r3, [r4, #16]
 80047f8:	2300      	movs	r3, #0
 80047fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047fe:	e7aa      	b.n	8004756 <_printf_i+0x14e>
 8004800:	462a      	mov	r2, r5
 8004802:	4649      	mov	r1, r9
 8004804:	4640      	mov	r0, r8
 8004806:	6923      	ldr	r3, [r4, #16]
 8004808:	47d0      	blx	sl
 800480a:	3001      	adds	r0, #1
 800480c:	d0ad      	beq.n	800476a <_printf_i+0x162>
 800480e:	6823      	ldr	r3, [r4, #0]
 8004810:	079b      	lsls	r3, r3, #30
 8004812:	d413      	bmi.n	800483c <_printf_i+0x234>
 8004814:	68e0      	ldr	r0, [r4, #12]
 8004816:	9b03      	ldr	r3, [sp, #12]
 8004818:	4298      	cmp	r0, r3
 800481a:	bfb8      	it	lt
 800481c:	4618      	movlt	r0, r3
 800481e:	e7a6      	b.n	800476e <_printf_i+0x166>
 8004820:	2301      	movs	r3, #1
 8004822:	4632      	mov	r2, r6
 8004824:	4649      	mov	r1, r9
 8004826:	4640      	mov	r0, r8
 8004828:	47d0      	blx	sl
 800482a:	3001      	adds	r0, #1
 800482c:	d09d      	beq.n	800476a <_printf_i+0x162>
 800482e:	3501      	adds	r5, #1
 8004830:	68e3      	ldr	r3, [r4, #12]
 8004832:	9903      	ldr	r1, [sp, #12]
 8004834:	1a5b      	subs	r3, r3, r1
 8004836:	42ab      	cmp	r3, r5
 8004838:	dcf2      	bgt.n	8004820 <_printf_i+0x218>
 800483a:	e7eb      	b.n	8004814 <_printf_i+0x20c>
 800483c:	2500      	movs	r5, #0
 800483e:	f104 0619 	add.w	r6, r4, #25
 8004842:	e7f5      	b.n	8004830 <_printf_i+0x228>
 8004844:	08004bcb 	.word	0x08004bcb
 8004848:	08004bdc 	.word	0x08004bdc

0800484c <__sflush_r>:
 800484c:	898a      	ldrh	r2, [r1, #12]
 800484e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004850:	4605      	mov	r5, r0
 8004852:	0710      	lsls	r0, r2, #28
 8004854:	460c      	mov	r4, r1
 8004856:	d457      	bmi.n	8004908 <__sflush_r+0xbc>
 8004858:	684b      	ldr	r3, [r1, #4]
 800485a:	2b00      	cmp	r3, #0
 800485c:	dc04      	bgt.n	8004868 <__sflush_r+0x1c>
 800485e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004860:	2b00      	cmp	r3, #0
 8004862:	dc01      	bgt.n	8004868 <__sflush_r+0x1c>
 8004864:	2000      	movs	r0, #0
 8004866:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004868:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800486a:	2e00      	cmp	r6, #0
 800486c:	d0fa      	beq.n	8004864 <__sflush_r+0x18>
 800486e:	2300      	movs	r3, #0
 8004870:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004874:	682f      	ldr	r7, [r5, #0]
 8004876:	6a21      	ldr	r1, [r4, #32]
 8004878:	602b      	str	r3, [r5, #0]
 800487a:	d032      	beq.n	80048e2 <__sflush_r+0x96>
 800487c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800487e:	89a3      	ldrh	r3, [r4, #12]
 8004880:	075a      	lsls	r2, r3, #29
 8004882:	d505      	bpl.n	8004890 <__sflush_r+0x44>
 8004884:	6863      	ldr	r3, [r4, #4]
 8004886:	1ac0      	subs	r0, r0, r3
 8004888:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800488a:	b10b      	cbz	r3, 8004890 <__sflush_r+0x44>
 800488c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800488e:	1ac0      	subs	r0, r0, r3
 8004890:	2300      	movs	r3, #0
 8004892:	4602      	mov	r2, r0
 8004894:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004896:	4628      	mov	r0, r5
 8004898:	6a21      	ldr	r1, [r4, #32]
 800489a:	47b0      	blx	r6
 800489c:	1c43      	adds	r3, r0, #1
 800489e:	89a3      	ldrh	r3, [r4, #12]
 80048a0:	d106      	bne.n	80048b0 <__sflush_r+0x64>
 80048a2:	6829      	ldr	r1, [r5, #0]
 80048a4:	291d      	cmp	r1, #29
 80048a6:	d82b      	bhi.n	8004900 <__sflush_r+0xb4>
 80048a8:	4a28      	ldr	r2, [pc, #160]	; (800494c <__sflush_r+0x100>)
 80048aa:	410a      	asrs	r2, r1
 80048ac:	07d6      	lsls	r6, r2, #31
 80048ae:	d427      	bmi.n	8004900 <__sflush_r+0xb4>
 80048b0:	2200      	movs	r2, #0
 80048b2:	6062      	str	r2, [r4, #4]
 80048b4:	6922      	ldr	r2, [r4, #16]
 80048b6:	04d9      	lsls	r1, r3, #19
 80048b8:	6022      	str	r2, [r4, #0]
 80048ba:	d504      	bpl.n	80048c6 <__sflush_r+0x7a>
 80048bc:	1c42      	adds	r2, r0, #1
 80048be:	d101      	bne.n	80048c4 <__sflush_r+0x78>
 80048c0:	682b      	ldr	r3, [r5, #0]
 80048c2:	b903      	cbnz	r3, 80048c6 <__sflush_r+0x7a>
 80048c4:	6560      	str	r0, [r4, #84]	; 0x54
 80048c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80048c8:	602f      	str	r7, [r5, #0]
 80048ca:	2900      	cmp	r1, #0
 80048cc:	d0ca      	beq.n	8004864 <__sflush_r+0x18>
 80048ce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80048d2:	4299      	cmp	r1, r3
 80048d4:	d002      	beq.n	80048dc <__sflush_r+0x90>
 80048d6:	4628      	mov	r0, r5
 80048d8:	f7ff fbee 	bl	80040b8 <_free_r>
 80048dc:	2000      	movs	r0, #0
 80048de:	6360      	str	r0, [r4, #52]	; 0x34
 80048e0:	e7c1      	b.n	8004866 <__sflush_r+0x1a>
 80048e2:	2301      	movs	r3, #1
 80048e4:	4628      	mov	r0, r5
 80048e6:	47b0      	blx	r6
 80048e8:	1c41      	adds	r1, r0, #1
 80048ea:	d1c8      	bne.n	800487e <__sflush_r+0x32>
 80048ec:	682b      	ldr	r3, [r5, #0]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d0c5      	beq.n	800487e <__sflush_r+0x32>
 80048f2:	2b1d      	cmp	r3, #29
 80048f4:	d001      	beq.n	80048fa <__sflush_r+0xae>
 80048f6:	2b16      	cmp	r3, #22
 80048f8:	d101      	bne.n	80048fe <__sflush_r+0xb2>
 80048fa:	602f      	str	r7, [r5, #0]
 80048fc:	e7b2      	b.n	8004864 <__sflush_r+0x18>
 80048fe:	89a3      	ldrh	r3, [r4, #12]
 8004900:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004904:	81a3      	strh	r3, [r4, #12]
 8004906:	e7ae      	b.n	8004866 <__sflush_r+0x1a>
 8004908:	690f      	ldr	r7, [r1, #16]
 800490a:	2f00      	cmp	r7, #0
 800490c:	d0aa      	beq.n	8004864 <__sflush_r+0x18>
 800490e:	0793      	lsls	r3, r2, #30
 8004910:	bf18      	it	ne
 8004912:	2300      	movne	r3, #0
 8004914:	680e      	ldr	r6, [r1, #0]
 8004916:	bf08      	it	eq
 8004918:	694b      	ldreq	r3, [r1, #20]
 800491a:	1bf6      	subs	r6, r6, r7
 800491c:	600f      	str	r7, [r1, #0]
 800491e:	608b      	str	r3, [r1, #8]
 8004920:	2e00      	cmp	r6, #0
 8004922:	dd9f      	ble.n	8004864 <__sflush_r+0x18>
 8004924:	4633      	mov	r3, r6
 8004926:	463a      	mov	r2, r7
 8004928:	4628      	mov	r0, r5
 800492a:	6a21      	ldr	r1, [r4, #32]
 800492c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8004930:	47e0      	blx	ip
 8004932:	2800      	cmp	r0, #0
 8004934:	dc06      	bgt.n	8004944 <__sflush_r+0xf8>
 8004936:	89a3      	ldrh	r3, [r4, #12]
 8004938:	f04f 30ff 	mov.w	r0, #4294967295
 800493c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004940:	81a3      	strh	r3, [r4, #12]
 8004942:	e790      	b.n	8004866 <__sflush_r+0x1a>
 8004944:	4407      	add	r7, r0
 8004946:	1a36      	subs	r6, r6, r0
 8004948:	e7ea      	b.n	8004920 <__sflush_r+0xd4>
 800494a:	bf00      	nop
 800494c:	dfbffffe 	.word	0xdfbffffe

08004950 <_fflush_r>:
 8004950:	b538      	push	{r3, r4, r5, lr}
 8004952:	690b      	ldr	r3, [r1, #16]
 8004954:	4605      	mov	r5, r0
 8004956:	460c      	mov	r4, r1
 8004958:	b913      	cbnz	r3, 8004960 <_fflush_r+0x10>
 800495a:	2500      	movs	r5, #0
 800495c:	4628      	mov	r0, r5
 800495e:	bd38      	pop	{r3, r4, r5, pc}
 8004960:	b118      	cbz	r0, 800496a <_fflush_r+0x1a>
 8004962:	6a03      	ldr	r3, [r0, #32]
 8004964:	b90b      	cbnz	r3, 800496a <_fflush_r+0x1a>
 8004966:	f7ff f9b1 	bl	8003ccc <__sinit>
 800496a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d0f3      	beq.n	800495a <_fflush_r+0xa>
 8004972:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004974:	07d0      	lsls	r0, r2, #31
 8004976:	d404      	bmi.n	8004982 <_fflush_r+0x32>
 8004978:	0599      	lsls	r1, r3, #22
 800497a:	d402      	bmi.n	8004982 <_fflush_r+0x32>
 800497c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800497e:	f7ff fb99 	bl	80040b4 <__retarget_lock_acquire_recursive>
 8004982:	4628      	mov	r0, r5
 8004984:	4621      	mov	r1, r4
 8004986:	f7ff ff61 	bl	800484c <__sflush_r>
 800498a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800498c:	4605      	mov	r5, r0
 800498e:	07da      	lsls	r2, r3, #31
 8004990:	d4e4      	bmi.n	800495c <_fflush_r+0xc>
 8004992:	89a3      	ldrh	r3, [r4, #12]
 8004994:	059b      	lsls	r3, r3, #22
 8004996:	d4e1      	bmi.n	800495c <_fflush_r+0xc>
 8004998:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800499a:	f7ff fb8c 	bl	80040b6 <__retarget_lock_release_recursive>
 800499e:	e7dd      	b.n	800495c <_fflush_r+0xc>

080049a0 <__swhatbuf_r>:
 80049a0:	b570      	push	{r4, r5, r6, lr}
 80049a2:	460c      	mov	r4, r1
 80049a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049a8:	4615      	mov	r5, r2
 80049aa:	2900      	cmp	r1, #0
 80049ac:	461e      	mov	r6, r3
 80049ae:	b096      	sub	sp, #88	; 0x58
 80049b0:	da0c      	bge.n	80049cc <__swhatbuf_r+0x2c>
 80049b2:	89a3      	ldrh	r3, [r4, #12]
 80049b4:	2100      	movs	r1, #0
 80049b6:	f013 0f80 	tst.w	r3, #128	; 0x80
 80049ba:	bf0c      	ite	eq
 80049bc:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80049c0:	2340      	movne	r3, #64	; 0x40
 80049c2:	2000      	movs	r0, #0
 80049c4:	6031      	str	r1, [r6, #0]
 80049c6:	602b      	str	r3, [r5, #0]
 80049c8:	b016      	add	sp, #88	; 0x58
 80049ca:	bd70      	pop	{r4, r5, r6, pc}
 80049cc:	466a      	mov	r2, sp
 80049ce:	f000 f849 	bl	8004a64 <_fstat_r>
 80049d2:	2800      	cmp	r0, #0
 80049d4:	dbed      	blt.n	80049b2 <__swhatbuf_r+0x12>
 80049d6:	9901      	ldr	r1, [sp, #4]
 80049d8:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80049dc:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80049e0:	4259      	negs	r1, r3
 80049e2:	4159      	adcs	r1, r3
 80049e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80049e8:	e7eb      	b.n	80049c2 <__swhatbuf_r+0x22>

080049ea <__smakebuf_r>:
 80049ea:	898b      	ldrh	r3, [r1, #12]
 80049ec:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80049ee:	079d      	lsls	r5, r3, #30
 80049f0:	4606      	mov	r6, r0
 80049f2:	460c      	mov	r4, r1
 80049f4:	d507      	bpl.n	8004a06 <__smakebuf_r+0x1c>
 80049f6:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80049fa:	6023      	str	r3, [r4, #0]
 80049fc:	6123      	str	r3, [r4, #16]
 80049fe:	2301      	movs	r3, #1
 8004a00:	6163      	str	r3, [r4, #20]
 8004a02:	b002      	add	sp, #8
 8004a04:	bd70      	pop	{r4, r5, r6, pc}
 8004a06:	466a      	mov	r2, sp
 8004a08:	ab01      	add	r3, sp, #4
 8004a0a:	f7ff ffc9 	bl	80049a0 <__swhatbuf_r>
 8004a0e:	9900      	ldr	r1, [sp, #0]
 8004a10:	4605      	mov	r5, r0
 8004a12:	4630      	mov	r0, r6
 8004a14:	f7ff fbb8 	bl	8004188 <_malloc_r>
 8004a18:	b948      	cbnz	r0, 8004a2e <__smakebuf_r+0x44>
 8004a1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a1e:	059a      	lsls	r2, r3, #22
 8004a20:	d4ef      	bmi.n	8004a02 <__smakebuf_r+0x18>
 8004a22:	f023 0303 	bic.w	r3, r3, #3
 8004a26:	f043 0302 	orr.w	r3, r3, #2
 8004a2a:	81a3      	strh	r3, [r4, #12]
 8004a2c:	e7e3      	b.n	80049f6 <__smakebuf_r+0xc>
 8004a2e:	89a3      	ldrh	r3, [r4, #12]
 8004a30:	6020      	str	r0, [r4, #0]
 8004a32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a36:	81a3      	strh	r3, [r4, #12]
 8004a38:	9b00      	ldr	r3, [sp, #0]
 8004a3a:	6120      	str	r0, [r4, #16]
 8004a3c:	6163      	str	r3, [r4, #20]
 8004a3e:	9b01      	ldr	r3, [sp, #4]
 8004a40:	b15b      	cbz	r3, 8004a5a <__smakebuf_r+0x70>
 8004a42:	4630      	mov	r0, r6
 8004a44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004a48:	f000 f81e 	bl	8004a88 <_isatty_r>
 8004a4c:	b128      	cbz	r0, 8004a5a <__smakebuf_r+0x70>
 8004a4e:	89a3      	ldrh	r3, [r4, #12]
 8004a50:	f023 0303 	bic.w	r3, r3, #3
 8004a54:	f043 0301 	orr.w	r3, r3, #1
 8004a58:	81a3      	strh	r3, [r4, #12]
 8004a5a:	89a3      	ldrh	r3, [r4, #12]
 8004a5c:	431d      	orrs	r5, r3
 8004a5e:	81a5      	strh	r5, [r4, #12]
 8004a60:	e7cf      	b.n	8004a02 <__smakebuf_r+0x18>
	...

08004a64 <_fstat_r>:
 8004a64:	b538      	push	{r3, r4, r5, lr}
 8004a66:	2300      	movs	r3, #0
 8004a68:	4d06      	ldr	r5, [pc, #24]	; (8004a84 <_fstat_r+0x20>)
 8004a6a:	4604      	mov	r4, r0
 8004a6c:	4608      	mov	r0, r1
 8004a6e:	4611      	mov	r1, r2
 8004a70:	602b      	str	r3, [r5, #0]
 8004a72:	f7fd f811 	bl	8001a98 <_fstat>
 8004a76:	1c43      	adds	r3, r0, #1
 8004a78:	d102      	bne.n	8004a80 <_fstat_r+0x1c>
 8004a7a:	682b      	ldr	r3, [r5, #0]
 8004a7c:	b103      	cbz	r3, 8004a80 <_fstat_r+0x1c>
 8004a7e:	6023      	str	r3, [r4, #0]
 8004a80:	bd38      	pop	{r3, r4, r5, pc}
 8004a82:	bf00      	nop
 8004a84:	2000046c 	.word	0x2000046c

08004a88 <_isatty_r>:
 8004a88:	b538      	push	{r3, r4, r5, lr}
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	4d05      	ldr	r5, [pc, #20]	; (8004aa4 <_isatty_r+0x1c>)
 8004a8e:	4604      	mov	r4, r0
 8004a90:	4608      	mov	r0, r1
 8004a92:	602b      	str	r3, [r5, #0]
 8004a94:	f7fd f80f 	bl	8001ab6 <_isatty>
 8004a98:	1c43      	adds	r3, r0, #1
 8004a9a:	d102      	bne.n	8004aa2 <_isatty_r+0x1a>
 8004a9c:	682b      	ldr	r3, [r5, #0]
 8004a9e:	b103      	cbz	r3, 8004aa2 <_isatty_r+0x1a>
 8004aa0:	6023      	str	r3, [r4, #0]
 8004aa2:	bd38      	pop	{r3, r4, r5, pc}
 8004aa4:	2000046c 	.word	0x2000046c

08004aa8 <_sbrk_r>:
 8004aa8:	b538      	push	{r3, r4, r5, lr}
 8004aaa:	2300      	movs	r3, #0
 8004aac:	4d05      	ldr	r5, [pc, #20]	; (8004ac4 <_sbrk_r+0x1c>)
 8004aae:	4604      	mov	r4, r0
 8004ab0:	4608      	mov	r0, r1
 8004ab2:	602b      	str	r3, [r5, #0]
 8004ab4:	f7fd f816 	bl	8001ae4 <_sbrk>
 8004ab8:	1c43      	adds	r3, r0, #1
 8004aba:	d102      	bne.n	8004ac2 <_sbrk_r+0x1a>
 8004abc:	682b      	ldr	r3, [r5, #0]
 8004abe:	b103      	cbz	r3, 8004ac2 <_sbrk_r+0x1a>
 8004ac0:	6023      	str	r3, [r4, #0]
 8004ac2:	bd38      	pop	{r3, r4, r5, pc}
 8004ac4:	2000046c 	.word	0x2000046c

08004ac8 <memchr>:
 8004ac8:	4603      	mov	r3, r0
 8004aca:	b510      	push	{r4, lr}
 8004acc:	b2c9      	uxtb	r1, r1
 8004ace:	4402      	add	r2, r0
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	d101      	bne.n	8004ada <memchr+0x12>
 8004ad6:	2000      	movs	r0, #0
 8004ad8:	e003      	b.n	8004ae2 <memchr+0x1a>
 8004ada:	7804      	ldrb	r4, [r0, #0]
 8004adc:	3301      	adds	r3, #1
 8004ade:	428c      	cmp	r4, r1
 8004ae0:	d1f6      	bne.n	8004ad0 <memchr+0x8>
 8004ae2:	bd10      	pop	{r4, pc}

08004ae4 <_init>:
 8004ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ae6:	bf00      	nop
 8004ae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004aea:	bc08      	pop	{r3}
 8004aec:	469e      	mov	lr, r3
 8004aee:	4770      	bx	lr

08004af0 <_fini>:
 8004af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004af2:	bf00      	nop
 8004af4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004af6:	bc08      	pop	{r3}
 8004af8:	469e      	mov	lr, r3
 8004afa:	4770      	bx	lr
